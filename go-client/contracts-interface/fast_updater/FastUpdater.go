// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package fast_updater

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// G1Point is an auto generated low-level Go binding around an user-defined struct.
type G1Point struct {
	X *big.Int
	Y *big.Int
}

// IFastUpdaterFastUpdates is an auto generated low-level Go binding around an user-defined struct.
type IFastUpdaterFastUpdates struct {
	SortitionBlock      *big.Int
	SortitionCredential SortitionCredential
	Deltas              []byte
	Signature           IFastUpdaterSignature
}

// IFastUpdaterSignature is an auto generated low-level Go binding around an user-defined struct.
type IFastUpdaterSignature struct {
	V uint8
	R [32]byte
	S [32]byte
}

// SortitionCredential is an auto generated low-level Go binding around an user-defined struct.
type SortitionCredential struct {
	Replicate *big.Int
	Gamma     G1Point
	C         *big.Int
	S         *big.Int
}

// FastUpdaterMetaData contains all meta data concerning the FastUpdater contract.
var FastUpdaterMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIGovernanceSettings\",\"name\":\"_governanceSettings\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialGovernance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressUpdater\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_flareDaemon\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_firstVotingRoundStartTs\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"_votingEpochDurationSeconds\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_submissionWindow\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"FastUpdateFeedRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"votingRoundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes21\",\"name\":\"id\",\"type\":\"bytes21\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int8\",\"name\":\"decimals\",\"type\":\"int8\"}],\"name\":\"FastUpdateFeedReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"votingEpochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"feeds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"int8[]\",\"name\":\"decimals\",\"type\":\"int8[]\"}],\"name\":\"FastUpdateFeeds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"votingRoundId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signingPolicyAddress\",\"type\":\"address\"}],\"name\":\"FastUpdateFeedsSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowedAfterTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encodedCall\",\"type\":\"bytes\"}],\"name\":\"GovernanceCallTimelocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initialGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceInitialised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governanceSettings\",\"type\":\"address\"}],\"name\":\"GovernedProductionModeEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TimelockedGovernanceCallCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TimelockedGovernanceCallExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BLOCKS_HISTORY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEED_AGE_IN_VOTING_EPOCHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNum\",\"type\":\"uint256\"}],\"name\":\"blockScoreCutoff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_cutoff\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"}],\"name\":\"cancelGovernanceCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRewardEpochId\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentScoreCutoff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_cutoff\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signingPolicyAddress\",\"type\":\"address\"}],\"name\":\"currentSortitionWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daemonize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"}],\"name\":\"executeGovernanceCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fastUpdateIncentiveManager\",\"outputs\":[{\"internalType\":\"contractIIFastUpdateIncentiveManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fastUpdatesConfiguration\",\"outputs\":[{\"internalType\":\"contractIFastUpdatesConfiguration\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCalculator\",\"outputs\":[{\"internalType\":\"contractIIFeeCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchAllCurrentFeeds\",\"outputs\":[{\"internalType\":\"bytes21[]\",\"name\":\"_feedIds\",\"type\":\"bytes21[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_feeds\",\"type\":\"uint256[]\"},{\"internalType\":\"int8[]\",\"name\":\"_decimals\",\"type\":\"int8[]\"},{\"internalType\":\"uint64\",\"name\":\"_timestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"name\":\"fetchCurrentFeeds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_feeds\",\"type\":\"uint256[]\"},{\"internalType\":\"int8[]\",\"name\":\"_decimals\",\"type\":\"int8[]\"},{\"internalType\":\"uint64\",\"name\":\"_timestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstVotingRoundStartTs\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flareDaemon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flareSystemsManager\",\"outputs\":[{\"internalType\":\"contractIFlareSystemsManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ftsoFeedPublisher\",\"outputs\":[{\"internalType\":\"contractIFtsoFeedPublisher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressUpdater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_addressUpdater\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFreeFetchAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceSettings\",\"outputs\":[{\"internalType\":\"contractIGovernanceSettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIGovernanceSettings\",\"name\":\"_governanceSettings\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialGovernance\",\"type\":\"address\"}],\"name\":\"initialise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isExecutor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_historySize\",\"type\":\"uint256\"}],\"name\":\"numberOfUpdates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_noOfUpdates\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"numberOfUpdatesInBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productionMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"name\":\"removeFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"name\":\"resetFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDestination\",\"type\":\"address\"}],\"name\":\"setFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_freeFetchAddresses\",\"type\":\"address[]\"}],\"name\":\"setFreeFetchAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_submissionWindow\",\"type\":\"uint8\"}],\"name\":\"setSubmissionWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submissionWindow\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sortitionBlock\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"replicate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"structG1Point\",\"name\":\"gamma\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"internalType\":\"structSortitionCredential\",\"name\":\"sortitionCredential\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"deltas\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structIFastUpdater.Signature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"structIFastUpdater.FastUpdates\",\"name\":\"_updates\",\"type\":\"tuple\"}],\"name\":\"submitUpdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchToFallbackMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchToProductionMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"timelockedCalls\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allowedAfterTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encodedCall\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_contractNameHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_contractAddresses\",\"type\":\"address[]\"}],\"name\":\"updateContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_part1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_part2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_verificationData\",\"type\":\"bytes\"}],\"name\":\"verifyPublicKey\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voterRegistry\",\"outputs\":[{\"internalType\":\"contractIIVoterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingEpochDurationSeconds\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60e06040526001607f1b600f553480156200001957600080fd5b506040516200682a3803806200682a8339810160408190526200003c91620005aa565b8487876200004b8282620001d1565b50620000779050817f714f205b2abd25bef1d06a1af944e38c113fe6160375c4e1d6d5cf28848e771955565b506001600160a01b038416620000c85760405162461bcd60e51b8152602060048201526011602482015270666c617265206461656d6f6e207a65726f60781b60448201526064015b60405180910390fd5b60008260ff16116200011d5760405162461bcd60e51b815260206004820152601a60248201527f766f74696e672065706f6368206475726174696f6e207a65726f0000000000006044820152606401620000bf565b6001600160a01b03841660c05263ffffffff831660805260ff821660a0526200014562000346565b6005805463ffffffff929092166401000000000263ffffffff60201b1990921691909117905562000176816200037e565b62000180620003e9565b604080516101f4808252613ea0820190925290816020015b6060815260200190600190039081620001985750508051620001c3916010916020909101906200045d565b505050505050505062000837565b600054600160a01b900460ff16156200022d5760405162461bcd60e51b815260206004820152601460248201527f696e697469616c6973656420213d2066616c73650000000000000000000000006044820152606401620000bf565b6001600160a01b038216620002855760405162461bcd60e51b815260206004820152601860248201527f676f7665726e616e63652073657474696e6773207a65726f00000000000000006044820152606401620000bf565b6001600160a01b038116620002d05760405162461bcd60e51b815260206004820152601060248201526f5f676f7665726e616e6365207a65726f60801b6044820152606401620000bf565b600080546001600160a01b038481166001600160a81b031990921691909117600160a01b17909155600180549183166001600160a01b0319909216821790556040519081527f9789733827840833afc031fb2ef9ab6894271f77bad2085687cf4ae5c7bee4db9060200160405180910390a15050565b600060a0516001600160401b03166080516001600160401b0316426200036d919062000681565b6200037991906200069d565b905090565b60648160ff1610620003d35760405162461bcd60e51b815260206004820152601960248201527f5375626d697373696f6e2077696e646f7720746f6f20626967000000000000006044820152606401620000bf565b6005805460ff191660ff92909216919091179055565b600554620003fc9060ff166001620006c0565b60ff166001600160401b0381111562000419576200041962000655565b60405190808252806020026020018201604052801562000443578160200160208202803683370190505b5080516200045a91600e91602090910190620004ba565b50565b828054828255906000526020600020908101928215620004a8579160200282015b82811115620004a857825182906200049790826200076b565b50916020019190600101906200047e565b50620004b692915062000506565b5090565b828054828255906000526020600020908101928215620004f8579160200282015b82811115620004f8578251825591602001919060010190620004db565b50620004b692915062000527565b80821115620004b65760006200051d82826200053e565b5060010162000506565b5b80821115620004b6576000815560010162000528565b5080546200054c90620006dc565b6000825580601f106200055d575050565b601f0160209004906000526020600020908101906200045a919062000527565b6001600160a01b03811681146200045a57600080fd5b805160ff81168114620005a557600080fd5b919050565b600080600080600080600060e0888a031215620005c657600080fd5b8751620005d3816200057d565b6020890151909750620005e6816200057d565b6040890151909650620005f9816200057d565b60608901519095506200060c816200057d565b608089015190945063ffffffff811681146200062757600080fd5b92506200063760a0890162000593565b91506200064760c0890162000593565b905092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156200069757620006976200066b565b92915050565b600082620006bb57634e487b7160e01b600052601260045260246000fd5b500490565b60ff81811683821601908111156200069757620006976200066b565b600181811c90821680620006f157607f821691505b6020821081036200071257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200076657600081815260208120601f850160051c81016020861015620007415750805b601f850160051c820191505b8181101562000762578281556001016200074d565b5050505b505050565b81516001600160401b0381111562000787576200078762000655565b6200079f81620007988454620006dc565b8462000718565b602080601f831160018114620007d75760008415620007be5750858301515b600019600386901b1c1916600185901b17855562000762565b600085815260208120601f198616915b828110156200080857888601518255948401946001909101908401620007e7565b5085821015620008275787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c051615fa76200088360003960008181610563015281816121440152612afa015260008181610383015261393301526000818161077b015261395d0152615fa76000f3fe60806040526004361061025c5760003560e01c8063a14634a711610144578063e17f212e116100b6578063ef88bf131161007a578063ef88bf131461079d578063f5a98383146107bd578063f5f5ba72146107d2578063faae7fc91461080c578063fbe532341461082c578063fc79c3001461084c57600080fd5b8063e17f212e146106da578063e22fdece146106fb578063e36da7b714610710578063e621dbc71461073d578063e8d0e70a1461076957600080fd5b8063be60040e11610108578063be60040e14610625578063c10f489a14610645578063c1bff13914610665578063dcb1476e1461067a578063de53fcd51461069a578063debfda30146106ba57600080fd5b8063a14634a714610585578063abfaf170146105a5578063b00c0b76146105c5578063b00eb9fe146105e5578063b3d2fc941461060557600080fd5b806362354e03116101dd57806370473f2f116101a157806370473f2f1461049957806374e6310e146104b95780637925eaca146104e75780637fe3341a146105075780638e0e9f7c1461051c578063a10775321461055157600080fd5b806362354e03146103f2578063623d12971461041257806363f921db1461043457806367fc4029146104545780636d0e8c341461047457600080fd5b8063470e91df11610224578063470e91df1461031d5780635267a15d1461033d5780635a832088146103715780635aa6e675146103bd5780635ff27079146103d257600080fd5b80630799fe75146102615780630a1660511461028957806329bfe39d146102ab57806345a15d3c146102e35780634691377f14610305575b600080fd5b34801561026d57600080fd5b5061027661086c565b6040519081526020015b60405180910390f35b34801561029557600080fd5b506102a96102a4366004614e2e565b61087b565b005b3480156102b757600080fd5b506009546102cb906001600160a01b031681565b6040516001600160a01b039091168152602001610280565b6102f66102f1366004614e95565b6108d5565b60405161028093929190614f50565b61030d610f10565b6040516102809493929190614f8f565b34801561032957600080fd5b506102a9610338366004615016565b6110b0565b34801561034957600080fd5b507f714f205b2abd25bef1d06a1af944e38c113fe6160375c4e1d6d5cf28848e7719546102cb565b34801561037d57600080fd5b506103a57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160401b039091168152602001610280565b3480156103c957600080fd5b506102cb61167a565b3480156103de57600080fd5b506102a96103ed366004615051565b611711565b3480156103fe57600080fd5b506000546102cb906001600160a01b031681565b34801561041e57600080fd5b50610427611997565b604051610280919061507b565b34801561044057600080fd5b506102a961044f366004614e95565b6119fc565b34801561046057600080fd5b506102a961046f366004615051565b612056565b34801561048057600080fd5b50610489612137565b6040519015158152602001610280565b3480156104a557600080fd5b506102a96104b436600461513f565b61247c565b3480156104c557600080fd5b506104d96104d4366004615051565b61257d565b604051610280929190615249565b3480156104f357600080fd5b506007546102cb906001600160a01b031681565b34801561051357600080fd5b50610276601481565b34801561052857600080fd5b5060055461053d90610100900462ffffff1681565b60405162ffffff9091168152602001610280565b34801561055d57600080fd5b506102cb7f000000000000000000000000000000000000000000000000000000000000000081565b34801561059157600080fd5b506102766105a0366004615262565b612622565b3480156105b157600080fd5b506102a96105c03660046152a2565b612644565b3480156105d157600080fd5b506102a96105e03660046153a6565b61283f565b3480156105f157600080fd5b50600b546102cb906001600160a01b031681565b34801561061157600080fd5b506102a9610620366004614e95565b61291a565b34801561063157600080fd5b506008546102cb906001600160a01b031681565b34801561065157600080fd5b50600a546102cb906001600160a01b031681565b34801561067157600080fd5b50610276606481565b34801561068657600080fd5b5061027661069536600461545e565b612994565b3480156106a657600080fd5b506015546102cb906001600160a01b031681565b3480156106c657600080fd5b506104896106d5366004615262565b612a64565b3480156106e657600080fd5b5060005461048990600160a81b900460ff1681565b34801561070757600080fd5b50610489612aed565b34801561071c57600080fd5b5061073061072b36600461545e565b612b61565b6040516102809190615477565b34801561074957600080fd5b506005546107579060ff1681565b60405160ff9091168152602001610280565b34801561077557600080fd5b506103a57f000000000000000000000000000000000000000000000000000000000000000081565b3480156107a957600080fd5b506102a96107b836600461548a565b612c58565b3480156107c957600080fd5b506102a9612dbe565b3480156107de57600080fd5b50604080518082018252600b81526a2330b9ba2ab83230ba32b960a91b6020820152905161028091906154c3565b34801561081857600080fd5b506006546102cb906001600160a01b031681565b34801561083857600080fd5b506102a9610847366004615262565b612e84565b34801561085857600080fd5b5061027661086736600461545e565b612f16565b6000610876612faa565b905090565b600054600160b01b900460ff168061089d5750600054600160a81b900460ff16155b156108ca576108aa6131a8565b6108b3816131e2565b6108bf600e6000614d76565b6108c761324b565b50565b6108c76000366132b4565b3360009081526014602052604081205460609182918103610a5057600b54604051630e2f54db60e41b81526000916001600160a01b03169063e2f54db09061092390899089906004016154d6565b602060405180830381865afa158015610940573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610964919061550f565b9050803410156109a95760405162461bcd60e51b815260206004820152600b60248201526a746f6f206c6f772066656560a81b60448201526064015b60405180910390fd5b3415610a4a576015546040516000916001600160a01b03169083908381818185875af1925050503d80600081146109fc576040519150601f19603f3d011682016040523d82523d6000602084013e610a01565b606091505b5050905080610a485760405162461bcd60e51b8152602060048201526013602482015272199959481d1c985b9cd9995c8819985a5b1959606a1b60448201526064016109a0565b505b50610a90565b3415610a905760405162461bcd60e51b815260206004820152600f60248201526e1b9bc819995948195e1c1958dd1959608a1b60448201526064016109a0565b836001600160401b03811115610aa857610aa86150d1565b604051908082528060200260200182016040528015610ad1578160200160208202803683370190505b50604051600480825254919350906000806000196001841601610b9e5760208420606085015260028304925060208985376020845104602085015282845110610b1957600080fd5b602084015160608501510154915060005b88811015610b985760208082028b0186376020855104915083855110610b4f57600080fd5b6020855106604086015260208501518214610b7557816020860152816060860151015492505b604085015160080283901b60f81c60208281028901018190529150600101610b2a565b50600192505b60018316610bf3576002603f84160492915060005b88811015610bf15760208082028b01863783855110610bd157600080fd5b845160080283901b60f81c60208281028901018190529150600101610bb3565b505b50505050610bff613400565b9050836001600160401b03811115610c1957610c196150d1565b604051908082528060200260200182016040528015610c42578160200160208202803683370190505b50600f546040516003547fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b60a08301527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae672606083015260115460c083015292955090916008026000808060208b8637845160088104602087018190526007909116604087015260a08601510154915060005b8a811015610d445760208082028d01873784865110610cf257600080fd5b600886510491506008865106604087015260208601518214610d1f578160208701528160a0870151015492505b8260206040880151021b91508160e01c6020820260208c010152600181019050610cd4565b506012545b60c08601518114610f025760608601518101608087018190525494506000196001861601610e535760206080870181812090526002909504948c8737608086510460208701526004850286511015610daa5760208601516080870151015493505b60005b8b811015610e4d5760208082028e018837608087510492506004860287511015610e45576080875106604088015260208701518314610df757826020880152826080880151015494505b604087015160020285901b60fe1c92506000198301610e275760208181028c010180518902607f81901c90915293505b60038303610e455760208181028c01018051607f1b89810490915293505b600101610dad565b50600194505b60018516610ef3576002603f86160494935060208c87376080865104602087015260005b8b811015610ef15760208082028e0188376004860287511015610ee9578651607f166040880181905260020285901b60fe1c92506000198301610ecb5760208181028c010180518902607f81901c90915293505b60038303610ee95760208181028c01018051607f1b89810490915293505b600101610e77565b505b6101f460018201069050610d49565b505050505050509250925092565b60608060606000600a60009054906101000a90046001600160a01b03166001600160a01b0316630c518dce6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610f6a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f929190810190615545565b935060048054610fa1906155d1565b9050845114610fb257610fb2615605565b600084516001600160401b03811115610fcd57610fcd6150d1565b604051908082528060200260200182016040528015610ff6578160200160208202803683370190505b50905060005b815181101561103557808282815181106110185761101861561b565b60209081029190910101528061102d81615647565b915050610ffc565b50604051631168574f60e21b815230906345a15d3c90349061105b908590600401615477565b60006040518083038185885af1158015611079573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526110a291908101906156eb565b969791969095509350915050565b60055460ff811690610100810462ffffff1690640100000000900463ffffffff166110dc8385356157b6565b43106111415760405162461bcd60e51b815260206004820152602e60248201527f55706461746573206e6f206c6f6e67657220616363657074656420666f72207460448201526d686520676976656e20626c6f636b60901b60648201526084016109a0565b83354310156111a85760405162461bcd60e51b815260206004820152602d60248201527f55706461746573206e6f742079657420617661696c61626c6520666f7220746860448201526c6520676976656e20626c6f636b60981b60648201526084016109a0565b6003546111b69060086157c9565b6111c360c08601866157e0565b6111cf915060046157c9565b11156112275760405162461bcd60e51b815260206004820152602160248201527f4d6f72652075706461746573207468616e20617661696c61626c6520666565646044820152607360f81b60648201526084016109a0565b6000600285356020870161123e60c08901896157e0565b604051602001611251949392919061584f565b60408051601f198184030181529082905261126b91615898565b602060405180830381855afa158015611288573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906112ab919061550f565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c829052603c812091925060e0870190611303836112f46101008b0185614e2e565b8460200135856040013561345a565b90506001600160a01b03811661135b5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016109a0565b6000806113688389613488565b6040805160a081019182905260065463e0d4ea3760e01b90925260a481018c90529294509092506000919081906001600160a01b031663e0d4ea3760c48301602060405180830381865afa1580156113c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e8919061550f565b81528c356020820152604001600e6114018d60016157b6565b61140c908f356158ca565b8154811061141c5761141c61561b565b6000918252602080832090910154835282810186905260409283018790528e35808352600c8252838320845189518185015289840151958101959095526060850191909152908f013560808401529293509060029060a00160408051601f198184030181529082905261148e91615898565b602060405180830381855afa1580156114ab573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906114ce919061550f565b905060005b825481101561155957818382815481106114ef576114ef61561b565b9060005260206000200154036115475760405162461bcd60e51b815260206004820152601b60248201527f7375626d697373696f6e20616c72656164792070726f7669646564000000000060448201526064016109a0565b8061155181615647565b9150506114d3565b508181908060018154018082558091505060019003906000526020600020016000909190919091505560006115a1848f60200180360381019061159c91906158de565b6135b6565b509050806115f15760405162461bcd60e51b815260206004820152601760248201527f736f72746974696f6e2070726f6f6620696e76616c696400000000000000000060448201526064016109a0565b6116098e8060c0019061160491906157e0565b613669565b436000908152600d602052604081208054600192906116299084906157b6565b90915550506040516001600160a01b0388169063ffffffff8d16907f63db91b14b3d088c677f046180aefcea7a236649704d90ce810cde455d38d93690600090a35050505050505050505050505050565b60008054600160a81b900460ff1661169c57506001546001600160a01b031690565b60008054906101000a90046001600160a01b03166001600160a01b031663732524946040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610876919061596c565b61171a33612a64565b6117565760405162461bcd60e51b815260206004820152600d60248201526c37b7363c9032bc32b1baba37b960991b60448201526064016109a0565b6001600160e01b03198116600090815260026020526040812080549091036117c05760405162461bcd60e51b815260206004820152601a60248201527f74696d656c6f636b3a20696e76616c69642073656c6563746f7200000000000060448201526064016109a0565b80544210156118115760405162461bcd60e51b815260206004820152601960248201527f74696d656c6f636b3a206e6f7420616c6c6f776564207965740000000000000060448201526064016109a0565b6000816001018054611822906155d1565b80601f016020809104026020016040519081016040528092919081815260200182805461184e906155d1565b801561189b5780601f106118705761010080835404028352916020019161189b565b820191906000526020600020905b81548152906001019060200180831161187e57829003601f168201915b505050506001600160e01b03198516600090815260026020526040812081815592935090506118cd6001830182614d94565b50506000805460ff60b01b1916600160b01b17815560405130906118f2908490615898565b6000604051808303816000865af19150503d806000811461192f576040519150601f19603f3d011682016040523d82523d6000602084013e611934565b606091505b50506000805460ff60b01b19169055604080516001600160e01b0319871681524260208201529192507fa7326b57fc9cfe267aaea5e7f0b01757154d265620a0585819416ee9ddd2c438910160405180910390a1611991816136bb565b50505050565b606060136000018054806020026020016040519081016040528092919081815260200182805480156119f257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116119d4575b5050505050905090565b600a546001600160a01b0316331480611a2d5750611a1861167a565b6001600160a01b0316336001600160a01b0316145b611a8f5760405162461bcd60e51b815260206004820152602d60248201527f6f6e6c792066617374207570646174657320636f6e66696775726174696f6e2060448201526c6f7220676f7665726e616e636560981b60648201526084016109a0565b611a976136d8565b6000805b82811015611af15781848483818110611ab657611ab661561b565b905060200201351115611adf57838382818110611ad557611ad561561b565b9050602002013591505b80611ae981615647565b915050611a9b565b50600060048054611b01906155d1565b9150505b818111611b80576004600181805480611b1d906155d1565b80601f8103611b3c5783600052602060002060ff1984168155603f9350505b50600282018355600181019250505003815460011615611b6b5790600052602060002090602091828204019190065b50819050611b7881615647565b915050611b05565b506003545b611b90600883615989565b8111611bb45760038054600101815560005280611bac81615647565b915050611b85565b5060048054611bc2906155d1565b600354909150611bd39060086157c9565b1015611be157611be1615605565b6000611beb61392f565b63ffffffff1690506000600760009054906101000a90046001600160a01b03166001600160a01b0316637a68533f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6c919061550f565b905060008060005b8681101561204c57600a546000906001600160a01b031663931028368a8a85818110611ca257611ca261561b565b905060200201356040518263ffffffff1660e01b8152600401611cc791815260200190565b602060405180830381865afa158015611ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d08919061599d565b90506001600160581b03198116611d575760405162461bcd60e51b81526020600482015260136024820152721a5b99195e081b9bdd081cdd5c1c1bdc9d1959606a1b60448201526064016109a0565b6009546040516326e5ec9360e21b81526001600160581b0319831660048201526000916001600160a01b031690639b97b24c9060240160a060405180830381865afa158015611daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dce91906159ca565b9050866014826000015163ffffffff16611de891906157b6565b11611e245760405162461bcd60e51b815260206004820152600c60248201526b19995959081d1bdbc81bdb1960a21b60448201526064016109a0565b6000816040015160030b13611e7b5760405162461bcd60e51b815260206004820152601b60248201527f666565642076616c7565207a65726f206f72206e65676174697665000000000060448201526064016109a0565b611e94816040015163ffffffff1682608001518861399a565b9095509350600060088b8b86818110611eaf57611eaf61561b565b90506020020135611ec09190615989565b9050600060088c8c87818110611ed857611ed861561b565b90506020020135611ee991906158ca565b611ef4906007615a6a565b611eff9060206157c9565b6003805491925063ffffffff831b199189841b91839186908110611f2557611f2561561b565b9060005260206000200154161760038481548110611f4557611f4561561b565b90600052602060002001819055508660f81b60048e8e89818110611f6b57611f6b61561b565b905060200201358154611f7d906155d1565b8110611f8b57611f8b61561b565b815460011615611faa5790600052602060002090602091828204019190065b601f036101000a81548160ff02191690600160f81b84040217905550846affffffffffffffffffffff19168d8d88818110611fe757611fe761561b565b905060200201358b7ffa800fadb5e7b72652da40bcd7ca9a96cd4e53c9ea4c68b8afbba027e77a7cf58b8b60405161202c92919091825260000b602082015260400190565b60405180910390a45050505050808061204490615647565b915050611c74565b5050505050505050565b61205e613a7c565b6001600160e01b0319811660009081526002602052604081205490036120c65760405162461bcd60e51b815260206004820152601a60248201527f74696d656c6f636b3a20696e76616c69642073656c6563746f7200000000000060448201526064016109a0565b604080516001600160e01b0319831681524260208201527f7735b2391c38a81419c513e30ca578db7158eadd7101511b23e221c654d19cf8910160405180910390a16001600160e01b031981166000908152600260205260408120818155906121326001830182614d94565b505050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146121a55760405162461bcd60e51b815260206004820152601160248201527037b7363c90333630b932903230b2b6b7b760791b60448201526064016109a0565b6121ad6136d8565b60006121b761392f565b60055490915063ffffffff64010000000090910481169082161115612253576000806121e1613ad6565b6005805467ffffffff00000000191664010000000063ffffffff8816021790559092509050612211600184615a7d565b63ffffffff167f7195d3bbca575b55b0f4b62da395f7224b75225d9c08741d216e6cf10a83eabe8383604051612248929190615a9a565b60405180910390a250505b60065460408051637056269760e01b815290516000926001600160a01b03169163705626979160048083019260209291908290030181865afa15801561229d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c19190615abf565b60055490915062ffffff80831661010090920416146122fb576122e2613dde565b6005805463ffffff00191661010062ffffff8416021790555b612303613ff7565b600760009054906101000a90046001600160a01b03166001600160a01b031663ea105ac76040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561235357600080fd5b505af1158015612367573d6000803e3d6000fd5b505060058054436001600160401b03908116600160c01b026001600160c01b034292909216600160801b02919091166fffffffffffffffffffffffffffffffff90921691909117179055506123bc9050612faa565b600554600e906123d09060ff166001615ae4565b60ff166123de4360016157b6565b6123e891906158ca565b815481106123f8576123f861561b565b60009182526020918290200191909155600754604080516316b9bb5760e31b815290516001600160a01b039092169263b5cddab8926004808401938290030181865afa15801561244c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612470919061550f565b600f5550600191505090565b6000806000838060200190518101906124959190615afd565b604080518082019091528981526020810189905292955090935091506124ba8161407d565b6124c357600080fd5b60408051808201909152838152602081018390526124e08161407d565b6124e957600080fd5b6040516bffffffffffffffffffffffff1960608b901b16602082015261257290839060029060340160408051601f198184030181529082905261252b91615898565b602060405180830381855afa158015612548573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061256b919061550f565b87846140c8565b505050505050505050565b6002602052600090815260409020805460018201805491929161259f906155d1565b80601f01602080910402602001604051908101604052809291908181526020018280546125cb906155d1565b80156126185780601f106125ed57610100808354040283529160200191612618565b820191906000526020600020905b8154815290600101906020018083116125fb57829003601f168201915b5050505050905082565b60055460009061263d908390610100900462ffffff16613488565b9392505050565b600a546001600160a01b0316331461269e5760405162461bcd60e51b815260206004820152601f60248201527f6f6e6c792066617374207570646174657320636f6e66696775726174696f6e0060448201526064016109a0565b6126a66136d8565b60005b815181101561283b57600060088383815181106126c8576126c861561b565b60200260200101516126da9190615989565b9050600060088484815181106126f2576126f261561b565b602002602001015161270491906158ca565b61270f906007615a6a565b61271a9060206157c9565b6003805491925063ffffffff831b19918291908590811061273d5761273d61561b565b9060005260206000200154166003848154811061275c5761275c61561b565b9060005260206000200181905550600060f81b60048686815181106127835761278361561b565b60200260200101518154612796906155d1565b81106127a4576127a461561b565b8154600116156127c35790600052602060002090602091828204019190065b601f036101000a81548160ff02191690600160f81b840402179055508484815181106127f1576127f161561b565b60200260200101517f5a17f564b9fd53c971695a2e033e0cd39ee8ad08d8117242cdecad8b017335c860405160405180910390a2505050808061283390615647565b9150506126a9565b5050565b7f714f205b2abd25bef1d06a1af944e38c113fe6160375c4e1d6d5cf28848e7719546001600160a01b0316336001600160a01b0316146128b85760405162461bcd60e51b815260206004820152601460248201527337b7363c9030b2323932b9b9903ab83230ba32b960611b60448201526064016109a0565b6129106128ec83836040518060400160405280600e81526020016d20b2323932b9b9aab83230ba32b960911b815250614201565b7f714f205b2abd25bef1d06a1af944e38c113fe6160375c4e1d6d5cf28848e771955565b61283b82826142dc565b600054600160b01b900460ff168061293c5750600054600160a81b900460ff16155b15612989576129496131a8565b61283b8282808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506013939250506145089050565b61283b6000366132b4565b60006129a14360016157b6565b82111580156129be57506005546129bb9060ff16836157b6565b43105b612a215760405162461bcd60e51b815260206004820152602e60248201527f73636f7265206375746f6666206e6f7420617661696c61626c6520666f72207460448201526d686520676976656e20626c6f636b60901b60648201526084016109a0565b600554600e90612a359060ff166001615ae4565b612a429060ff16846158ca565b81548110612a5257612a5261561b565b90600052602060002001549050919050565b60008054600160a01b900460ff168015612ae75750600054604051630debfda360e41b81526001600160a01b0384811660048301529091169063debfda3090602401602060405180830381865afa158015612ac3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae79190615b2b565b92915050565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612b5b5760405162461bcd60e51b815260206004820152601160248201527037b7363c90333630b932903230b2b6b7b760791b60448201526064016109a0565b50600090565b606060648211158015612b745750438211155b612bb75760405162461bcd60e51b8152602060048201526014602482015273486973746f72792073697a6520746f6f2062696760601b60448201526064016109a0565b816001600160401b03811115612bcf57612bcf6150d1565b604051908082528060200260200182016040528015612bf8578160200160208202803683370190505b50905060005b82811015612c5257600d6000612c148343615a6a565b815260200190815260200160002054828281518110612c3557612c3561561b565b602090810291909101015280612c4a81615647565b915050612bfe565b50919050565b600054600160a01b900460ff1615612ca95760405162461bcd60e51b8152602060048201526014602482015273696e697469616c6973656420213d2066616c736560601b60448201526064016109a0565b6001600160a01b038216612cff5760405162461bcd60e51b815260206004820152601860248201527f676f7665726e616e63652073657474696e6773207a65726f000000000000000060448201526064016109a0565b6001600160a01b038116612d485760405162461bcd60e51b815260206004820152601060248201526f5f676f7665726e616e6365207a65726f60801b60448201526064016109a0565b600080546001600160a01b038481166001600160a81b031990921691909117600160a01b17909155600180549183166001600160a01b0319909216821790556040519081527f9789733827840833afc031fb2ef9ab6894271f77bad2085687cf4ae5c7bee4db9060200160405180910390a15050565b612dc6613a7c565b600054600160a81b900460ff1615612e205760405162461bcd60e51b815260206004820152601a60248201527f616c726561647920696e2070726f64756374696f6e206d6f646500000000000060448201526064016109a0565b600180546001600160a01b031916905560008054600160a81b60ff60a81b198216179091556040516001600160a01b0390911681527f83af113638b5422f9e977cebc0aaf0eaf2188eb9a8baae7f9d46c42b33a1560c9060200160405180910390a1565b600054600160b01b900460ff1680612ea65750600054600160a81b900460ff16155b156108ca57612eb36131a8565b6001600160a01b038116612ef85760405162461bcd60e51b815260206004820152600c60248201526b61646472657373207a65726f60a01b60448201526064016109a0565b601580546001600160a01b0319166001600160a01b03831617905550565b600043612f246064846157b6565b118015612f315750438211155b612f975760405162461bcd60e51b815260206004820152603160248201527f54686520676976656e20626c6f636b206973206e6f206c6f6e676572206f72206044820152706e6f742079657420617661696c61626c6560781b60648201526084016109a0565b506000908152600d602052604090205490565b600080600760009054906101000a90046001600160a01b03166001600160a01b0316636d62b4136040518163ffffffff1660e01b8152600401602060405180830381865afa158015613000573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613024919061550f565b90506078600c61303481836157b6565b61304090610100615a6a565b61304b9060026157c9565b6130559190615a6a565b61305f9190615a6a565b8161306c600c60786157b6565b61307890610100615a6a565b6130839060026157c9565b600080516020615f52833981519152901c61309e91906157c9565b901b91506130ae600c60786157b6565b6130ba90610100615a6a565b6130c6600c60786157b6565b6130d09190615a6a565b8160016130df600c60786157b6565b6130eb90610100615a6a565b6130f6906002615c31565b6131009190615a6a565b61310c600c60786157b6565b61311890610100615a6a565b600080516020615f52833981519152901c1661313491906157c9565b61313f911c836157b6565b915061314d600c60786157b6565b81600161315c600c60786157b6565b61316890610100615a6a565b613173906002615c31565b61317d9190615a6a565b600080516020615f528339815191521661319791906157c9565b6131a2911c836157b6565b91505090565b600054600160b01b900460ff16156131d8573330146131c9576131c9615605565b6000805460ff60b01b19169055565b6131e0613a7c565b565b60648160ff16106132355760405162461bcd60e51b815260206004820152601960248201527f5375626d697373696f6e2077696e646f7720746f6f206269670000000000000060448201526064016109a0565b6005805460ff191660ff92909216919091179055565b60055461325c9060ff166001615ae4565b60ff166001600160401b03811115613276576132766150d1565b60405190808252806020026020018201604052801561329f578160200160208202803683370190505b5080516108c791600e91602090910190614dce565b6132bc613a7c565b6000805460408051636221a54b60e01b81529051853593926001600160a01b031691636221a54b9160048083019260209291908290030181865afa158015613308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061332c919061550f565b9050600061333a82426157b6565b9050604051806040016040528082815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250506001600160e01b031986168152600260209081526040909120835181559083015190915060018201906133b89082615c8b565b509050507fed948300a3694aa01d4a6b258bfd664350193d770c0b51f8387277f6d83ea3b6838287876040516133f19493929190615d4a565b60405180910390a15050505050565b60006011546012540361342957506005546801000000000000000090046001600160401b031690565b436000908152600d60205260409020541561344357504290565b50600554600160801b90046001600160401b031690565b60008060008061346c8888888861451b565b92509250925061347c82826145ea565b50909695505050505050565b60408051808201909152600080825260208201526008546040516344b571d960e01b8152600481018490526001600160a01b03858116602483015260009283928392839283929116906344b571d990604401608060405180830381865afa1580156134f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061351b9190615d73565b929650909450925090508315158061353257508215155b61357e5760405162461bcd60e51b815260206004820152601960248201527f5075626c6963206b6579206e6f7420726567697374657265640000000000000060448201526064016109a0565b604080518082019091528481526020810184905295506135a961ffff808416906110009084166146a3565b9450505050509250929050565b60008083606001518360000151106136365760405162461bcd60e51b815260206004820152603f60248201527f43726564656e7469616c2773207265706c69636174652076616c75652069732060448201527f6e6f74206c657373207468616e2070726f76696465722773207765696768740060648201526084016109a0565b600061364285856146e3565b60208501515190915081801561365c575085604001518111155b93509150505b9250929050565b81816010601154815481106136805761368061561b565b906000526020600020019182613697929190615db9565b506101f460115460016136aa91906157b6565b6136b491906158ca565b6011555050565b3d604051818101604052816000823e82156136d4578181f35b8181fd5b6136e0613400565b600560086101000a8154816001600160401b0302191690836001600160401b031602179055506000600f549050604051602081016040820160608301601154608085015260008060008060008060038752602087208752601089526012545b60808b015181146139195760208a208101808a5254915060001960018316016138505760208920895260028204915060005b6001602060018503040181101561384a57808a510154935060005b61010081101561384157836008820460208402011015613841576010810460108302018a51015497506000955060005b600881101561382b5760208181028a901b60e01c98508302600883040185111561380c5785821b60fe1c99506000198a016137f957968e02607f1c965b60038a0361380c57607f9790971b8e9004965b6020810260e0039790971b9695871795600291909101906001016137bc565b508560108083030460108402018b51015561378c565b50600101613771565b50600191505b6001821661390a579091506002603f8316049060005b610100811015613908578260088204101561390857601081048951015496506000945060005b60088110156138f7576020810288901b60e01c9650600882048411156138d85784821b60fe1c985060001989016138c557958d02607f1c955b600389036138d857607f9690961b8d9004955b6020810260e0039690961b95948617946002919091019060010161388c565b50846010808303048a510155613866565b505b6101f46001820106905061373f565b5050505050505050505060808101516012555050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160401b03167f00000000000000000000000000000000000000000000000000000000000000006001600160401b0316426139909190615a6a565b6108769190615989565b600080846000036139af575083905082613a74565b8484601d82901c158015906139c85750607f198160000b135b156139e8576139d8600a83615989565b91506139e5600182615e78565b90505b6000607f6139f687856157c9565b901c90506000613a068483615a6a565b90505b600381901c158015613a1e5750607f8360000b125b8015613a2c5750601c84901c155b15613a6c57613a3c84600a6157c9565b9350613a49836001615e99565b9250607f613a5788866157c9565b901c9150613a658483615a6a565b9050613a09565b509193509150505b935093915050565b613a8461167a565b6001600160a01b0316336001600160a01b0316146131e05760405162461bcd60e51b815260206004820152600f60248201526e6f6e6c7920676f7665726e616e636560881b60448201526064016109a0565b60608060048054613ae6906155d1565b90506001600160401b03811115613aff57613aff6150d1565b604051908082528060200260200182016040528015613b28578160200160208202803683370190505b50915060048054613b38906155d1565b90506001600160401b03811115613b5157613b516150d1565b604051908082528060200260200182016040528015613b7a578160200160208202803683370190505b509050600080600860048054613b8f906155d1565b613b9a929150615989565b905060005b81811015613cb357600060038281548110613bbc57613bbc61561b565b600091825260208220015491505b6008811015613c9e57600081613be18560086157c9565b613beb91906157b6565b90506004818154613bfb906155d1565b8110613c0957613c0961561b565b815460011615613c285790600052602060002090602091828204019190065b9054901a600160f81b0260f81c878281518110613c4757613c4761561b565b60009290920b602092830291909101820152613c649083906157c9565b955060e08684901b901c888281518110613c8057613c8061561b565b60209081029190910101525080613c9681615647565b915050613bca565b50508080613cab90615647565b915050613b9f565b50600860048054613cc3906155d1565b613cce9291506158ca565b15613dd857600060038281548110613ce857613ce861561b565b60009182526020822001549150613d008360086157c9565b90505b60048054613d10906155d1565b9050811015613dd5576004818154613d27906155d1565b8110613d3557613d3561561b565b815460011615613d545790600052602060002090602091828204019190065b9054901a600160f81b0260f81c858281518110613d7357613d7361561b565b60009290920b60209283029190910190910152613d916008826158ca565b613d9c9060206157c9565b935060e08483901b901c868281518110613db857613db861561b565b602090810291909101015280613dcd81615647565b915050613d03565b50505b50509091565b60075460408051637a68533f60e01b815290516000926001600160a01b031691637a68533f9160048083019260209291908290030181865afa158015613e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e4c919061550f565b905060008080805b600354811015613ff05760038181548110613e7157613e7161561b565b9060005260206000200154925060005b6008811015613fbd5780613e968360086157c9565b613ea091906157b6565b945060048054613eaf906155d1565b9050851015613fbd5760006004868154613ec8906155d1565b8110613ed657613ed661561b565b815460011615613ef55790600052602060002090602091828204019190065b9054600160f81b911a0260f81c90506000613f11836007615a6a565b613f1c9060206157c9565b63ffffffff811b878116821c9650909150613f3886848b61399a565b6004805484199a909a1683861b179992985090945060f885901b918a90613f5e906155d1565b8110613f6c57613f6c61561b565b815460011615613f8b5790600052602060002090602091828204019190065b601f036101000a81548160ff02191690600160f81b840402179055505050508080613fb590615647565b915050613e81565b508260038281548110613fd257613fd261561b565b60009182526020909120015580613fe881615647565b915050613e54565b5050505050565b600554600160c01b90046001600160401b031660648110156140165750565b805b4381101561283b57600c600061402f606484615a6a565b815260200190815260200160002060006140499190614d76565b600d6000614058606484615a6a565b815260200190815260200160002060009055808061407590615647565b915050614018565b6000600080516020615f5283398151915261409d836000015160036148c5565b6140a89060036157b6565b6140b291906158ca565b6140c1836020015160026148c5565b1492915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001855160208088015185518683015160408051948501959095529383019190915260608201889052608082015260a081019190915260c0016040516020818303038152906040528051906020012060001c61414591906158ca565b9050600061417e614178604080518082018252600080825260209182015281518083019092526001825260029082015290565b8561491d565b9050600061418c878461491d565b9050600061419a8383614964565b805186519192501480156141b5575080602001518560200151145b61204c5760405162461bcd60e51b815260206004820152601d60248201527f7075626c6963206b657920766572696669636174696f6e206572726f7200000060448201526064016109a0565b6000808260405160200161421591906154c3565b6040516020818303038152906040528051906020012090506000805b865181101561428d5786818151811061424c5761424c61561b565b6020026020010151830361427b5785818151811061426c5761426c61561b565b6020026020010151915061428d565b8061428581615647565b915050614231565b506001600160a01b0381166142d35760405162461bcd60e51b815260206004820152600c60248201526b61646472657373207a65726f60a01b60448201526064016109a0565b95945050505050565b614312828260405180604001604052806013815260200172233630b932a9bcb9ba32b6b9a6b0b730b3b2b960691b815250614201565b600660006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061437882826040518060400160405280601a81526020017f46617374557064617465496e63656e746976654d616e61676572000000000000815250614201565b600760006101000a8154816001600160a01b0302191690836001600160a01b031602179055506143ce82826040518060400160405280600d81526020016c566f746572526567697374727960981b815250614201565b600860006101000a8154816001600160a01b0302191690836001600160a01b03160217905550614428828260405180604001604052806011815260200170233a39b7a332b2b2283ab13634b9b432b960791b815250614201565b600960006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061448e82826040518060400160405280601881526020017f4661737455706461746573436f6e66696775726174696f6e0000000000000000815250614201565b600a60006101000a8154816001600160a01b0302191690836001600160a01b031602179055506144e482826040518060400160405280600d81526020016c2332b2a1b0b631bab630ba37b960991b815250614201565b600b80546001600160a01b0319166001600160a01b03929092169190911790555050565b614511826149af565b61283b8282614a3a565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561455657506000915060039050826145e0565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa1580156145aa573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166145d6575060009250600191508290506145e0565b9250600091508190505b9450945094915050565b60008260038111156145fe576145fe615eba565b03614607575050565b600182600381111561461b5761461b615eba565b036146395760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561464d5761464d615eba565b0361466e5760405163fce698f760e01b8152600481018290526024016109a0565b600382600381111561468257614682615eba565b0361283b576040516335e2f38360e21b8152600481018290526024016109a0565b6000806146b1858585614a7b565b9050600083806146c3576146c36158b4565b858709905080156146d757816001016146d9565b815b9695505050505050565b60006146f2836080015161407d565b6146fb57600080fd5b614708826020015161407d565b61471157600080fd5b60006147666147288560800151856040015161491d565b614761614757604080518082018252600080825260209182015281518083019092526001825260029082015290565b866060015161491d565b614964565b845160208087015186516040519495506000946147959493019283526020830191909152604082015260600190565b604051602081830303815290604052905060006147b182614ba1565b905060006147d86147ca8760200151886040015161491d565b61476184896060015161491d565b90506000600261480a604080518082018252600080825260209182015281518083019092526001825260029082015290565b848a608001518a60200151898760405160200161482c96959493929190615ed0565b60408051601f198184030181529082905261484691615898565b602060405180830381855afa158015614863573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190614886919061550f565b90506148b27f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001826158ca565b6040880151149550505050505092915050565b6000604051602081016020815260208082015260206040820152846060820152836080820152600080516020615f5283398151915260a082015260208260c0836005600019fa61491457600080fd5b50519392505050565b604080518082019091526000808252602082015260405183518152602084015160208201528260408201526040826060836007600019fa61495d57600080fd5b5092915050565b6040805180820190915260008082526020820152604051835181526020840151602082015282516040820152602083015160608201526040826080836006600019fa61495d57600080fd5b8054156108c757805460018083019160009184916149cd9190615a6a565b815481106149dd576149dd61561b565b60009182526020808320909101546001600160a01b031683528201929092526040018120558054819080614a1357614a13615f3b565b600082815260209020810160001990810180546001600160a01b03191690550190556149af565b60005b815181101561213257614a6983838381518110614a5c57614a5c61561b565b6020026020010151614c64565b80614a7381615647565b915050614a3d565b6000808211614abf5760405162461bcd60e51b815260206004820152601060248201526f4469766973696f6e206279207a65726f60801b60448201526064016109a0565b83600003614acf5750600061263d565b83830283858281614ae257614ae26158b4565b0403614b0057828181614af757614af76158b4565b0491505061263d565b506000614b0d8386615989565b90506000614b1b84876158ca565b90506000614b298587615989565b90506000614b3786886158ca565b905085614b4482856157c9565b614b4e9190615989565b614b5883856157c9565b614b6283876157c9565b88614b6d86896157c9565b614b7791906157c9565b614b8191906157b6565b614b8b91906157b6565b614b9591906157b6565b98975050505050505050565b60408051808201909152600080825260208201526000600283604051614bc79190615898565b602060405180830381855afa158015614be4573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190614c07919061550f565b90506000614c23600080516020615f52833981519152836158ca565b905060005b614c3182614ccc565b90508015614c52576040805180820190915291825260208201529392505050565b614c5d6001836157b6565b9150614c28565b6001600160a01b038116600090815260018301602052604090205415614c88575050565b8154600181810184556000848152602080822090930180546001600160a01b039095166001600160a01b031990951685179055845493815293019052604090912055565b600080600080516020615f52833981519152614ce98460036148c5565b614cf49060036157b6565b614cfe91906158ca565b90506000614d30826002614d216001600080516020615f52833981519152615a6a565b614d2b9190615989565b6148c5565b9050806001141580614d40575081155b15614d4f575060009392505050565b614d6e826004614d21600080516020615f5283398151915260016157b6565b949350505050565b50805460008255906000526020600020908101906108c79190614e19565b508054614da0906155d1565b6000825580601f10614db0575050565b601f0160209004906000526020600020908101906108c79190614e19565b828054828255906000526020600020908101928215614e09579160200282015b82811115614e09578251825591602001919060010190614dee565b50614e15929150614e19565b5090565b5b80821115614e155760008155600101614e1a565b600060208284031215614e4057600080fd5b813560ff8116811461263d57600080fd5b60008083601f840112614e6357600080fd5b5081356001600160401b03811115614e7a57600080fd5b6020830191508360208260051b850101111561366257600080fd5b60008060208385031215614ea857600080fd5b82356001600160401b03811115614ebe57600080fd5b614eca85828601614e51565b90969095509350505050565b600081518084526020808501945080840160005b83811015614f0657815187529582019590820190600101614eea565b509495945050505050565b60008151808452602080850194508084016000805b84811015614f44578251820b88529683019691830191600101614f26565b50959695505050505050565b606081526000614f636060830186614ed6565b8281036020840152614f758186614f11565b9150506001600160401b0383166040830152949350505050565b6080808252855190820181905260009060209060a0840190828901845b82811015614fd25781516001600160581b03191684529284019290840190600101614fac565b50505083810382850152614fe68188614ed6565b9150508281036040840152614ffb8186614f11565b9150506001600160401b038316606083015295945050505050565b60006020828403121561502857600080fd5b81356001600160401b0381111561503e57600080fd5b8201610140818503121561263d57600080fd5b60006020828403121561506357600080fd5b81356001600160e01b03198116811461263d57600080fd5b6020808252825182820181905260009190848201906040850190845b8181101561347c5783516001600160a01b031683529284019291840191600101615097565b6001600160a01b03811681146108c757600080fd5b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715615109576151096150d1565b60405290565b604051601f8201601f191681016001600160401b0381118282101715615137576151376150d1565b604052919050565b6000806000806080858703121561515557600080fd5b8435615160816150bc565b935060208581013593506040860135925060608601356001600160401b038082111561518b57600080fd5b818801915088601f83011261519f57600080fd5b8135818111156151b1576151b16150d1565b6151c3601f8201601f1916850161510f565b915080825289848285010111156151d957600080fd5b808484018584013760008482840101525080935050505092959194509250565b60005b838110156152145781810151838201526020016151fc565b50506000910152565b600081518084526152358160208601602086016151f9565b601f01601f19169290920160200192915050565b828152604060208201526000614d6e604083018461521d565b60006020828403121561527457600080fd5b813561263d816150bc565b60006001600160401b03821115615298576152986150d1565b5060051b60200190565b600060208083850312156152b557600080fd5b82356001600160401b038111156152cb57600080fd5b8301601f810185136152dc57600080fd5b80356152ef6152ea8261527f565b61510f565b81815260059190911b8201830190838101908783111561530e57600080fd5b928401925b8284101561532c57833582529284019290840190615313565b979650505050505050565b600082601f83011261534857600080fd5b813560206153586152ea8361527f565b82815260059290921b8401810191818101908684111561537757600080fd5b8286015b8481101561539b57803561538e816150bc565b835291830191830161537b565b509695505050505050565b600080604083850312156153b957600080fd5b82356001600160401b03808211156153d057600080fd5b818501915085601f8301126153e457600080fd5b813560206153f46152ea8361527f565b82815260059290921b8401810191818101908984111561541357600080fd5b948201945b8386101561543157853582529482019490820190615418565b9650508601359250508082111561544757600080fd5b5061545485828601615337565b9150509250929050565b60006020828403121561547057600080fd5b5035919050565b60208152600061263d6020830184614ed6565b6000806040838503121561549d57600080fd5b82356154a8816150bc565b915060208301356154b8816150bc565b809150509250929050565b60208152600061263d602083018461521d565b6020808252810182905260006001600160fb1b038311156154f657600080fd5b8260051b80856040850137919091016040019392505050565b60006020828403121561552157600080fd5b5051919050565b80516001600160581b03198116811461554057600080fd5b919050565b6000602080838503121561555857600080fd5b82516001600160401b0381111561556e57600080fd5b8301601f8101851361557f57600080fd5b805161558d6152ea8261527f565b81815260059190911b820183019083810190878311156155ac57600080fd5b928401925b8284101561532c576155c284615528565b825292840192908401906155b1565b600181811c908216806155e557607f821691505b602082108103612c5257634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161565957615659615631565b5060010190565b8051600081900b811461554057600080fd5b600082601f83011261568357600080fd5b815160206156936152ea8361527f565b82815260059290921b840181019181810190868411156156b257600080fd5b8286015b8481101561539b576156c781615660565b83529183019183016156b6565b80516001600160401b038116811461554057600080fd5b60008060006060848603121561570057600080fd5b83516001600160401b038082111561571757600080fd5b818601915086601f83011261572b57600080fd5b8151602061573b6152ea8361527f565b82815260059290921b8401810191818101908a84111561575a57600080fd5b948201945b838610156157785785518252948201949082019061575f565b9189015191975090935050508082111561579157600080fd5b5061579e86828701615672565b9250506157ad604085016156d4565b90509250925092565b80820180821115612ae757612ae7615631565b8082028115828204841417612ae757612ae7615631565b6000808335601e198436030181126157f757600080fd5b8301803591506001600160401b0382111561581157600080fd5b60200191503681900382131561366257600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b84815283356020820152602084013560408201526040840135606082015260608401356080820152608084013560a082015260e060c082015260006146d960e083018486615826565b600082516158aa8184602087016151f9565b9190910192915050565b634e487b7160e01b600052601260045260246000fd5b6000826158d9576158d96158b4565b500690565b600081830360a08112156158f157600080fd5b604051608081018181106001600160401b0382111715615913576159136150d1565b604090815284358252601f198301121561592c57600080fd5b6159346150e7565b915060208401358252604084013560208301528160208201526060840135604082015260808401356060820152809250505092915050565b60006020828403121561597e57600080fd5b815161263d816150bc565b600082615998576159986158b4565b500490565b6000602082840312156159af57600080fd5b61263d82615528565b805161ffff8116811461554057600080fd5b600060a082840312156159dc57600080fd5b60405160a081018181106001600160401b03821117156159fe576159fe6150d1565b604052825163ffffffff81168114615a1557600080fd5b8152615a2360208401615528565b602082015260408301518060030b8114615a3c57600080fd5b6040820152615a4d606084016159b8565b6060820152615a5e60808401615660565b60808201529392505050565b81810381811115612ae757612ae7615631565b63ffffffff82811682821603908082111561495d5761495d615631565b604081526000615aad6040830185614ed6565b82810360208401526142d38185614f11565b600060208284031215615ad157600080fd5b815162ffffff8116811461263d57600080fd5b60ff8181168382160190811115612ae757612ae7615631565b600080600060608486031215615b1257600080fd5b8351925060208401519150604084015190509250925092565b600060208284031215615b3d57600080fd5b8151801515811461263d57600080fd5b600181815b80851115615b88578160001904821115615b6e57615b6e615631565b80851615615b7b57918102915b93841c9390800290615b52565b509250929050565b600082615b9f57506001612ae7565b81615bac57506000612ae7565b8160018114615bc25760028114615bcc57615be8565b6001915050612ae7565b60ff841115615bdd57615bdd615631565b50506001821b612ae7565b5060208310610133831016604e8410600b8410161715615c0b575081810a612ae7565b615c158383615b4d565b8060001904821115615c2957615c29615631565b029392505050565b600061263d8383615b90565b601f82111561213257600081815260208120601f850160051c81016020861015615c645750805b601f850160051c820191505b81811015615c8357828155600101615c70565b505050505050565b81516001600160401b03811115615ca457615ca46150d1565b615cb881615cb284546155d1565b84615c3d565b602080601f831160018114615ced5760008415615cd55750858301515b600019600386901b1c1916600185901b178555615c83565b600085815260208120601f198616915b82811015615d1c57888601518255948401946001909101908401615cfd565b5085821015615d3a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b63ffffffff60e01b851681528360208201526060604082015260006146d9606083018486615826565b60008060008060808587031215615d8957600080fd5b8451935060208501519250615da0604086016159b8565b9150615dae606086016159b8565b905092959194509250565b6001600160401b03831115615dd057615dd06150d1565b615de483615dde83546155d1565b83615c3d565b6000601f841160018114615e185760008515615e005750838201355b600019600387901b1c1916600186901b178355613ff0565b600083815260209020601f19861690835b82811015615e495786850135825560209485019460019092019101615e29565b5086821015615e665760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b600082810b9082900b03607f198112607f82131715612ae757612ae7615631565b600081810b9083900b01607f8113607f1982121715612ae757612ae7615631565b634e487b7160e01b600052602160045260246000fd5b865181526020808801518183015286516040830152868101516060830152855160808301528581015160a0830152845160c08301528481015160e08301528351610100830152838101516101208301528251610140830152820151610160820152610180810161532c565b634e487b7160e01b600052603160045260246000fdfe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a2646970667358221220ea1c4904a233ac390ee9011175da7d0d4e8e10ec50c69ce386fab2cd57494f4064736f6c63430008140033",
}

// FastUpdaterABI is the input ABI used to generate the binding from.
// Deprecated: Use FastUpdaterMetaData.ABI instead.
var FastUpdaterABI = FastUpdaterMetaData.ABI

// FastUpdaterBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FastUpdaterMetaData.Bin instead.
var FastUpdaterBin = FastUpdaterMetaData.Bin

// DeployFastUpdater deploys a new Ethereum contract, binding an instance of FastUpdater to it.
func DeployFastUpdater(auth *bind.TransactOpts, backend bind.ContractBackend, _governanceSettings common.Address, _initialGovernance common.Address, _addressUpdater common.Address, _flareDaemon common.Address, _firstVotingRoundStartTs uint32, _votingEpochDurationSeconds uint8, _submissionWindow uint8) (common.Address, *types.Transaction, *FastUpdater, error) {
	parsed, err := FastUpdaterMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FastUpdaterBin), backend, _governanceSettings, _initialGovernance, _addressUpdater, _flareDaemon, _firstVotingRoundStartTs, _votingEpochDurationSeconds, _submissionWindow)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FastUpdater{FastUpdaterCaller: FastUpdaterCaller{contract: contract}, FastUpdaterTransactor: FastUpdaterTransactor{contract: contract}, FastUpdaterFilterer: FastUpdaterFilterer{contract: contract}}, nil
}

// FastUpdater is an auto generated Go binding around an Ethereum contract.
type FastUpdater struct {
	FastUpdaterCaller     // Read-only binding to the contract
	FastUpdaterTransactor // Write-only binding to the contract
	FastUpdaterFilterer   // Log filterer for contract events
}

// FastUpdaterCaller is an auto generated read-only Go binding around an Ethereum contract.
type FastUpdaterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FastUpdaterTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FastUpdaterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FastUpdaterFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FastUpdaterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FastUpdaterSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FastUpdaterSession struct {
	Contract     *FastUpdater      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FastUpdaterCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FastUpdaterCallerSession struct {
	Contract *FastUpdaterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// FastUpdaterTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FastUpdaterTransactorSession struct {
	Contract     *FastUpdaterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// FastUpdaterRaw is an auto generated low-level Go binding around an Ethereum contract.
type FastUpdaterRaw struct {
	Contract *FastUpdater // Generic contract binding to access the raw methods on
}

// FastUpdaterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FastUpdaterCallerRaw struct {
	Contract *FastUpdaterCaller // Generic read-only contract binding to access the raw methods on
}

// FastUpdaterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FastUpdaterTransactorRaw struct {
	Contract *FastUpdaterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFastUpdater creates a new instance of FastUpdater, bound to a specific deployed contract.
func NewFastUpdater(address common.Address, backend bind.ContractBackend) (*FastUpdater, error) {
	contract, err := bindFastUpdater(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FastUpdater{FastUpdaterCaller: FastUpdaterCaller{contract: contract}, FastUpdaterTransactor: FastUpdaterTransactor{contract: contract}, FastUpdaterFilterer: FastUpdaterFilterer{contract: contract}}, nil
}

// NewFastUpdaterCaller creates a new read-only instance of FastUpdater, bound to a specific deployed contract.
func NewFastUpdaterCaller(address common.Address, caller bind.ContractCaller) (*FastUpdaterCaller, error) {
	contract, err := bindFastUpdater(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FastUpdaterCaller{contract: contract}, nil
}

// NewFastUpdaterTransactor creates a new write-only instance of FastUpdater, bound to a specific deployed contract.
func NewFastUpdaterTransactor(address common.Address, transactor bind.ContractTransactor) (*FastUpdaterTransactor, error) {
	contract, err := bindFastUpdater(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FastUpdaterTransactor{contract: contract}, nil
}

// NewFastUpdaterFilterer creates a new log filterer instance of FastUpdater, bound to a specific deployed contract.
func NewFastUpdaterFilterer(address common.Address, filterer bind.ContractFilterer) (*FastUpdaterFilterer, error) {
	contract, err := bindFastUpdater(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FastUpdaterFilterer{contract: contract}, nil
}

// bindFastUpdater binds a generic wrapper to an already deployed contract.
func bindFastUpdater(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := FastUpdaterMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FastUpdater *FastUpdaterRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FastUpdater.Contract.FastUpdaterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FastUpdater *FastUpdaterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FastUpdater.Contract.FastUpdaterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FastUpdater *FastUpdaterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FastUpdater.Contract.FastUpdaterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FastUpdater *FastUpdaterCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FastUpdater.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FastUpdater *FastUpdaterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FastUpdater.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FastUpdater *FastUpdaterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FastUpdater.Contract.contract.Transact(opts, method, params...)
}

// MAXBLOCKSHISTORY is a free data retrieval call binding the contract method 0xc1bff139.
//
// Solidity: function MAX_BLOCKS_HISTORY() view returns(uint256)
func (_FastUpdater *FastUpdaterCaller) MAXBLOCKSHISTORY(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "MAX_BLOCKS_HISTORY")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXBLOCKSHISTORY is a free data retrieval call binding the contract method 0xc1bff139.
//
// Solidity: function MAX_BLOCKS_HISTORY() view returns(uint256)
func (_FastUpdater *FastUpdaterSession) MAXBLOCKSHISTORY() (*big.Int, error) {
	return _FastUpdater.Contract.MAXBLOCKSHISTORY(&_FastUpdater.CallOpts)
}

// MAXBLOCKSHISTORY is a free data retrieval call binding the contract method 0xc1bff139.
//
// Solidity: function MAX_BLOCKS_HISTORY() view returns(uint256)
func (_FastUpdater *FastUpdaterCallerSession) MAXBLOCKSHISTORY() (*big.Int, error) {
	return _FastUpdater.Contract.MAXBLOCKSHISTORY(&_FastUpdater.CallOpts)
}

// MAXFEEDAGEINVOTINGEPOCHS is a free data retrieval call binding the contract method 0x7fe3341a.
//
// Solidity: function MAX_FEED_AGE_IN_VOTING_EPOCHS() view returns(uint256)
func (_FastUpdater *FastUpdaterCaller) MAXFEEDAGEINVOTINGEPOCHS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "MAX_FEED_AGE_IN_VOTING_EPOCHS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXFEEDAGEINVOTINGEPOCHS is a free data retrieval call binding the contract method 0x7fe3341a.
//
// Solidity: function MAX_FEED_AGE_IN_VOTING_EPOCHS() view returns(uint256)
func (_FastUpdater *FastUpdaterSession) MAXFEEDAGEINVOTINGEPOCHS() (*big.Int, error) {
	return _FastUpdater.Contract.MAXFEEDAGEINVOTINGEPOCHS(&_FastUpdater.CallOpts)
}

// MAXFEEDAGEINVOTINGEPOCHS is a free data retrieval call binding the contract method 0x7fe3341a.
//
// Solidity: function MAX_FEED_AGE_IN_VOTING_EPOCHS() view returns(uint256)
func (_FastUpdater *FastUpdaterCallerSession) MAXFEEDAGEINVOTINGEPOCHS() (*big.Int, error) {
	return _FastUpdater.Contract.MAXFEEDAGEINVOTINGEPOCHS(&_FastUpdater.CallOpts)
}

// BlockScoreCutoff is a free data retrieval call binding the contract method 0xdcb1476e.
//
// Solidity: function blockScoreCutoff(uint256 _blockNum) view returns(uint256 _cutoff)
func (_FastUpdater *FastUpdaterCaller) BlockScoreCutoff(opts *bind.CallOpts, _blockNum *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "blockScoreCutoff", _blockNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BlockScoreCutoff is a free data retrieval call binding the contract method 0xdcb1476e.
//
// Solidity: function blockScoreCutoff(uint256 _blockNum) view returns(uint256 _cutoff)
func (_FastUpdater *FastUpdaterSession) BlockScoreCutoff(_blockNum *big.Int) (*big.Int, error) {
	return _FastUpdater.Contract.BlockScoreCutoff(&_FastUpdater.CallOpts, _blockNum)
}

// BlockScoreCutoff is a free data retrieval call binding the contract method 0xdcb1476e.
//
// Solidity: function blockScoreCutoff(uint256 _blockNum) view returns(uint256 _cutoff)
func (_FastUpdater *FastUpdaterCallerSession) BlockScoreCutoff(_blockNum *big.Int) (*big.Int, error) {
	return _FastUpdater.Contract.BlockScoreCutoff(&_FastUpdater.CallOpts, _blockNum)
}

// CurrentRewardEpochId is a free data retrieval call binding the contract method 0x8e0e9f7c.
//
// Solidity: function currentRewardEpochId() view returns(uint24)
func (_FastUpdater *FastUpdaterCaller) CurrentRewardEpochId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "currentRewardEpochId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentRewardEpochId is a free data retrieval call binding the contract method 0x8e0e9f7c.
//
// Solidity: function currentRewardEpochId() view returns(uint24)
func (_FastUpdater *FastUpdaterSession) CurrentRewardEpochId() (*big.Int, error) {
	return _FastUpdater.Contract.CurrentRewardEpochId(&_FastUpdater.CallOpts)
}

// CurrentRewardEpochId is a free data retrieval call binding the contract method 0x8e0e9f7c.
//
// Solidity: function currentRewardEpochId() view returns(uint24)
func (_FastUpdater *FastUpdaterCallerSession) CurrentRewardEpochId() (*big.Int, error) {
	return _FastUpdater.Contract.CurrentRewardEpochId(&_FastUpdater.CallOpts)
}

// CurrentScoreCutoff is a free data retrieval call binding the contract method 0x0799fe75.
//
// Solidity: function currentScoreCutoff() view returns(uint256 _cutoff)
func (_FastUpdater *FastUpdaterCaller) CurrentScoreCutoff(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "currentScoreCutoff")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentScoreCutoff is a free data retrieval call binding the contract method 0x0799fe75.
//
// Solidity: function currentScoreCutoff() view returns(uint256 _cutoff)
func (_FastUpdater *FastUpdaterSession) CurrentScoreCutoff() (*big.Int, error) {
	return _FastUpdater.Contract.CurrentScoreCutoff(&_FastUpdater.CallOpts)
}

// CurrentScoreCutoff is a free data retrieval call binding the contract method 0x0799fe75.
//
// Solidity: function currentScoreCutoff() view returns(uint256 _cutoff)
func (_FastUpdater *FastUpdaterCallerSession) CurrentScoreCutoff() (*big.Int, error) {
	return _FastUpdater.Contract.CurrentScoreCutoff(&_FastUpdater.CallOpts)
}

// CurrentSortitionWeight is a free data retrieval call binding the contract method 0xa14634a7.
//
// Solidity: function currentSortitionWeight(address _signingPolicyAddress) view returns(uint256 _weight)
func (_FastUpdater *FastUpdaterCaller) CurrentSortitionWeight(opts *bind.CallOpts, _signingPolicyAddress common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "currentSortitionWeight", _signingPolicyAddress)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentSortitionWeight is a free data retrieval call binding the contract method 0xa14634a7.
//
// Solidity: function currentSortitionWeight(address _signingPolicyAddress) view returns(uint256 _weight)
func (_FastUpdater *FastUpdaterSession) CurrentSortitionWeight(_signingPolicyAddress common.Address) (*big.Int, error) {
	return _FastUpdater.Contract.CurrentSortitionWeight(&_FastUpdater.CallOpts, _signingPolicyAddress)
}

// CurrentSortitionWeight is a free data retrieval call binding the contract method 0xa14634a7.
//
// Solidity: function currentSortitionWeight(address _signingPolicyAddress) view returns(uint256 _weight)
func (_FastUpdater *FastUpdaterCallerSession) CurrentSortitionWeight(_signingPolicyAddress common.Address) (*big.Int, error) {
	return _FastUpdater.Contract.CurrentSortitionWeight(&_FastUpdater.CallOpts, _signingPolicyAddress)
}

// FastUpdateIncentiveManager is a free data retrieval call binding the contract method 0x7925eaca.
//
// Solidity: function fastUpdateIncentiveManager() view returns(address)
func (_FastUpdater *FastUpdaterCaller) FastUpdateIncentiveManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "fastUpdateIncentiveManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FastUpdateIncentiveManager is a free data retrieval call binding the contract method 0x7925eaca.
//
// Solidity: function fastUpdateIncentiveManager() view returns(address)
func (_FastUpdater *FastUpdaterSession) FastUpdateIncentiveManager() (common.Address, error) {
	return _FastUpdater.Contract.FastUpdateIncentiveManager(&_FastUpdater.CallOpts)
}

// FastUpdateIncentiveManager is a free data retrieval call binding the contract method 0x7925eaca.
//
// Solidity: function fastUpdateIncentiveManager() view returns(address)
func (_FastUpdater *FastUpdaterCallerSession) FastUpdateIncentiveManager() (common.Address, error) {
	return _FastUpdater.Contract.FastUpdateIncentiveManager(&_FastUpdater.CallOpts)
}

// FastUpdatesConfiguration is a free data retrieval call binding the contract method 0xc10f489a.
//
// Solidity: function fastUpdatesConfiguration() view returns(address)
func (_FastUpdater *FastUpdaterCaller) FastUpdatesConfiguration(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "fastUpdatesConfiguration")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FastUpdatesConfiguration is a free data retrieval call binding the contract method 0xc10f489a.
//
// Solidity: function fastUpdatesConfiguration() view returns(address)
func (_FastUpdater *FastUpdaterSession) FastUpdatesConfiguration() (common.Address, error) {
	return _FastUpdater.Contract.FastUpdatesConfiguration(&_FastUpdater.CallOpts)
}

// FastUpdatesConfiguration is a free data retrieval call binding the contract method 0xc10f489a.
//
// Solidity: function fastUpdatesConfiguration() view returns(address)
func (_FastUpdater *FastUpdaterCallerSession) FastUpdatesConfiguration() (common.Address, error) {
	return _FastUpdater.Contract.FastUpdatesConfiguration(&_FastUpdater.CallOpts)
}

// FeeCalculator is a free data retrieval call binding the contract method 0xb00eb9fe.
//
// Solidity: function feeCalculator() view returns(address)
func (_FastUpdater *FastUpdaterCaller) FeeCalculator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "feeCalculator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FeeCalculator is a free data retrieval call binding the contract method 0xb00eb9fe.
//
// Solidity: function feeCalculator() view returns(address)
func (_FastUpdater *FastUpdaterSession) FeeCalculator() (common.Address, error) {
	return _FastUpdater.Contract.FeeCalculator(&_FastUpdater.CallOpts)
}

// FeeCalculator is a free data retrieval call binding the contract method 0xb00eb9fe.
//
// Solidity: function feeCalculator() view returns(address)
func (_FastUpdater *FastUpdaterCallerSession) FeeCalculator() (common.Address, error) {
	return _FastUpdater.Contract.FeeCalculator(&_FastUpdater.CallOpts)
}

// FeeDestination is a free data retrieval call binding the contract method 0xde53fcd5.
//
// Solidity: function feeDestination() view returns(address)
func (_FastUpdater *FastUpdaterCaller) FeeDestination(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "feeDestination")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FeeDestination is a free data retrieval call binding the contract method 0xde53fcd5.
//
// Solidity: function feeDestination() view returns(address)
func (_FastUpdater *FastUpdaterSession) FeeDestination() (common.Address, error) {
	return _FastUpdater.Contract.FeeDestination(&_FastUpdater.CallOpts)
}

// FeeDestination is a free data retrieval call binding the contract method 0xde53fcd5.
//
// Solidity: function feeDestination() view returns(address)
func (_FastUpdater *FastUpdaterCallerSession) FeeDestination() (common.Address, error) {
	return _FastUpdater.Contract.FeeDestination(&_FastUpdater.CallOpts)
}

// FirstVotingRoundStartTs is a free data retrieval call binding the contract method 0xe8d0e70a.
//
// Solidity: function firstVotingRoundStartTs() view returns(uint64)
func (_FastUpdater *FastUpdaterCaller) FirstVotingRoundStartTs(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "firstVotingRoundStartTs")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstVotingRoundStartTs is a free data retrieval call binding the contract method 0xe8d0e70a.
//
// Solidity: function firstVotingRoundStartTs() view returns(uint64)
func (_FastUpdater *FastUpdaterSession) FirstVotingRoundStartTs() (uint64, error) {
	return _FastUpdater.Contract.FirstVotingRoundStartTs(&_FastUpdater.CallOpts)
}

// FirstVotingRoundStartTs is a free data retrieval call binding the contract method 0xe8d0e70a.
//
// Solidity: function firstVotingRoundStartTs() view returns(uint64)
func (_FastUpdater *FastUpdaterCallerSession) FirstVotingRoundStartTs() (uint64, error) {
	return _FastUpdater.Contract.FirstVotingRoundStartTs(&_FastUpdater.CallOpts)
}

// FlareDaemon is a free data retrieval call binding the contract method 0xa1077532.
//
// Solidity: function flareDaemon() view returns(address)
func (_FastUpdater *FastUpdaterCaller) FlareDaemon(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "flareDaemon")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FlareDaemon is a free data retrieval call binding the contract method 0xa1077532.
//
// Solidity: function flareDaemon() view returns(address)
func (_FastUpdater *FastUpdaterSession) FlareDaemon() (common.Address, error) {
	return _FastUpdater.Contract.FlareDaemon(&_FastUpdater.CallOpts)
}

// FlareDaemon is a free data retrieval call binding the contract method 0xa1077532.
//
// Solidity: function flareDaemon() view returns(address)
func (_FastUpdater *FastUpdaterCallerSession) FlareDaemon() (common.Address, error) {
	return _FastUpdater.Contract.FlareDaemon(&_FastUpdater.CallOpts)
}

// FlareSystemsManager is a free data retrieval call binding the contract method 0xfaae7fc9.
//
// Solidity: function flareSystemsManager() view returns(address)
func (_FastUpdater *FastUpdaterCaller) FlareSystemsManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "flareSystemsManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FlareSystemsManager is a free data retrieval call binding the contract method 0xfaae7fc9.
//
// Solidity: function flareSystemsManager() view returns(address)
func (_FastUpdater *FastUpdaterSession) FlareSystemsManager() (common.Address, error) {
	return _FastUpdater.Contract.FlareSystemsManager(&_FastUpdater.CallOpts)
}

// FlareSystemsManager is a free data retrieval call binding the contract method 0xfaae7fc9.
//
// Solidity: function flareSystemsManager() view returns(address)
func (_FastUpdater *FastUpdaterCallerSession) FlareSystemsManager() (common.Address, error) {
	return _FastUpdater.Contract.FlareSystemsManager(&_FastUpdater.CallOpts)
}

// FtsoFeedPublisher is a free data retrieval call binding the contract method 0x29bfe39d.
//
// Solidity: function ftsoFeedPublisher() view returns(address)
func (_FastUpdater *FastUpdaterCaller) FtsoFeedPublisher(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "ftsoFeedPublisher")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FtsoFeedPublisher is a free data retrieval call binding the contract method 0x29bfe39d.
//
// Solidity: function ftsoFeedPublisher() view returns(address)
func (_FastUpdater *FastUpdaterSession) FtsoFeedPublisher() (common.Address, error) {
	return _FastUpdater.Contract.FtsoFeedPublisher(&_FastUpdater.CallOpts)
}

// FtsoFeedPublisher is a free data retrieval call binding the contract method 0x29bfe39d.
//
// Solidity: function ftsoFeedPublisher() view returns(address)
func (_FastUpdater *FastUpdaterCallerSession) FtsoFeedPublisher() (common.Address, error) {
	return _FastUpdater.Contract.FtsoFeedPublisher(&_FastUpdater.CallOpts)
}

// GetAddressUpdater is a free data retrieval call binding the contract method 0x5267a15d.
//
// Solidity: function getAddressUpdater() view returns(address _addressUpdater)
func (_FastUpdater *FastUpdaterCaller) GetAddressUpdater(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "getAddressUpdater")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAddressUpdater is a free data retrieval call binding the contract method 0x5267a15d.
//
// Solidity: function getAddressUpdater() view returns(address _addressUpdater)
func (_FastUpdater *FastUpdaterSession) GetAddressUpdater() (common.Address, error) {
	return _FastUpdater.Contract.GetAddressUpdater(&_FastUpdater.CallOpts)
}

// GetAddressUpdater is a free data retrieval call binding the contract method 0x5267a15d.
//
// Solidity: function getAddressUpdater() view returns(address _addressUpdater)
func (_FastUpdater *FastUpdaterCallerSession) GetAddressUpdater() (common.Address, error) {
	return _FastUpdater.Contract.GetAddressUpdater(&_FastUpdater.CallOpts)
}

// GetContractName is a free data retrieval call binding the contract method 0xf5f5ba72.
//
// Solidity: function getContractName() pure returns(string)
func (_FastUpdater *FastUpdaterCaller) GetContractName(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "getContractName")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetContractName is a free data retrieval call binding the contract method 0xf5f5ba72.
//
// Solidity: function getContractName() pure returns(string)
func (_FastUpdater *FastUpdaterSession) GetContractName() (string, error) {
	return _FastUpdater.Contract.GetContractName(&_FastUpdater.CallOpts)
}

// GetContractName is a free data retrieval call binding the contract method 0xf5f5ba72.
//
// Solidity: function getContractName() pure returns(string)
func (_FastUpdater *FastUpdaterCallerSession) GetContractName() (string, error) {
	return _FastUpdater.Contract.GetContractName(&_FastUpdater.CallOpts)
}

// GetFreeFetchAddresses is a free data retrieval call binding the contract method 0x623d1297.
//
// Solidity: function getFreeFetchAddresses() view returns(address[])
func (_FastUpdater *FastUpdaterCaller) GetFreeFetchAddresses(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "getFreeFetchAddresses")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetFreeFetchAddresses is a free data retrieval call binding the contract method 0x623d1297.
//
// Solidity: function getFreeFetchAddresses() view returns(address[])
func (_FastUpdater *FastUpdaterSession) GetFreeFetchAddresses() ([]common.Address, error) {
	return _FastUpdater.Contract.GetFreeFetchAddresses(&_FastUpdater.CallOpts)
}

// GetFreeFetchAddresses is a free data retrieval call binding the contract method 0x623d1297.
//
// Solidity: function getFreeFetchAddresses() view returns(address[])
func (_FastUpdater *FastUpdaterCallerSession) GetFreeFetchAddresses() ([]common.Address, error) {
	return _FastUpdater.Contract.GetFreeFetchAddresses(&_FastUpdater.CallOpts)
}

// Governance is a free data retrieval call binding the contract method 0x5aa6e675.
//
// Solidity: function governance() view returns(address)
func (_FastUpdater *FastUpdaterCaller) Governance(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "governance")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Governance is a free data retrieval call binding the contract method 0x5aa6e675.
//
// Solidity: function governance() view returns(address)
func (_FastUpdater *FastUpdaterSession) Governance() (common.Address, error) {
	return _FastUpdater.Contract.Governance(&_FastUpdater.CallOpts)
}

// Governance is a free data retrieval call binding the contract method 0x5aa6e675.
//
// Solidity: function governance() view returns(address)
func (_FastUpdater *FastUpdaterCallerSession) Governance() (common.Address, error) {
	return _FastUpdater.Contract.Governance(&_FastUpdater.CallOpts)
}

// GovernanceSettings is a free data retrieval call binding the contract method 0x62354e03.
//
// Solidity: function governanceSettings() view returns(address)
func (_FastUpdater *FastUpdaterCaller) GovernanceSettings(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "governanceSettings")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GovernanceSettings is a free data retrieval call binding the contract method 0x62354e03.
//
// Solidity: function governanceSettings() view returns(address)
func (_FastUpdater *FastUpdaterSession) GovernanceSettings() (common.Address, error) {
	return _FastUpdater.Contract.GovernanceSettings(&_FastUpdater.CallOpts)
}

// GovernanceSettings is a free data retrieval call binding the contract method 0x62354e03.
//
// Solidity: function governanceSettings() view returns(address)
func (_FastUpdater *FastUpdaterCallerSession) GovernanceSettings() (common.Address, error) {
	return _FastUpdater.Contract.GovernanceSettings(&_FastUpdater.CallOpts)
}

// IsExecutor is a free data retrieval call binding the contract method 0xdebfda30.
//
// Solidity: function isExecutor(address _address) view returns(bool)
func (_FastUpdater *FastUpdaterCaller) IsExecutor(opts *bind.CallOpts, _address common.Address) (bool, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "isExecutor", _address)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsExecutor is a free data retrieval call binding the contract method 0xdebfda30.
//
// Solidity: function isExecutor(address _address) view returns(bool)
func (_FastUpdater *FastUpdaterSession) IsExecutor(_address common.Address) (bool, error) {
	return _FastUpdater.Contract.IsExecutor(&_FastUpdater.CallOpts, _address)
}

// IsExecutor is a free data retrieval call binding the contract method 0xdebfda30.
//
// Solidity: function isExecutor(address _address) view returns(bool)
func (_FastUpdater *FastUpdaterCallerSession) IsExecutor(_address common.Address) (bool, error) {
	return _FastUpdater.Contract.IsExecutor(&_FastUpdater.CallOpts, _address)
}

// NumberOfUpdates is a free data retrieval call binding the contract method 0xe36da7b7.
//
// Solidity: function numberOfUpdates(uint256 _historySize) view returns(uint256[] _noOfUpdates)
func (_FastUpdater *FastUpdaterCaller) NumberOfUpdates(opts *bind.CallOpts, _historySize *big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "numberOfUpdates", _historySize)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// NumberOfUpdates is a free data retrieval call binding the contract method 0xe36da7b7.
//
// Solidity: function numberOfUpdates(uint256 _historySize) view returns(uint256[] _noOfUpdates)
func (_FastUpdater *FastUpdaterSession) NumberOfUpdates(_historySize *big.Int) ([]*big.Int, error) {
	return _FastUpdater.Contract.NumberOfUpdates(&_FastUpdater.CallOpts, _historySize)
}

// NumberOfUpdates is a free data retrieval call binding the contract method 0xe36da7b7.
//
// Solidity: function numberOfUpdates(uint256 _historySize) view returns(uint256[] _noOfUpdates)
func (_FastUpdater *FastUpdaterCallerSession) NumberOfUpdates(_historySize *big.Int) ([]*big.Int, error) {
	return _FastUpdater.Contract.NumberOfUpdates(&_FastUpdater.CallOpts, _historySize)
}

// NumberOfUpdatesInBlock is a free data retrieval call binding the contract method 0xfc79c300.
//
// Solidity: function numberOfUpdatesInBlock(uint256 _blockNumber) view returns(uint256)
func (_FastUpdater *FastUpdaterCaller) NumberOfUpdatesInBlock(opts *bind.CallOpts, _blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "numberOfUpdatesInBlock", _blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumberOfUpdatesInBlock is a free data retrieval call binding the contract method 0xfc79c300.
//
// Solidity: function numberOfUpdatesInBlock(uint256 _blockNumber) view returns(uint256)
func (_FastUpdater *FastUpdaterSession) NumberOfUpdatesInBlock(_blockNumber *big.Int) (*big.Int, error) {
	return _FastUpdater.Contract.NumberOfUpdatesInBlock(&_FastUpdater.CallOpts, _blockNumber)
}

// NumberOfUpdatesInBlock is a free data retrieval call binding the contract method 0xfc79c300.
//
// Solidity: function numberOfUpdatesInBlock(uint256 _blockNumber) view returns(uint256)
func (_FastUpdater *FastUpdaterCallerSession) NumberOfUpdatesInBlock(_blockNumber *big.Int) (*big.Int, error) {
	return _FastUpdater.Contract.NumberOfUpdatesInBlock(&_FastUpdater.CallOpts, _blockNumber)
}

// ProductionMode is a free data retrieval call binding the contract method 0xe17f212e.
//
// Solidity: function productionMode() view returns(bool)
func (_FastUpdater *FastUpdaterCaller) ProductionMode(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "productionMode")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ProductionMode is a free data retrieval call binding the contract method 0xe17f212e.
//
// Solidity: function productionMode() view returns(bool)
func (_FastUpdater *FastUpdaterSession) ProductionMode() (bool, error) {
	return _FastUpdater.Contract.ProductionMode(&_FastUpdater.CallOpts)
}

// ProductionMode is a free data retrieval call binding the contract method 0xe17f212e.
//
// Solidity: function productionMode() view returns(bool)
func (_FastUpdater *FastUpdaterCallerSession) ProductionMode() (bool, error) {
	return _FastUpdater.Contract.ProductionMode(&_FastUpdater.CallOpts)
}

// SubmissionWindow is a free data retrieval call binding the contract method 0xe621dbc7.
//
// Solidity: function submissionWindow() view returns(uint8)
func (_FastUpdater *FastUpdaterCaller) SubmissionWindow(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "submissionWindow")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// SubmissionWindow is a free data retrieval call binding the contract method 0xe621dbc7.
//
// Solidity: function submissionWindow() view returns(uint8)
func (_FastUpdater *FastUpdaterSession) SubmissionWindow() (uint8, error) {
	return _FastUpdater.Contract.SubmissionWindow(&_FastUpdater.CallOpts)
}

// SubmissionWindow is a free data retrieval call binding the contract method 0xe621dbc7.
//
// Solidity: function submissionWindow() view returns(uint8)
func (_FastUpdater *FastUpdaterCallerSession) SubmissionWindow() (uint8, error) {
	return _FastUpdater.Contract.SubmissionWindow(&_FastUpdater.CallOpts)
}

// SwitchToFallbackMode is a free data retrieval call binding the contract method 0xe22fdece.
//
// Solidity: function switchToFallbackMode() view returns(bool)
func (_FastUpdater *FastUpdaterCaller) SwitchToFallbackMode(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "switchToFallbackMode")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SwitchToFallbackMode is a free data retrieval call binding the contract method 0xe22fdece.
//
// Solidity: function switchToFallbackMode() view returns(bool)
func (_FastUpdater *FastUpdaterSession) SwitchToFallbackMode() (bool, error) {
	return _FastUpdater.Contract.SwitchToFallbackMode(&_FastUpdater.CallOpts)
}

// SwitchToFallbackMode is a free data retrieval call binding the contract method 0xe22fdece.
//
// Solidity: function switchToFallbackMode() view returns(bool)
func (_FastUpdater *FastUpdaterCallerSession) SwitchToFallbackMode() (bool, error) {
	return _FastUpdater.Contract.SwitchToFallbackMode(&_FastUpdater.CallOpts)
}

// TimelockedCalls is a free data retrieval call binding the contract method 0x74e6310e.
//
// Solidity: function timelockedCalls(bytes4 selector) view returns(uint256 allowedAfterTimestamp, bytes encodedCall)
func (_FastUpdater *FastUpdaterCaller) TimelockedCalls(opts *bind.CallOpts, selector [4]byte) (struct {
	AllowedAfterTimestamp *big.Int
	EncodedCall           []byte
}, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "timelockedCalls", selector)

	outstruct := new(struct {
		AllowedAfterTimestamp *big.Int
		EncodedCall           []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AllowedAfterTimestamp = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.EncodedCall = *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return *outstruct, err

}

// TimelockedCalls is a free data retrieval call binding the contract method 0x74e6310e.
//
// Solidity: function timelockedCalls(bytes4 selector) view returns(uint256 allowedAfterTimestamp, bytes encodedCall)
func (_FastUpdater *FastUpdaterSession) TimelockedCalls(selector [4]byte) (struct {
	AllowedAfterTimestamp *big.Int
	EncodedCall           []byte
}, error) {
	return _FastUpdater.Contract.TimelockedCalls(&_FastUpdater.CallOpts, selector)
}

// TimelockedCalls is a free data retrieval call binding the contract method 0x74e6310e.
//
// Solidity: function timelockedCalls(bytes4 selector) view returns(uint256 allowedAfterTimestamp, bytes encodedCall)
func (_FastUpdater *FastUpdaterCallerSession) TimelockedCalls(selector [4]byte) (struct {
	AllowedAfterTimestamp *big.Int
	EncodedCall           []byte
}, error) {
	return _FastUpdater.Contract.TimelockedCalls(&_FastUpdater.CallOpts, selector)
}

// VerifyPublicKey is a free data retrieval call binding the contract method 0x70473f2f.
//
// Solidity: function verifyPublicKey(address _voter, bytes32 _part1, bytes32 _part2, bytes _verificationData) view returns()
func (_FastUpdater *FastUpdaterCaller) VerifyPublicKey(opts *bind.CallOpts, _voter common.Address, _part1 [32]byte, _part2 [32]byte, _verificationData []byte) error {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "verifyPublicKey", _voter, _part1, _part2, _verificationData)

	if err != nil {
		return err
	}

	return err

}

// VerifyPublicKey is a free data retrieval call binding the contract method 0x70473f2f.
//
// Solidity: function verifyPublicKey(address _voter, bytes32 _part1, bytes32 _part2, bytes _verificationData) view returns()
func (_FastUpdater *FastUpdaterSession) VerifyPublicKey(_voter common.Address, _part1 [32]byte, _part2 [32]byte, _verificationData []byte) error {
	return _FastUpdater.Contract.VerifyPublicKey(&_FastUpdater.CallOpts, _voter, _part1, _part2, _verificationData)
}

// VerifyPublicKey is a free data retrieval call binding the contract method 0x70473f2f.
//
// Solidity: function verifyPublicKey(address _voter, bytes32 _part1, bytes32 _part2, bytes _verificationData) view returns()
func (_FastUpdater *FastUpdaterCallerSession) VerifyPublicKey(_voter common.Address, _part1 [32]byte, _part2 [32]byte, _verificationData []byte) error {
	return _FastUpdater.Contract.VerifyPublicKey(&_FastUpdater.CallOpts, _voter, _part1, _part2, _verificationData)
}

// VoterRegistry is a free data retrieval call binding the contract method 0xbe60040e.
//
// Solidity: function voterRegistry() view returns(address)
func (_FastUpdater *FastUpdaterCaller) VoterRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "voterRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VoterRegistry is a free data retrieval call binding the contract method 0xbe60040e.
//
// Solidity: function voterRegistry() view returns(address)
func (_FastUpdater *FastUpdaterSession) VoterRegistry() (common.Address, error) {
	return _FastUpdater.Contract.VoterRegistry(&_FastUpdater.CallOpts)
}

// VoterRegistry is a free data retrieval call binding the contract method 0xbe60040e.
//
// Solidity: function voterRegistry() view returns(address)
func (_FastUpdater *FastUpdaterCallerSession) VoterRegistry() (common.Address, error) {
	return _FastUpdater.Contract.VoterRegistry(&_FastUpdater.CallOpts)
}

// VotingEpochDurationSeconds is a free data retrieval call binding the contract method 0x5a832088.
//
// Solidity: function votingEpochDurationSeconds() view returns(uint64)
func (_FastUpdater *FastUpdaterCaller) VotingEpochDurationSeconds(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _FastUpdater.contract.Call(opts, &out, "votingEpochDurationSeconds")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// VotingEpochDurationSeconds is a free data retrieval call binding the contract method 0x5a832088.
//
// Solidity: function votingEpochDurationSeconds() view returns(uint64)
func (_FastUpdater *FastUpdaterSession) VotingEpochDurationSeconds() (uint64, error) {
	return _FastUpdater.Contract.VotingEpochDurationSeconds(&_FastUpdater.CallOpts)
}

// VotingEpochDurationSeconds is a free data retrieval call binding the contract method 0x5a832088.
//
// Solidity: function votingEpochDurationSeconds() view returns(uint64)
func (_FastUpdater *FastUpdaterCallerSession) VotingEpochDurationSeconds() (uint64, error) {
	return _FastUpdater.Contract.VotingEpochDurationSeconds(&_FastUpdater.CallOpts)
}

// CancelGovernanceCall is a paid mutator transaction binding the contract method 0x67fc4029.
//
// Solidity: function cancelGovernanceCall(bytes4 _selector) returns()
func (_FastUpdater *FastUpdaterTransactor) CancelGovernanceCall(opts *bind.TransactOpts, _selector [4]byte) (*types.Transaction, error) {
	return _FastUpdater.contract.Transact(opts, "cancelGovernanceCall", _selector)
}

// CancelGovernanceCall is a paid mutator transaction binding the contract method 0x67fc4029.
//
// Solidity: function cancelGovernanceCall(bytes4 _selector) returns()
func (_FastUpdater *FastUpdaterSession) CancelGovernanceCall(_selector [4]byte) (*types.Transaction, error) {
	return _FastUpdater.Contract.CancelGovernanceCall(&_FastUpdater.TransactOpts, _selector)
}

// CancelGovernanceCall is a paid mutator transaction binding the contract method 0x67fc4029.
//
// Solidity: function cancelGovernanceCall(bytes4 _selector) returns()
func (_FastUpdater *FastUpdaterTransactorSession) CancelGovernanceCall(_selector [4]byte) (*types.Transaction, error) {
	return _FastUpdater.Contract.CancelGovernanceCall(&_FastUpdater.TransactOpts, _selector)
}

// Daemonize is a paid mutator transaction binding the contract method 0x6d0e8c34.
//
// Solidity: function daemonize() returns(bool)
func (_FastUpdater *FastUpdaterTransactor) Daemonize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FastUpdater.contract.Transact(opts, "daemonize")
}

// Daemonize is a paid mutator transaction binding the contract method 0x6d0e8c34.
//
// Solidity: function daemonize() returns(bool)
func (_FastUpdater *FastUpdaterSession) Daemonize() (*types.Transaction, error) {
	return _FastUpdater.Contract.Daemonize(&_FastUpdater.TransactOpts)
}

// Daemonize is a paid mutator transaction binding the contract method 0x6d0e8c34.
//
// Solidity: function daemonize() returns(bool)
func (_FastUpdater *FastUpdaterTransactorSession) Daemonize() (*types.Transaction, error) {
	return _FastUpdater.Contract.Daemonize(&_FastUpdater.TransactOpts)
}

// ExecuteGovernanceCall is a paid mutator transaction binding the contract method 0x5ff27079.
//
// Solidity: function executeGovernanceCall(bytes4 _selector) returns()
func (_FastUpdater *FastUpdaterTransactor) ExecuteGovernanceCall(opts *bind.TransactOpts, _selector [4]byte) (*types.Transaction, error) {
	return _FastUpdater.contract.Transact(opts, "executeGovernanceCall", _selector)
}

// ExecuteGovernanceCall is a paid mutator transaction binding the contract method 0x5ff27079.
//
// Solidity: function executeGovernanceCall(bytes4 _selector) returns()
func (_FastUpdater *FastUpdaterSession) ExecuteGovernanceCall(_selector [4]byte) (*types.Transaction, error) {
	return _FastUpdater.Contract.ExecuteGovernanceCall(&_FastUpdater.TransactOpts, _selector)
}

// ExecuteGovernanceCall is a paid mutator transaction binding the contract method 0x5ff27079.
//
// Solidity: function executeGovernanceCall(bytes4 _selector) returns()
func (_FastUpdater *FastUpdaterTransactorSession) ExecuteGovernanceCall(_selector [4]byte) (*types.Transaction, error) {
	return _FastUpdater.Contract.ExecuteGovernanceCall(&_FastUpdater.TransactOpts, _selector)
}

// FetchAllCurrentFeeds is a paid mutator transaction binding the contract method 0x4691377f.
//
// Solidity: function fetchAllCurrentFeeds() payable returns(bytes21[] _feedIds, uint256[] _feeds, int8[] _decimals, uint64 _timestamp)
func (_FastUpdater *FastUpdaterTransactor) FetchAllCurrentFeeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FastUpdater.contract.Transact(opts, "fetchAllCurrentFeeds")
}

// FetchAllCurrentFeeds is a paid mutator transaction binding the contract method 0x4691377f.
//
// Solidity: function fetchAllCurrentFeeds() payable returns(bytes21[] _feedIds, uint256[] _feeds, int8[] _decimals, uint64 _timestamp)
func (_FastUpdater *FastUpdaterSession) FetchAllCurrentFeeds() (*types.Transaction, error) {
	return _FastUpdater.Contract.FetchAllCurrentFeeds(&_FastUpdater.TransactOpts)
}

// FetchAllCurrentFeeds is a paid mutator transaction binding the contract method 0x4691377f.
//
// Solidity: function fetchAllCurrentFeeds() payable returns(bytes21[] _feedIds, uint256[] _feeds, int8[] _decimals, uint64 _timestamp)
func (_FastUpdater *FastUpdaterTransactorSession) FetchAllCurrentFeeds() (*types.Transaction, error) {
	return _FastUpdater.Contract.FetchAllCurrentFeeds(&_FastUpdater.TransactOpts)
}

// FetchCurrentFeeds is a paid mutator transaction binding the contract method 0x45a15d3c.
//
// Solidity: function fetchCurrentFeeds(uint256[] _indices) payable returns(uint256[] _feeds, int8[] _decimals, uint64 _timestamp)
func (_FastUpdater *FastUpdaterTransactor) FetchCurrentFeeds(opts *bind.TransactOpts, _indices []*big.Int) (*types.Transaction, error) {
	return _FastUpdater.contract.Transact(opts, "fetchCurrentFeeds", _indices)
}

// FetchCurrentFeeds is a paid mutator transaction binding the contract method 0x45a15d3c.
//
// Solidity: function fetchCurrentFeeds(uint256[] _indices) payable returns(uint256[] _feeds, int8[] _decimals, uint64 _timestamp)
func (_FastUpdater *FastUpdaterSession) FetchCurrentFeeds(_indices []*big.Int) (*types.Transaction, error) {
	return _FastUpdater.Contract.FetchCurrentFeeds(&_FastUpdater.TransactOpts, _indices)
}

// FetchCurrentFeeds is a paid mutator transaction binding the contract method 0x45a15d3c.
//
// Solidity: function fetchCurrentFeeds(uint256[] _indices) payable returns(uint256[] _feeds, int8[] _decimals, uint64 _timestamp)
func (_FastUpdater *FastUpdaterTransactorSession) FetchCurrentFeeds(_indices []*big.Int) (*types.Transaction, error) {
	return _FastUpdater.Contract.FetchCurrentFeeds(&_FastUpdater.TransactOpts, _indices)
}

// Initialise is a paid mutator transaction binding the contract method 0xef88bf13.
//
// Solidity: function initialise(address _governanceSettings, address _initialGovernance) returns()
func (_FastUpdater *FastUpdaterTransactor) Initialise(opts *bind.TransactOpts, _governanceSettings common.Address, _initialGovernance common.Address) (*types.Transaction, error) {
	return _FastUpdater.contract.Transact(opts, "initialise", _governanceSettings, _initialGovernance)
}

// Initialise is a paid mutator transaction binding the contract method 0xef88bf13.
//
// Solidity: function initialise(address _governanceSettings, address _initialGovernance) returns()
func (_FastUpdater *FastUpdaterSession) Initialise(_governanceSettings common.Address, _initialGovernance common.Address) (*types.Transaction, error) {
	return _FastUpdater.Contract.Initialise(&_FastUpdater.TransactOpts, _governanceSettings, _initialGovernance)
}

// Initialise is a paid mutator transaction binding the contract method 0xef88bf13.
//
// Solidity: function initialise(address _governanceSettings, address _initialGovernance) returns()
func (_FastUpdater *FastUpdaterTransactorSession) Initialise(_governanceSettings common.Address, _initialGovernance common.Address) (*types.Transaction, error) {
	return _FastUpdater.Contract.Initialise(&_FastUpdater.TransactOpts, _governanceSettings, _initialGovernance)
}

// RemoveFeeds is a paid mutator transaction binding the contract method 0xabfaf170.
//
// Solidity: function removeFeeds(uint256[] _indices) returns()
func (_FastUpdater *FastUpdaterTransactor) RemoveFeeds(opts *bind.TransactOpts, _indices []*big.Int) (*types.Transaction, error) {
	return _FastUpdater.contract.Transact(opts, "removeFeeds", _indices)
}

// RemoveFeeds is a paid mutator transaction binding the contract method 0xabfaf170.
//
// Solidity: function removeFeeds(uint256[] _indices) returns()
func (_FastUpdater *FastUpdaterSession) RemoveFeeds(_indices []*big.Int) (*types.Transaction, error) {
	return _FastUpdater.Contract.RemoveFeeds(&_FastUpdater.TransactOpts, _indices)
}

// RemoveFeeds is a paid mutator transaction binding the contract method 0xabfaf170.
//
// Solidity: function removeFeeds(uint256[] _indices) returns()
func (_FastUpdater *FastUpdaterTransactorSession) RemoveFeeds(_indices []*big.Int) (*types.Transaction, error) {
	return _FastUpdater.Contract.RemoveFeeds(&_FastUpdater.TransactOpts, _indices)
}

// ResetFeeds is a paid mutator transaction binding the contract method 0x63f921db.
//
// Solidity: function resetFeeds(uint256[] _indices) returns()
func (_FastUpdater *FastUpdaterTransactor) ResetFeeds(opts *bind.TransactOpts, _indices []*big.Int) (*types.Transaction, error) {
	return _FastUpdater.contract.Transact(opts, "resetFeeds", _indices)
}

// ResetFeeds is a paid mutator transaction binding the contract method 0x63f921db.
//
// Solidity: function resetFeeds(uint256[] _indices) returns()
func (_FastUpdater *FastUpdaterSession) ResetFeeds(_indices []*big.Int) (*types.Transaction, error) {
	return _FastUpdater.Contract.ResetFeeds(&_FastUpdater.TransactOpts, _indices)
}

// ResetFeeds is a paid mutator transaction binding the contract method 0x63f921db.
//
// Solidity: function resetFeeds(uint256[] _indices) returns()
func (_FastUpdater *FastUpdaterTransactorSession) ResetFeeds(_indices []*big.Int) (*types.Transaction, error) {
	return _FastUpdater.Contract.ResetFeeds(&_FastUpdater.TransactOpts, _indices)
}

// SetFeeDestination is a paid mutator transaction binding the contract method 0xfbe53234.
//
// Solidity: function setFeeDestination(address _feeDestination) returns()
func (_FastUpdater *FastUpdaterTransactor) SetFeeDestination(opts *bind.TransactOpts, _feeDestination common.Address) (*types.Transaction, error) {
	return _FastUpdater.contract.Transact(opts, "setFeeDestination", _feeDestination)
}

// SetFeeDestination is a paid mutator transaction binding the contract method 0xfbe53234.
//
// Solidity: function setFeeDestination(address _feeDestination) returns()
func (_FastUpdater *FastUpdaterSession) SetFeeDestination(_feeDestination common.Address) (*types.Transaction, error) {
	return _FastUpdater.Contract.SetFeeDestination(&_FastUpdater.TransactOpts, _feeDestination)
}

// SetFeeDestination is a paid mutator transaction binding the contract method 0xfbe53234.
//
// Solidity: function setFeeDestination(address _feeDestination) returns()
func (_FastUpdater *FastUpdaterTransactorSession) SetFeeDestination(_feeDestination common.Address) (*types.Transaction, error) {
	return _FastUpdater.Contract.SetFeeDestination(&_FastUpdater.TransactOpts, _feeDestination)
}

// SetFreeFetchAddresses is a paid mutator transaction binding the contract method 0xb3d2fc94.
//
// Solidity: function setFreeFetchAddresses(address[] _freeFetchAddresses) returns()
func (_FastUpdater *FastUpdaterTransactor) SetFreeFetchAddresses(opts *bind.TransactOpts, _freeFetchAddresses []common.Address) (*types.Transaction, error) {
	return _FastUpdater.contract.Transact(opts, "setFreeFetchAddresses", _freeFetchAddresses)
}

// SetFreeFetchAddresses is a paid mutator transaction binding the contract method 0xb3d2fc94.
//
// Solidity: function setFreeFetchAddresses(address[] _freeFetchAddresses) returns()
func (_FastUpdater *FastUpdaterSession) SetFreeFetchAddresses(_freeFetchAddresses []common.Address) (*types.Transaction, error) {
	return _FastUpdater.Contract.SetFreeFetchAddresses(&_FastUpdater.TransactOpts, _freeFetchAddresses)
}

// SetFreeFetchAddresses is a paid mutator transaction binding the contract method 0xb3d2fc94.
//
// Solidity: function setFreeFetchAddresses(address[] _freeFetchAddresses) returns()
func (_FastUpdater *FastUpdaterTransactorSession) SetFreeFetchAddresses(_freeFetchAddresses []common.Address) (*types.Transaction, error) {
	return _FastUpdater.Contract.SetFreeFetchAddresses(&_FastUpdater.TransactOpts, _freeFetchAddresses)
}

// SetSubmissionWindow is a paid mutator transaction binding the contract method 0x0a166051.
//
// Solidity: function setSubmissionWindow(uint8 _submissionWindow) returns()
func (_FastUpdater *FastUpdaterTransactor) SetSubmissionWindow(opts *bind.TransactOpts, _submissionWindow uint8) (*types.Transaction, error) {
	return _FastUpdater.contract.Transact(opts, "setSubmissionWindow", _submissionWindow)
}

// SetSubmissionWindow is a paid mutator transaction binding the contract method 0x0a166051.
//
// Solidity: function setSubmissionWindow(uint8 _submissionWindow) returns()
func (_FastUpdater *FastUpdaterSession) SetSubmissionWindow(_submissionWindow uint8) (*types.Transaction, error) {
	return _FastUpdater.Contract.SetSubmissionWindow(&_FastUpdater.TransactOpts, _submissionWindow)
}

// SetSubmissionWindow is a paid mutator transaction binding the contract method 0x0a166051.
//
// Solidity: function setSubmissionWindow(uint8 _submissionWindow) returns()
func (_FastUpdater *FastUpdaterTransactorSession) SetSubmissionWindow(_submissionWindow uint8) (*types.Transaction, error) {
	return _FastUpdater.Contract.SetSubmissionWindow(&_FastUpdater.TransactOpts, _submissionWindow)
}

// SubmitUpdates is a paid mutator transaction binding the contract method 0x470e91df.
//
// Solidity: function submitUpdates((uint256,(uint256,(uint256,uint256),uint256,uint256),bytes,(uint8,bytes32,bytes32)) _updates) returns()
func (_FastUpdater *FastUpdaterTransactor) SubmitUpdates(opts *bind.TransactOpts, _updates IFastUpdaterFastUpdates) (*types.Transaction, error) {
	return _FastUpdater.contract.Transact(opts, "submitUpdates", _updates)
}

// SubmitUpdates is a paid mutator transaction binding the contract method 0x470e91df.
//
// Solidity: function submitUpdates((uint256,(uint256,(uint256,uint256),uint256,uint256),bytes,(uint8,bytes32,bytes32)) _updates) returns()
func (_FastUpdater *FastUpdaterSession) SubmitUpdates(_updates IFastUpdaterFastUpdates) (*types.Transaction, error) {
	return _FastUpdater.Contract.SubmitUpdates(&_FastUpdater.TransactOpts, _updates)
}

// SubmitUpdates is a paid mutator transaction binding the contract method 0x470e91df.
//
// Solidity: function submitUpdates((uint256,(uint256,(uint256,uint256),uint256,uint256),bytes,(uint8,bytes32,bytes32)) _updates) returns()
func (_FastUpdater *FastUpdaterTransactorSession) SubmitUpdates(_updates IFastUpdaterFastUpdates) (*types.Transaction, error) {
	return _FastUpdater.Contract.SubmitUpdates(&_FastUpdater.TransactOpts, _updates)
}

// SwitchToProductionMode is a paid mutator transaction binding the contract method 0xf5a98383.
//
// Solidity: function switchToProductionMode() returns()
func (_FastUpdater *FastUpdaterTransactor) SwitchToProductionMode(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FastUpdater.contract.Transact(opts, "switchToProductionMode")
}

// SwitchToProductionMode is a paid mutator transaction binding the contract method 0xf5a98383.
//
// Solidity: function switchToProductionMode() returns()
func (_FastUpdater *FastUpdaterSession) SwitchToProductionMode() (*types.Transaction, error) {
	return _FastUpdater.Contract.SwitchToProductionMode(&_FastUpdater.TransactOpts)
}

// SwitchToProductionMode is a paid mutator transaction binding the contract method 0xf5a98383.
//
// Solidity: function switchToProductionMode() returns()
func (_FastUpdater *FastUpdaterTransactorSession) SwitchToProductionMode() (*types.Transaction, error) {
	return _FastUpdater.Contract.SwitchToProductionMode(&_FastUpdater.TransactOpts)
}

// UpdateContractAddresses is a paid mutator transaction binding the contract method 0xb00c0b76.
//
// Solidity: function updateContractAddresses(bytes32[] _contractNameHashes, address[] _contractAddresses) returns()
func (_FastUpdater *FastUpdaterTransactor) UpdateContractAddresses(opts *bind.TransactOpts, _contractNameHashes [][32]byte, _contractAddresses []common.Address) (*types.Transaction, error) {
	return _FastUpdater.contract.Transact(opts, "updateContractAddresses", _contractNameHashes, _contractAddresses)
}

// UpdateContractAddresses is a paid mutator transaction binding the contract method 0xb00c0b76.
//
// Solidity: function updateContractAddresses(bytes32[] _contractNameHashes, address[] _contractAddresses) returns()
func (_FastUpdater *FastUpdaterSession) UpdateContractAddresses(_contractNameHashes [][32]byte, _contractAddresses []common.Address) (*types.Transaction, error) {
	return _FastUpdater.Contract.UpdateContractAddresses(&_FastUpdater.TransactOpts, _contractNameHashes, _contractAddresses)
}

// UpdateContractAddresses is a paid mutator transaction binding the contract method 0xb00c0b76.
//
// Solidity: function updateContractAddresses(bytes32[] _contractNameHashes, address[] _contractAddresses) returns()
func (_FastUpdater *FastUpdaterTransactorSession) UpdateContractAddresses(_contractNameHashes [][32]byte, _contractAddresses []common.Address) (*types.Transaction, error) {
	return _FastUpdater.Contract.UpdateContractAddresses(&_FastUpdater.TransactOpts, _contractNameHashes, _contractAddresses)
}

// FastUpdaterFastUpdateFeedRemovedIterator is returned from FilterFastUpdateFeedRemoved and is used to iterate over the raw logs and unpacked data for FastUpdateFeedRemoved events raised by the FastUpdater contract.
type FastUpdaterFastUpdateFeedRemovedIterator struct {
	Event *FastUpdaterFastUpdateFeedRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FastUpdaterFastUpdateFeedRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FastUpdaterFastUpdateFeedRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FastUpdaterFastUpdateFeedRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FastUpdaterFastUpdateFeedRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FastUpdaterFastUpdateFeedRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FastUpdaterFastUpdateFeedRemoved represents a FastUpdateFeedRemoved event raised by the FastUpdater contract.
type FastUpdaterFastUpdateFeedRemoved struct {
	Index *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterFastUpdateFeedRemoved is a free log retrieval operation binding the contract event 0x5a17f564b9fd53c971695a2e033e0cd39ee8ad08d8117242cdecad8b017335c8.
//
// Solidity: event FastUpdateFeedRemoved(uint256 indexed index)
func (_FastUpdater *FastUpdaterFilterer) FilterFastUpdateFeedRemoved(opts *bind.FilterOpts, index []*big.Int) (*FastUpdaterFastUpdateFeedRemovedIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}

	logs, sub, err := _FastUpdater.contract.FilterLogs(opts, "FastUpdateFeedRemoved", indexRule)
	if err != nil {
		return nil, err
	}
	return &FastUpdaterFastUpdateFeedRemovedIterator{contract: _FastUpdater.contract, event: "FastUpdateFeedRemoved", logs: logs, sub: sub}, nil
}

// WatchFastUpdateFeedRemoved is a free log subscription operation binding the contract event 0x5a17f564b9fd53c971695a2e033e0cd39ee8ad08d8117242cdecad8b017335c8.
//
// Solidity: event FastUpdateFeedRemoved(uint256 indexed index)
func (_FastUpdater *FastUpdaterFilterer) WatchFastUpdateFeedRemoved(opts *bind.WatchOpts, sink chan<- *FastUpdaterFastUpdateFeedRemoved, index []*big.Int) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}

	logs, sub, err := _FastUpdater.contract.WatchLogs(opts, "FastUpdateFeedRemoved", indexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FastUpdaterFastUpdateFeedRemoved)
				if err := _FastUpdater.contract.UnpackLog(event, "FastUpdateFeedRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFastUpdateFeedRemoved is a log parse operation binding the contract event 0x5a17f564b9fd53c971695a2e033e0cd39ee8ad08d8117242cdecad8b017335c8.
//
// Solidity: event FastUpdateFeedRemoved(uint256 indexed index)
func (_FastUpdater *FastUpdaterFilterer) ParseFastUpdateFeedRemoved(log types.Log) (*FastUpdaterFastUpdateFeedRemoved, error) {
	event := new(FastUpdaterFastUpdateFeedRemoved)
	if err := _FastUpdater.contract.UnpackLog(event, "FastUpdateFeedRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FastUpdaterFastUpdateFeedResetIterator is returned from FilterFastUpdateFeedReset and is used to iterate over the raw logs and unpacked data for FastUpdateFeedReset events raised by the FastUpdater contract.
type FastUpdaterFastUpdateFeedResetIterator struct {
	Event *FastUpdaterFastUpdateFeedReset // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FastUpdaterFastUpdateFeedResetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FastUpdaterFastUpdateFeedReset)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FastUpdaterFastUpdateFeedReset)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FastUpdaterFastUpdateFeedResetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FastUpdaterFastUpdateFeedResetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FastUpdaterFastUpdateFeedReset represents a FastUpdateFeedReset event raised by the FastUpdater contract.
type FastUpdaterFastUpdateFeedReset struct {
	VotingRoundId *big.Int
	Index         *big.Int
	Id            [21]byte
	Value         *big.Int
	Decimals      int8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterFastUpdateFeedReset is a free log retrieval operation binding the contract event 0xfa800fadb5e7b72652da40bcd7ca9a96cd4e53c9ea4c68b8afbba027e77a7cf5.
//
// Solidity: event FastUpdateFeedReset(uint256 indexed votingRoundId, uint256 indexed index, bytes21 indexed id, uint256 value, int8 decimals)
func (_FastUpdater *FastUpdaterFilterer) FilterFastUpdateFeedReset(opts *bind.FilterOpts, votingRoundId []*big.Int, index []*big.Int, id [][21]byte) (*FastUpdaterFastUpdateFeedResetIterator, error) {

	var votingRoundIdRule []interface{}
	for _, votingRoundIdItem := range votingRoundId {
		votingRoundIdRule = append(votingRoundIdRule, votingRoundIdItem)
	}
	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _FastUpdater.contract.FilterLogs(opts, "FastUpdateFeedReset", votingRoundIdRule, indexRule, idRule)
	if err != nil {
		return nil, err
	}
	return &FastUpdaterFastUpdateFeedResetIterator{contract: _FastUpdater.contract, event: "FastUpdateFeedReset", logs: logs, sub: sub}, nil
}

// WatchFastUpdateFeedReset is a free log subscription operation binding the contract event 0xfa800fadb5e7b72652da40bcd7ca9a96cd4e53c9ea4c68b8afbba027e77a7cf5.
//
// Solidity: event FastUpdateFeedReset(uint256 indexed votingRoundId, uint256 indexed index, bytes21 indexed id, uint256 value, int8 decimals)
func (_FastUpdater *FastUpdaterFilterer) WatchFastUpdateFeedReset(opts *bind.WatchOpts, sink chan<- *FastUpdaterFastUpdateFeedReset, votingRoundId []*big.Int, index []*big.Int, id [][21]byte) (event.Subscription, error) {

	var votingRoundIdRule []interface{}
	for _, votingRoundIdItem := range votingRoundId {
		votingRoundIdRule = append(votingRoundIdRule, votingRoundIdItem)
	}
	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _FastUpdater.contract.WatchLogs(opts, "FastUpdateFeedReset", votingRoundIdRule, indexRule, idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FastUpdaterFastUpdateFeedReset)
				if err := _FastUpdater.contract.UnpackLog(event, "FastUpdateFeedReset", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFastUpdateFeedReset is a log parse operation binding the contract event 0xfa800fadb5e7b72652da40bcd7ca9a96cd4e53c9ea4c68b8afbba027e77a7cf5.
//
// Solidity: event FastUpdateFeedReset(uint256 indexed votingRoundId, uint256 indexed index, bytes21 indexed id, uint256 value, int8 decimals)
func (_FastUpdater *FastUpdaterFilterer) ParseFastUpdateFeedReset(log types.Log) (*FastUpdaterFastUpdateFeedReset, error) {
	event := new(FastUpdaterFastUpdateFeedReset)
	if err := _FastUpdater.contract.UnpackLog(event, "FastUpdateFeedReset", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FastUpdaterFastUpdateFeedsIterator is returned from FilterFastUpdateFeeds and is used to iterate over the raw logs and unpacked data for FastUpdateFeeds events raised by the FastUpdater contract.
type FastUpdaterFastUpdateFeedsIterator struct {
	Event *FastUpdaterFastUpdateFeeds // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FastUpdaterFastUpdateFeedsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FastUpdaterFastUpdateFeeds)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FastUpdaterFastUpdateFeeds)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FastUpdaterFastUpdateFeedsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FastUpdaterFastUpdateFeedsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FastUpdaterFastUpdateFeeds represents a FastUpdateFeeds event raised by the FastUpdater contract.
type FastUpdaterFastUpdateFeeds struct {
	VotingEpochId *big.Int
	Feeds         []*big.Int
	Decimals      []int8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterFastUpdateFeeds is a free log retrieval operation binding the contract event 0x7195d3bbca575b55b0f4b62da395f7224b75225d9c08741d216e6cf10a83eabe.
//
// Solidity: event FastUpdateFeeds(uint256 indexed votingEpochId, uint256[] feeds, int8[] decimals)
func (_FastUpdater *FastUpdaterFilterer) FilterFastUpdateFeeds(opts *bind.FilterOpts, votingEpochId []*big.Int) (*FastUpdaterFastUpdateFeedsIterator, error) {

	var votingEpochIdRule []interface{}
	for _, votingEpochIdItem := range votingEpochId {
		votingEpochIdRule = append(votingEpochIdRule, votingEpochIdItem)
	}

	logs, sub, err := _FastUpdater.contract.FilterLogs(opts, "FastUpdateFeeds", votingEpochIdRule)
	if err != nil {
		return nil, err
	}
	return &FastUpdaterFastUpdateFeedsIterator{contract: _FastUpdater.contract, event: "FastUpdateFeeds", logs: logs, sub: sub}, nil
}

// WatchFastUpdateFeeds is a free log subscription operation binding the contract event 0x7195d3bbca575b55b0f4b62da395f7224b75225d9c08741d216e6cf10a83eabe.
//
// Solidity: event FastUpdateFeeds(uint256 indexed votingEpochId, uint256[] feeds, int8[] decimals)
func (_FastUpdater *FastUpdaterFilterer) WatchFastUpdateFeeds(opts *bind.WatchOpts, sink chan<- *FastUpdaterFastUpdateFeeds, votingEpochId []*big.Int) (event.Subscription, error) {

	var votingEpochIdRule []interface{}
	for _, votingEpochIdItem := range votingEpochId {
		votingEpochIdRule = append(votingEpochIdRule, votingEpochIdItem)
	}

	logs, sub, err := _FastUpdater.contract.WatchLogs(opts, "FastUpdateFeeds", votingEpochIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FastUpdaterFastUpdateFeeds)
				if err := _FastUpdater.contract.UnpackLog(event, "FastUpdateFeeds", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFastUpdateFeeds is a log parse operation binding the contract event 0x7195d3bbca575b55b0f4b62da395f7224b75225d9c08741d216e6cf10a83eabe.
//
// Solidity: event FastUpdateFeeds(uint256 indexed votingEpochId, uint256[] feeds, int8[] decimals)
func (_FastUpdater *FastUpdaterFilterer) ParseFastUpdateFeeds(log types.Log) (*FastUpdaterFastUpdateFeeds, error) {
	event := new(FastUpdaterFastUpdateFeeds)
	if err := _FastUpdater.contract.UnpackLog(event, "FastUpdateFeeds", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FastUpdaterFastUpdateFeedsSubmittedIterator is returned from FilterFastUpdateFeedsSubmitted and is used to iterate over the raw logs and unpacked data for FastUpdateFeedsSubmitted events raised by the FastUpdater contract.
type FastUpdaterFastUpdateFeedsSubmittedIterator struct {
	Event *FastUpdaterFastUpdateFeedsSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FastUpdaterFastUpdateFeedsSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FastUpdaterFastUpdateFeedsSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FastUpdaterFastUpdateFeedsSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FastUpdaterFastUpdateFeedsSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FastUpdaterFastUpdateFeedsSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FastUpdaterFastUpdateFeedsSubmitted represents a FastUpdateFeedsSubmitted event raised by the FastUpdater contract.
type FastUpdaterFastUpdateFeedsSubmitted struct {
	VotingRoundId        uint32
	SigningPolicyAddress common.Address
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterFastUpdateFeedsSubmitted is a free log retrieval operation binding the contract event 0x63db91b14b3d088c677f046180aefcea7a236649704d90ce810cde455d38d936.
//
// Solidity: event FastUpdateFeedsSubmitted(uint32 indexed votingRoundId, address indexed signingPolicyAddress)
func (_FastUpdater *FastUpdaterFilterer) FilterFastUpdateFeedsSubmitted(opts *bind.FilterOpts, votingRoundId []uint32, signingPolicyAddress []common.Address) (*FastUpdaterFastUpdateFeedsSubmittedIterator, error) {

	var votingRoundIdRule []interface{}
	for _, votingRoundIdItem := range votingRoundId {
		votingRoundIdRule = append(votingRoundIdRule, votingRoundIdItem)
	}
	var signingPolicyAddressRule []interface{}
	for _, signingPolicyAddressItem := range signingPolicyAddress {
		signingPolicyAddressRule = append(signingPolicyAddressRule, signingPolicyAddressItem)
	}

	logs, sub, err := _FastUpdater.contract.FilterLogs(opts, "FastUpdateFeedsSubmitted", votingRoundIdRule, signingPolicyAddressRule)
	if err != nil {
		return nil, err
	}
	return &FastUpdaterFastUpdateFeedsSubmittedIterator{contract: _FastUpdater.contract, event: "FastUpdateFeedsSubmitted", logs: logs, sub: sub}, nil
}

// WatchFastUpdateFeedsSubmitted is a free log subscription operation binding the contract event 0x63db91b14b3d088c677f046180aefcea7a236649704d90ce810cde455d38d936.
//
// Solidity: event FastUpdateFeedsSubmitted(uint32 indexed votingRoundId, address indexed signingPolicyAddress)
func (_FastUpdater *FastUpdaterFilterer) WatchFastUpdateFeedsSubmitted(opts *bind.WatchOpts, sink chan<- *FastUpdaterFastUpdateFeedsSubmitted, votingRoundId []uint32, signingPolicyAddress []common.Address) (event.Subscription, error) {

	var votingRoundIdRule []interface{}
	for _, votingRoundIdItem := range votingRoundId {
		votingRoundIdRule = append(votingRoundIdRule, votingRoundIdItem)
	}
	var signingPolicyAddressRule []interface{}
	for _, signingPolicyAddressItem := range signingPolicyAddress {
		signingPolicyAddressRule = append(signingPolicyAddressRule, signingPolicyAddressItem)
	}

	logs, sub, err := _FastUpdater.contract.WatchLogs(opts, "FastUpdateFeedsSubmitted", votingRoundIdRule, signingPolicyAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FastUpdaterFastUpdateFeedsSubmitted)
				if err := _FastUpdater.contract.UnpackLog(event, "FastUpdateFeedsSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFastUpdateFeedsSubmitted is a log parse operation binding the contract event 0x63db91b14b3d088c677f046180aefcea7a236649704d90ce810cde455d38d936.
//
// Solidity: event FastUpdateFeedsSubmitted(uint32 indexed votingRoundId, address indexed signingPolicyAddress)
func (_FastUpdater *FastUpdaterFilterer) ParseFastUpdateFeedsSubmitted(log types.Log) (*FastUpdaterFastUpdateFeedsSubmitted, error) {
	event := new(FastUpdaterFastUpdateFeedsSubmitted)
	if err := _FastUpdater.contract.UnpackLog(event, "FastUpdateFeedsSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FastUpdaterGovernanceCallTimelockedIterator is returned from FilterGovernanceCallTimelocked and is used to iterate over the raw logs and unpacked data for GovernanceCallTimelocked events raised by the FastUpdater contract.
type FastUpdaterGovernanceCallTimelockedIterator struct {
	Event *FastUpdaterGovernanceCallTimelocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FastUpdaterGovernanceCallTimelockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FastUpdaterGovernanceCallTimelocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FastUpdaterGovernanceCallTimelocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FastUpdaterGovernanceCallTimelockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FastUpdaterGovernanceCallTimelockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FastUpdaterGovernanceCallTimelocked represents a GovernanceCallTimelocked event raised by the FastUpdater contract.
type FastUpdaterGovernanceCallTimelocked struct {
	Selector              [4]byte
	AllowedAfterTimestamp *big.Int
	EncodedCall           []byte
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterGovernanceCallTimelocked is a free log retrieval operation binding the contract event 0xed948300a3694aa01d4a6b258bfd664350193d770c0b51f8387277f6d83ea3b6.
//
// Solidity: event GovernanceCallTimelocked(bytes4 selector, uint256 allowedAfterTimestamp, bytes encodedCall)
func (_FastUpdater *FastUpdaterFilterer) FilterGovernanceCallTimelocked(opts *bind.FilterOpts) (*FastUpdaterGovernanceCallTimelockedIterator, error) {

	logs, sub, err := _FastUpdater.contract.FilterLogs(opts, "GovernanceCallTimelocked")
	if err != nil {
		return nil, err
	}
	return &FastUpdaterGovernanceCallTimelockedIterator{contract: _FastUpdater.contract, event: "GovernanceCallTimelocked", logs: logs, sub: sub}, nil
}

// WatchGovernanceCallTimelocked is a free log subscription operation binding the contract event 0xed948300a3694aa01d4a6b258bfd664350193d770c0b51f8387277f6d83ea3b6.
//
// Solidity: event GovernanceCallTimelocked(bytes4 selector, uint256 allowedAfterTimestamp, bytes encodedCall)
func (_FastUpdater *FastUpdaterFilterer) WatchGovernanceCallTimelocked(opts *bind.WatchOpts, sink chan<- *FastUpdaterGovernanceCallTimelocked) (event.Subscription, error) {

	logs, sub, err := _FastUpdater.contract.WatchLogs(opts, "GovernanceCallTimelocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FastUpdaterGovernanceCallTimelocked)
				if err := _FastUpdater.contract.UnpackLog(event, "GovernanceCallTimelocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGovernanceCallTimelocked is a log parse operation binding the contract event 0xed948300a3694aa01d4a6b258bfd664350193d770c0b51f8387277f6d83ea3b6.
//
// Solidity: event GovernanceCallTimelocked(bytes4 selector, uint256 allowedAfterTimestamp, bytes encodedCall)
func (_FastUpdater *FastUpdaterFilterer) ParseGovernanceCallTimelocked(log types.Log) (*FastUpdaterGovernanceCallTimelocked, error) {
	event := new(FastUpdaterGovernanceCallTimelocked)
	if err := _FastUpdater.contract.UnpackLog(event, "GovernanceCallTimelocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FastUpdaterGovernanceInitialisedIterator is returned from FilterGovernanceInitialised and is used to iterate over the raw logs and unpacked data for GovernanceInitialised events raised by the FastUpdater contract.
type FastUpdaterGovernanceInitialisedIterator struct {
	Event *FastUpdaterGovernanceInitialised // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FastUpdaterGovernanceInitialisedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FastUpdaterGovernanceInitialised)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FastUpdaterGovernanceInitialised)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FastUpdaterGovernanceInitialisedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FastUpdaterGovernanceInitialisedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FastUpdaterGovernanceInitialised represents a GovernanceInitialised event raised by the FastUpdater contract.
type FastUpdaterGovernanceInitialised struct {
	InitialGovernance common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterGovernanceInitialised is a free log retrieval operation binding the contract event 0x9789733827840833afc031fb2ef9ab6894271f77bad2085687cf4ae5c7bee4db.
//
// Solidity: event GovernanceInitialised(address initialGovernance)
func (_FastUpdater *FastUpdaterFilterer) FilterGovernanceInitialised(opts *bind.FilterOpts) (*FastUpdaterGovernanceInitialisedIterator, error) {

	logs, sub, err := _FastUpdater.contract.FilterLogs(opts, "GovernanceInitialised")
	if err != nil {
		return nil, err
	}
	return &FastUpdaterGovernanceInitialisedIterator{contract: _FastUpdater.contract, event: "GovernanceInitialised", logs: logs, sub: sub}, nil
}

// WatchGovernanceInitialised is a free log subscription operation binding the contract event 0x9789733827840833afc031fb2ef9ab6894271f77bad2085687cf4ae5c7bee4db.
//
// Solidity: event GovernanceInitialised(address initialGovernance)
func (_FastUpdater *FastUpdaterFilterer) WatchGovernanceInitialised(opts *bind.WatchOpts, sink chan<- *FastUpdaterGovernanceInitialised) (event.Subscription, error) {

	logs, sub, err := _FastUpdater.contract.WatchLogs(opts, "GovernanceInitialised")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FastUpdaterGovernanceInitialised)
				if err := _FastUpdater.contract.UnpackLog(event, "GovernanceInitialised", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGovernanceInitialised is a log parse operation binding the contract event 0x9789733827840833afc031fb2ef9ab6894271f77bad2085687cf4ae5c7bee4db.
//
// Solidity: event GovernanceInitialised(address initialGovernance)
func (_FastUpdater *FastUpdaterFilterer) ParseGovernanceInitialised(log types.Log) (*FastUpdaterGovernanceInitialised, error) {
	event := new(FastUpdaterGovernanceInitialised)
	if err := _FastUpdater.contract.UnpackLog(event, "GovernanceInitialised", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FastUpdaterGovernedProductionModeEnteredIterator is returned from FilterGovernedProductionModeEntered and is used to iterate over the raw logs and unpacked data for GovernedProductionModeEntered events raised by the FastUpdater contract.
type FastUpdaterGovernedProductionModeEnteredIterator struct {
	Event *FastUpdaterGovernedProductionModeEntered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FastUpdaterGovernedProductionModeEnteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FastUpdaterGovernedProductionModeEntered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FastUpdaterGovernedProductionModeEntered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FastUpdaterGovernedProductionModeEnteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FastUpdaterGovernedProductionModeEnteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FastUpdaterGovernedProductionModeEntered represents a GovernedProductionModeEntered event raised by the FastUpdater contract.
type FastUpdaterGovernedProductionModeEntered struct {
	GovernanceSettings common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterGovernedProductionModeEntered is a free log retrieval operation binding the contract event 0x83af113638b5422f9e977cebc0aaf0eaf2188eb9a8baae7f9d46c42b33a1560c.
//
// Solidity: event GovernedProductionModeEntered(address governanceSettings)
func (_FastUpdater *FastUpdaterFilterer) FilterGovernedProductionModeEntered(opts *bind.FilterOpts) (*FastUpdaterGovernedProductionModeEnteredIterator, error) {

	logs, sub, err := _FastUpdater.contract.FilterLogs(opts, "GovernedProductionModeEntered")
	if err != nil {
		return nil, err
	}
	return &FastUpdaterGovernedProductionModeEnteredIterator{contract: _FastUpdater.contract, event: "GovernedProductionModeEntered", logs: logs, sub: sub}, nil
}

// WatchGovernedProductionModeEntered is a free log subscription operation binding the contract event 0x83af113638b5422f9e977cebc0aaf0eaf2188eb9a8baae7f9d46c42b33a1560c.
//
// Solidity: event GovernedProductionModeEntered(address governanceSettings)
func (_FastUpdater *FastUpdaterFilterer) WatchGovernedProductionModeEntered(opts *bind.WatchOpts, sink chan<- *FastUpdaterGovernedProductionModeEntered) (event.Subscription, error) {

	logs, sub, err := _FastUpdater.contract.WatchLogs(opts, "GovernedProductionModeEntered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FastUpdaterGovernedProductionModeEntered)
				if err := _FastUpdater.contract.UnpackLog(event, "GovernedProductionModeEntered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGovernedProductionModeEntered is a log parse operation binding the contract event 0x83af113638b5422f9e977cebc0aaf0eaf2188eb9a8baae7f9d46c42b33a1560c.
//
// Solidity: event GovernedProductionModeEntered(address governanceSettings)
func (_FastUpdater *FastUpdaterFilterer) ParseGovernedProductionModeEntered(log types.Log) (*FastUpdaterGovernedProductionModeEntered, error) {
	event := new(FastUpdaterGovernedProductionModeEntered)
	if err := _FastUpdater.contract.UnpackLog(event, "GovernedProductionModeEntered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FastUpdaterTimelockedGovernanceCallCanceledIterator is returned from FilterTimelockedGovernanceCallCanceled and is used to iterate over the raw logs and unpacked data for TimelockedGovernanceCallCanceled events raised by the FastUpdater contract.
type FastUpdaterTimelockedGovernanceCallCanceledIterator struct {
	Event *FastUpdaterTimelockedGovernanceCallCanceled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FastUpdaterTimelockedGovernanceCallCanceledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FastUpdaterTimelockedGovernanceCallCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FastUpdaterTimelockedGovernanceCallCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FastUpdaterTimelockedGovernanceCallCanceledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FastUpdaterTimelockedGovernanceCallCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FastUpdaterTimelockedGovernanceCallCanceled represents a TimelockedGovernanceCallCanceled event raised by the FastUpdater contract.
type FastUpdaterTimelockedGovernanceCallCanceled struct {
	Selector  [4]byte
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterTimelockedGovernanceCallCanceled is a free log retrieval operation binding the contract event 0x7735b2391c38a81419c513e30ca578db7158eadd7101511b23e221c654d19cf8.
//
// Solidity: event TimelockedGovernanceCallCanceled(bytes4 selector, uint256 timestamp)
func (_FastUpdater *FastUpdaterFilterer) FilterTimelockedGovernanceCallCanceled(opts *bind.FilterOpts) (*FastUpdaterTimelockedGovernanceCallCanceledIterator, error) {

	logs, sub, err := _FastUpdater.contract.FilterLogs(opts, "TimelockedGovernanceCallCanceled")
	if err != nil {
		return nil, err
	}
	return &FastUpdaterTimelockedGovernanceCallCanceledIterator{contract: _FastUpdater.contract, event: "TimelockedGovernanceCallCanceled", logs: logs, sub: sub}, nil
}

// WatchTimelockedGovernanceCallCanceled is a free log subscription operation binding the contract event 0x7735b2391c38a81419c513e30ca578db7158eadd7101511b23e221c654d19cf8.
//
// Solidity: event TimelockedGovernanceCallCanceled(bytes4 selector, uint256 timestamp)
func (_FastUpdater *FastUpdaterFilterer) WatchTimelockedGovernanceCallCanceled(opts *bind.WatchOpts, sink chan<- *FastUpdaterTimelockedGovernanceCallCanceled) (event.Subscription, error) {

	logs, sub, err := _FastUpdater.contract.WatchLogs(opts, "TimelockedGovernanceCallCanceled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FastUpdaterTimelockedGovernanceCallCanceled)
				if err := _FastUpdater.contract.UnpackLog(event, "TimelockedGovernanceCallCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTimelockedGovernanceCallCanceled is a log parse operation binding the contract event 0x7735b2391c38a81419c513e30ca578db7158eadd7101511b23e221c654d19cf8.
//
// Solidity: event TimelockedGovernanceCallCanceled(bytes4 selector, uint256 timestamp)
func (_FastUpdater *FastUpdaterFilterer) ParseTimelockedGovernanceCallCanceled(log types.Log) (*FastUpdaterTimelockedGovernanceCallCanceled, error) {
	event := new(FastUpdaterTimelockedGovernanceCallCanceled)
	if err := _FastUpdater.contract.UnpackLog(event, "TimelockedGovernanceCallCanceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FastUpdaterTimelockedGovernanceCallExecutedIterator is returned from FilterTimelockedGovernanceCallExecuted and is used to iterate over the raw logs and unpacked data for TimelockedGovernanceCallExecuted events raised by the FastUpdater contract.
type FastUpdaterTimelockedGovernanceCallExecutedIterator struct {
	Event *FastUpdaterTimelockedGovernanceCallExecuted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FastUpdaterTimelockedGovernanceCallExecutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FastUpdaterTimelockedGovernanceCallExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FastUpdaterTimelockedGovernanceCallExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FastUpdaterTimelockedGovernanceCallExecutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FastUpdaterTimelockedGovernanceCallExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FastUpdaterTimelockedGovernanceCallExecuted represents a TimelockedGovernanceCallExecuted event raised by the FastUpdater contract.
type FastUpdaterTimelockedGovernanceCallExecuted struct {
	Selector  [4]byte
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterTimelockedGovernanceCallExecuted is a free log retrieval operation binding the contract event 0xa7326b57fc9cfe267aaea5e7f0b01757154d265620a0585819416ee9ddd2c438.
//
// Solidity: event TimelockedGovernanceCallExecuted(bytes4 selector, uint256 timestamp)
func (_FastUpdater *FastUpdaterFilterer) FilterTimelockedGovernanceCallExecuted(opts *bind.FilterOpts) (*FastUpdaterTimelockedGovernanceCallExecutedIterator, error) {

	logs, sub, err := _FastUpdater.contract.FilterLogs(opts, "TimelockedGovernanceCallExecuted")
	if err != nil {
		return nil, err
	}
	return &FastUpdaterTimelockedGovernanceCallExecutedIterator{contract: _FastUpdater.contract, event: "TimelockedGovernanceCallExecuted", logs: logs, sub: sub}, nil
}

// WatchTimelockedGovernanceCallExecuted is a free log subscription operation binding the contract event 0xa7326b57fc9cfe267aaea5e7f0b01757154d265620a0585819416ee9ddd2c438.
//
// Solidity: event TimelockedGovernanceCallExecuted(bytes4 selector, uint256 timestamp)
func (_FastUpdater *FastUpdaterFilterer) WatchTimelockedGovernanceCallExecuted(opts *bind.WatchOpts, sink chan<- *FastUpdaterTimelockedGovernanceCallExecuted) (event.Subscription, error) {

	logs, sub, err := _FastUpdater.contract.WatchLogs(opts, "TimelockedGovernanceCallExecuted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FastUpdaterTimelockedGovernanceCallExecuted)
				if err := _FastUpdater.contract.UnpackLog(event, "TimelockedGovernanceCallExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTimelockedGovernanceCallExecuted is a log parse operation binding the contract event 0xa7326b57fc9cfe267aaea5e7f0b01757154d265620a0585819416ee9ddd2c438.
//
// Solidity: event TimelockedGovernanceCallExecuted(bytes4 selector, uint256 timestamp)
func (_FastUpdater *FastUpdaterFilterer) ParseTimelockedGovernanceCallExecuted(log types.Log) (*FastUpdaterTimelockedGovernanceCallExecuted, error) {
	event := new(FastUpdaterTimelockedGovernanceCallExecuted)
	if err := _FastUpdater.contract.UnpackLog(event, "TimelockedGovernanceCallExecuted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
