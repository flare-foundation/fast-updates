// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package incentive

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IFastUpdateIncentiveManagerIncentiveOffer is an auto generated low-level Go binding around an user-defined struct.
type IFastUpdateIncentiveManagerIncentiveOffer struct {
	RangeIncrease *big.Int
	RangeLimit    *big.Int
}

// IFastUpdatesConfigurationFeedConfiguration is an auto generated low-level Go binding around an user-defined struct.
type IFastUpdatesConfigurationFeedConfiguration struct {
	FeedId          [21]byte
	RewardBandValue uint32
	InflationShare  *big.Int
}

// IncentiveMetaData contains all meta data concerning the Incentive contract.
var IncentiveMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIGovernanceSettings\",\"name\":\"_governanceSettings\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialGovernance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressUpdater\",\"type\":\"address\"},{\"internalType\":\"SampleSize\",\"name\":\"_ss\",\"type\":\"uint256\"},{\"internalType\":\"Range\",\"name\":\"_r\",\"type\":\"uint256\"},{\"internalType\":\"SampleSize\",\"name\":\"_sil\",\"type\":\"uint256\"},{\"internalType\":\"Range\",\"name\":\"_ril\",\"type\":\"uint256\"},{\"internalType\":\"Fee\",\"name\":\"_x\",\"type\":\"uint256\"},{\"internalType\":\"Fee\",\"name\":\"_rip\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dur\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"authorizedAmountWei\",\"type\":\"uint256\"}],\"name\":\"DailyAuthorizedInflationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowedAfterTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encodedCall\",\"type\":\"bytes\"}],\"name\":\"GovernanceCallTimelocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initialGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceInitialised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governanceSettings\",\"type\":\"address\"}],\"name\":\"GovernedProductionModeEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"rewardEpochId\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"Range\",\"name\":\"rangeIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"SampleSize\",\"name\":\"sampleSizeIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"Fee\",\"name\":\"offerAmount\",\"type\":\"uint256\"}],\"name\":\"IncentiveOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceivedWei\",\"type\":\"uint256\"}],\"name\":\"InflationReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"rewardEpochId\",\"type\":\"uint24\"},{\"components\":[{\"internalType\":\"bytes21\",\"name\":\"feedId\",\"type\":\"bytes21\"},{\"internalType\":\"uint32\",\"name\":\"rewardBandValue\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"inflationShare\",\"type\":\"uint24\"}],\"indexed\":false,\"internalType\":\"structIFastUpdatesConfiguration.FeedConfiguration[]\",\"name\":\"feedConfigurations\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InflationRewardsOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TimelockedGovernanceCallCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TimelockedGovernanceCallExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"advance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"}],\"name\":\"cancelGovernanceCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyAuthorizedInflation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"}],\"name\":\"executeGovernanceCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fastUpdater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fastUpdatesConfiguration\",\"outputs\":[{\"internalType\":\"contractIFastUpdatesConfiguration\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flareSystemsManager\",\"outputs\":[{\"internalType\":\"contractIIFlareSystemsManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressUpdater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_addressUpdater\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseScale\",\"outputs\":[{\"internalType\":\"Scale\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentSampleSizeIncreasePrice\",\"outputs\":[{\"internalType\":\"Fee\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpectedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpectedSampleSize\",\"outputs\":[{\"internalType\":\"SampleSize\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIncentiveDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInflationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrecision\",\"outputs\":[{\"internalType\":\"Precision\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRange\",\"outputs\":[{\"internalType\":\"Range\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getScale\",\"outputs\":[{\"internalType\":\"Scale\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPoolSupplyData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockedFundsWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalInflationAuthorizedWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalClaimedWei\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceSettings\",\"outputs\":[{\"internalType\":\"contractIGovernanceSettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIGovernanceSettings\",\"name\":\"_governanceSettings\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialGovernance\",\"type\":\"address\"}],\"name\":\"initialise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isExecutor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastInflationAuthorizationReceivedTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastInflationReceivedTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Range\",\"name\":\"rangeIncrease\",\"type\":\"uint256\"},{\"internalType\":\"Range\",\"name\":\"rangeLimit\",\"type\":\"uint256\"}],\"internalType\":\"structIFastUpdateIncentiveManager.IncentiveOffer\",\"name\":\"_offer\",\"type\":\"tuple\"}],\"name\":\"offerIncentive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productionMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rangeIncreaseLimit\",\"outputs\":[{\"internalType\":\"Range\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rangeIncreasePrice\",\"outputs\":[{\"internalType\":\"Fee\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveInflation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardManager\",\"outputs\":[{\"internalType\":\"contractIIRewardManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sampleIncreaseLimit\",\"outputs\":[{\"internalType\":\"SampleSize\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toAuthorizeWei\",\"type\":\"uint256\"}],\"name\":\"setDailyAuthorizedInflation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SampleSize\",\"name\":\"_ss\",\"type\":\"uint256\"},{\"internalType\":\"Range\",\"name\":\"_r\",\"type\":\"uint256\"},{\"internalType\":\"Fee\",\"name\":\"_x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dur\",\"type\":\"uint256\"}],\"name\":\"setIncentiveParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Range\",\"name\":\"_lim\",\"type\":\"uint256\"}],\"name\":\"setRangeIncreaseLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Fee\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setRangeIncreasePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SampleSize\",\"name\":\"_lim\",\"type\":\"uint256\"}],\"name\":\"setSampleIncreaseLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchToProductionMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"timelockedCalls\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allowedAfterTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encodedCall\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInflationAuthorizedWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInflationReceivedWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInflationRewardsOfferedWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_currentRewardEpochId\",\"type\":\"uint24\"},{\"internalType\":\"uint64\",\"name\":\"_currentRewardEpochExpectedEndTs\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_rewardEpochDurationSeconds\",\"type\":\"uint64\"}],\"name\":\"triggerRewardEpochSwitchover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_contractNameHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_contractAddresses\",\"type\":\"address[]\"}],\"name\":\"updateContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162003e9438038062003e94833981016040819052620000349162000a54565b898989808084848d8d8b8a806200004b81620000fb565b506200005a848484846200017c565b505050506200007082826200029c60201b60201c565b506200009c9050817f714f205b2abd25bef1d06a1af944e38c113fe6160375c4e1d6d5cf28848e771955565b5050505050620000b48685846200041160201b60201c565b620000c084886200054d565b620000cb85620005d3565b620000d68462000631565b620000e1826200068f565b620000eb620006ed565b5050505050505050505062000b3d565b60008111620001775760405162461bcd60e51b815260206004820152603b60248201527f43697263756c61724c6973744d616e616765723a2063697263756c6172206c6560448201527f6e677468206d7573742062652067726561746572207468616e2030000000000060648201526084015b60405180910390fd5b600055565b620001878462000709565b620001928362000767565b828411620001ef5760405162461bcd60e51b815260206004820152602360248201527f52616e6765206d757374206265206c657373207468616e2073616d706c652073604482015262697a6560e81b60648201526084016200016e565b60006066620001ff8587620007b7565b901c11620002765760405162461bcd60e51b815260206004820152603760248201527f507265636973696f6e2076616c7565206f662075706461746573206e6565647360448201527f20746f206265206174206c6561737420325e282d32352900000000000000000060648201526084016200016e565b6200028182620007dd565b6200028c81620000fb565b620002966200083b565b50505050565b600754600160a01b900460ff1615620002f85760405162461bcd60e51b815260206004820152601460248201527f696e697469616c6973656420213d2066616c736500000000000000000000000060448201526064016200016e565b6001600160a01b038216620003505760405162461bcd60e51b815260206004820152601860248201527f676f7665726e616e63652073657474696e6773207a65726f000000000000000060448201526064016200016e565b6001600160a01b0381166200039b5760405162461bcd60e51b815260206004820152601060248201526f5f676f7665726e616e6365207a65726f60801b60448201526064016200016e565b600780546001600160a01b038481166001600160a81b031990921691909117600160a01b17909155600880549183166001600160a01b0319909216821790556040519081527f9789733827840833afc031fb2ef9ab6894271f77bad2085687cf4ae5c7bee4db9060200160405180910390a15050565b81831115620004895760405162461bcd60e51b815260206004820152603560248201527f52616e67652063616e6e6f742062652067726561746572207468616e2074686560448201527f2072616e676520696e637265617365206c696d6974000000000000000000000060648201526084016200016e565b620004ae6000620004aa83620004a3620f42408862000b04565b0260781c90565b1190565b620005485760405162461bcd60e51b815260206004820152605d60248201527f52616e676520696e63726561736520707269636520746f6f206c6f772c20726160448201527f6e676520696e637265617365206f662031652d36206f6620626173652072616e60648201527f67652073686f756c6420636f7374206174206c65617374203120776569000000608482015260a4016200016e565b505050565b818111620005cf5760405162461bcd60e51b815260206004820152604260248201527f506172616d65746572732073686f756c64206e6f7420616c6c6f77206d616b6960448201527f6e672074686520707265636973696f6e2067726561746572207468616e203130606482015261302560f01b608482015260a4016200016e565b5050565b620005de8162000984565b6200062c5760405162461bcd60e51b815260206004820152601f60248201527f53616d706c6520696e637265617365206c696d697420746f6f206c617267650060448201526064016200016e565b601555565b6200063c8162000984565b6200068a5760405162461bcd60e51b815260206004820152601e60248201527f52616e676520696e637265617365206c696d697420746f6f206c61726765000060448201526064016200016e565b601655565b6200069a8162000984565b620006e85760405162461bcd60e51b815260206004820152601e60248201527f52616e676520696e63726561736520707269636520746f6f206c61726765000060448201526064016200016e565b601755565b62000704620006fb6200099a565b6001607f1b0190565b601855565b620007148162000984565b620007625760405162461bcd60e51b815260206004820152601560248201527f53616d706c652073697a6520746f6f206c61726765000000000000000000000060448201526064016200016e565b600455565b620007728162000984565b620007b25760405162461bcd60e51b815260206004820152600f60248201526e52616e676520746f6f206c6172676560881b60448201526064016200016e565b600555565b6000607f83901b8282818381620007d257620007d262000aee565b049695505050505050565b620007e88162000984565b620008365760405162461bcd60e51b815260206004820152601c60248201527f457863657373206f666665722076616c756520746f6f206c617267650000000060448201526064016200016e565b600655565b6200084960016000620009b7565b6200085760026000620009b7565b6200086560036000620009b7565b6000546001600160401b0381111562000882576200088262000b27565b604051908082528060200260200182016040528015620008ac578160200160208202803683370190505b508051620008c391600191602090910190620009d7565b506000546001600160401b03811115620008e157620008e162000b27565b6040519080825280602002602001820160405280156200090b578160200160208202803683370190505b5080516200092291600291602090910190620009d7565b506000546001600160401b0381111562000940576200094062000b27565b6040519080825280602002602001820160405280156200096a578160200160208202803683370190505b5080516200098191600391602090910190620009d7565b50565b60006200099482600160801b1190565b92915050565b6000620009b2600554600454620007b760201b60201c565b905090565b508054600082559060005260206000209081019062000981919062000a27565b82805482825590600052602060002090810192821562000a15579160200282015b8281111562000a15578251825591602001919060010190620009f8565b5062000a2392915062000a27565b5090565b5b8082111562000a23576000815560010162000a28565b6001600160a01b03811681146200098157600080fd5b6000806000806000806000806000806101408b8d03121562000a7557600080fd5b8a5162000a828162000a3e565b60208c0151909a5062000a958162000a3e565b60408c015190995062000aa88162000a3e565b8098505060608b0151965060808b0151955060a08b0151945060c08b0151935060e08b015192506101008b015191506101208b015190509295989b9194979a5092959850565b634e487b7160e01b600052601260045260246000fd5b60008262000b2257634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b6133478062000b4d6000396000f3fe6080604052600436106102675760003560e01c80639670c0bc11610144578063dd8dca9f116100b6578063ed39d3f81161007a578063ed39d3f8146106b5578063ef88bf13146106d3578063f5a98383146106f3578063f5f5ba7214610708578063f7690bfe14610754578063faae7fc91461077457600080fd5b8063dd8dca9f1461061a578063debfda301461062f578063e17f212e1461065f578063e273956314610680578063ea105ac7146106a057600080fd5b8063b5cddab811610108578063b5cddab814610583578063bd76b69c14610598578063c10f489a146105ae578063d0c1c393146105ce578063d29a4fa9146105e4578063d4ab8f941461060457600080fd5b80639670c0bc1461050e5780639b85961f14610523578063a5555aea14610538578063af04cd3b1461054e578063b00c0b761461056357600080fd5b80635ff27079116101dd57806374e6310e116101a157806374e6310e1461045557806374f3eff91461048357806375d71307146104995780637a68533f146104b9578063864578e8146104ce57806391f25679146104ee57600080fd5b80635ff27079146103ca57806362354e03146103ea57806367fc40291461040a5780636d62b4131461042a578063708e34ce1461043f57600080fd5b80632de490c31161022f5780632de490c31461032d5780633624718014610342578063473252c41461035557806352545a7c1461036b5780635267a15d146103815780635aa6e675146103b557600080fd5b806306201f1d1461026c5780630d6e9537146102765780630f4ef8a61461029657806312afcf0b146102d35780632dafdbbf146102f7575b600080fd5b610274610794565b005b34801561028257600080fd5b50610274610291366004612aa3565b6107f6565b3480156102a257600080fd5b506012546102b6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102df57600080fd5b506102e9600d5481565b6040519081526020016102ca565b34801561030357600080fd5b50610312600a54601454600092565b604080519384526020840192909252908201526060016102ca565b34801561033957600080fd5b506006546102e9565b610274610350366004612abc565b610866565b34801561036157600080fd5b506102e9600c5481565b34801561037757600080fd5b506102e960175481565b34801561038d57600080fd5b507f714f205b2abd25bef1d06a1af944e38c113fe6160375c4e1d6d5cf28848e7719546102b6565b3480156103c157600080fd5b506102b6610a53565b3480156103d657600080fd5b506102746103e5366004612ace565b610af3565b3480156103f657600080fd5b506007546102b6906001600160a01b031681565b34801561041657600080fd5b50610274610425366004612ace565b610d7c565b34801561043657600080fd5b506004546102e9565b34801561044b57600080fd5b506102e9600e5481565b34801561046157600080fd5b50610475610470366004612ace565b610e5d565b6040516102ca929190612b48565b34801561048f57600080fd5b506102e960165481565b3480156104a557600080fd5b506102746104b4366004612b69565b610f02565b3480156104c557600080fd5b506018546102e9565b3480156104da57600080fd5b506102746104e9366004612aa3565b610f70565b3480156104fa57600080fd5b50610274610509366004612bc8565b610fe7565b34801561051a57600080fd5b506102e961104c565b34801561052f57600080fd5b506005546102e9565b34801561054457600080fd5b506102e9600b5481565b34801561055a57600080fd5b506102e9611056565b34801561056f57600080fd5b5061027461057e366004612d27565b611060565b34801561058f57600080fd5b506102e961113b565b3480156105a457600080fd5b506102e960145481565b3480156105ba57600080fd5b506013546102b6906001600160a01b031681565b3480156105da57600080fd5b506102e9600a5481565b3480156105f057600080fd5b506011546102b6906001600160a01b031681565b34801561061057600080fd5b506102e960155481565b34801561062657600080fd5b506000546102e9565b34801561063b57600080fd5b5061064f61064a366004612ddf565b611151565b60405190151581526020016102ca565b34801561066b57600080fd5b5060075461064f90600160a81b900460ff1681565b34801561068c57600080fd5b5061027461069b366004612aa3565b6111dc565b3480156106ac57600080fd5b50610274611234565b3480156106c157600080fd5b50600f546001600160a01b03166102b6565b3480156106df57600080fd5b506102746106ee366004612dfc565b61128a565b3480156106ff57600080fd5b506102746113f0565b34801561071457600080fd5b50604080518082018252601a81527f46617374557064617465496e63656e746976654d616e61676572000000000000602082015290516102ca9190612e35565b34801561076057600080fd5b5061027461076f366004612aa3565b6114b6565b34801561078057600080fd5b506010546102b6906001600160a01b031681565b61079c6114ee565b6107a4611556565b34600b546107b29190612e5e565b600b5542600d556040513481527f95c4e29cc99bc027cfc3cd719d6fd973d5f0317061885fbb322b9b17d8d35d379060200160405180910390a16107f46115a1565b565b600754600160b01b900460ff16806108185750600754600160a81b900460ff16155b15610858576108256115e8565b600061083c6005546108376002611620565b900390565b905061084b8160165484611662565b61085482611789565b5050565b6108636000366117e3565b50565b61086e6114ee565b600080600061087c84611933565b9250925092506000601260009054906101000a90046001600160a01b03166001600160a01b031663705626976040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fb9190612e71565b60125460405163a02e86e560e01b815262ffffff83166004820152600060248201529192506001600160a01b03169063a02e86e59086906044016000604051808303818588803b15801561094e57600080fd5b505af1158015610962573d6000803e3d6000fd5b5050604080518781526020810187905290810188905262ffffff851693507f1c5543607841f3a87aa841c3bfa973bf64f4d545b1d9c12af3cd5831ecf826039250606001905060405180910390a26000336109bd8634612e8e565b604051600081818185875af1925050503d80600081146109f9576040519150601f19603f3d011682016040523d82523d6000602084013e6109fe565b606091505b5050905080610a465760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064015b60405180910390fd5b50505050506108636115a1565b600754600090600160a81b900460ff16610a7757506008546001600160a01b031690565b600760009054906101000a90046001600160a01b03166001600160a01b031663732524946040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aee9190612ea1565b905090565b610afc33611151565b610b385760405162461bcd60e51b815260206004820152600d60248201526c37b7363c9032bc32b1baba37b960991b6044820152606401610a3d565b6001600160e01b0319811660009081526009602052604081208054909103610ba25760405162461bcd60e51b815260206004820152601a60248201527f74696d656c6f636b3a20696e76616c69642073656c6563746f720000000000006044820152606401610a3d565b8054421015610bf35760405162461bcd60e51b815260206004820152601960248201527f74696d656c6f636b3a206e6f7420616c6c6f77656420796574000000000000006044820152606401610a3d565b6000816001018054610c0490612ebe565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3090612ebe565b8015610c7d5780601f10610c5257610100808354040283529160200191610c7d565b820191906000526020600020905b815481529060010190602001808311610c6057829003601f168201915b505050506001600160e01b0319851660009081526009602052604081208181559293509050610caf60018301826129eb565b50506007805460ff60b01b1916600160b01b1790556040516000903090610cd7908490612ef2565b6000604051808303816000865af19150503d8060008114610d14576040519150601f19603f3d011682016040523d82523d6000602084013e610d19565b606091505b50506007805460ff60b01b19169055604080516001600160e01b0319871681524260208201529192507fa7326b57fc9cfe267aaea5e7f0b01757154d265620a0585819416ee9ddd2c438910160405180910390a1610d7681611b61565b50505050565b610d84611b7e565b6001600160e01b031981166000908152600960205260408120549003610dec5760405162461bcd60e51b815260206004820152601a60248201527f74696d656c6f636b3a20696e76616c69642073656c6563746f720000000000006044820152606401610a3d565b604080516001600160e01b0319831681524260208201527f7735b2391c38a81419c513e30ca578db7158eadd7101511b23e221c654d19cf8910160405180910390a16001600160e01b03198116600090815260096020526040812081815590610e5860018301826129eb565b505050565b60096020526000908152604090208054600182018054919291610e7f90612ebe565b80601f0160208091040260200160405190810160405280929190818152602001828054610eab90612ebe565b8015610ef85780601f10610ecd57610100808354040283529160200191610ef8565b820191906000526020600020905b815481529060010190602001808311610edb57829003601f168201915b5050505050905082565b600754600160b01b900460ff1680610f245750600754600160a81b900460ff16155b15610f6557610f316115e8565b610f4083601654601754611662565b610f4c60165485611bd8565b610f5884848484611c58565b610f60611d62565b610d76565b610d766000366117e3565b600754600160b01b900460ff1680610f925750600754600160a81b900460ff16155b1561085857610f9f6115e8565b6000610fb16005546108376002611620565b9050610fc08183601754611662565b6000610fd26004546108376001611d72565b9050610fde8382611bd8565b610e5883611d9f565b6010546001600160a01b031633146110415760405162461bcd60e51b815260206004820152601960248201527f6f6e6c7920666c6172652073797374656d206d616e61676572000000000000006044820152606401610a3d565b610e58838383611df9565b6000610aee611fd6565b6000610aee611fe6565b7f714f205b2abd25bef1d06a1af944e38c113fe6160375c4e1d6d5cf28848e7719546001600160a01b0316336001600160a01b0316146110d95760405162461bcd60e51b815260206004820152601460248201527337b7363c9030b2323932b9b9903ab83230ba32b960611b6044820152606401610a3d565b61113161110d83836040518060400160405280600e81526020016d20b2323932b9b9aab83230ba32b960911b815250611ff8565b7f714f205b2abd25bef1d06a1af944e38c113fe6160375c4e1d6d5cf28848e771955565b61085482826120d5565b6000610aee611148611fd6565b6001607f1b0190565b600754600090600160a01b900460ff1680156111d65750600754604051630debfda360e41b81526001600160a01b0384811660048301529091169063debfda3090602401602060405180830381865afa1580156111b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d69190612f0e565b92915050565b6111e4611556565b600e819055600a546111f7908290612e5e565b600a5542600c556040518181527f187f32a0f765499f15b3bb52ed0aebf6015059f230f2ace7e701e60a476695959060200160405180910390a150565b6011546001600160a01b031633146112825760405162461bcd60e51b815260206004820152601160248201527037b7363c903330b9ba103ab83230ba32b960791b6044820152606401610a3d565b6107f46121ed565b600754600160a01b900460ff16156112db5760405162461bcd60e51b8152602060048201526014602482015273696e697469616c6973656420213d2066616c736560601b6044820152606401610a3d565b6001600160a01b0382166113315760405162461bcd60e51b815260206004820152601860248201527f676f7665726e616e63652073657474696e6773207a65726f00000000000000006044820152606401610a3d565b6001600160a01b03811661137a5760405162461bcd60e51b815260206004820152601060248201526f5f676f7665726e616e6365207a65726f60801b6044820152606401610a3d565b600780546001600160a01b038481166001600160a81b031990921691909117600160a01b17909155600880549183166001600160a01b0319909216821790556040519081527f9789733827840833afc031fb2ef9ab6894271f77bad2085687cf4ae5c7bee4db9060200160405180910390a15050565b6113f8611b7e565b600754600160a81b900460ff16156114525760405162461bcd60e51b815260206004820152601a60248201527f616c726561647920696e2070726f64756374696f6e206d6f64650000000000006044820152606401610a3d565b600880546001600160a01b031916905560078054600160a81b60ff60a81b198216179091556040516001600160a01b0390911681527f83af113638b5422f9e977cebc0aaf0eaf2188eb9a8baae7f9d46c42b33a1560c9060200160405180910390a1565b600754600160b01b900460ff16806114d85750600754600160a81b900460ff16155b15610858576114e56115e8565b610863816122c6565b6000346114f9611fe6565b6115039190612e5e565b905047818111156115465761dead6108fc61151e8484612e8e565b6040518115909202916000818181858888f19350505050158015610e58573d6000803e3d6000fd5b8181101561085457610854612f30565b600f546001600160a01b031633146107f45760405162461bcd60e51b815260206004820152600e60248201526d696e666c6174696f6e206f6e6c7960901b6044820152606401610a3d565b6115a9611fe6565b47146107f45760405162461bcd60e51b815260206004820152600e60248201526d6f7574206f662062616c616e636560901b6044820152606401610a3d565b600754600160b01b900460ff16156116185733301461160957611609612f30565b6007805460ff60b01b19169055565b6107f4611b7e565b6000805b825481101561165c576116528284838154811061164357611643612f46565b90600052602060002001540190565b9150600101611624565b50919050565b818311156116d05760405162461bcd60e51b815260206004820152603560248201527f52616e67652063616e6e6f742062652067726561746572207468616e20746865604482015274081c985b99d9481a5b98dc99585cd9481b1a5b5a5d605a1b6064820152608401610a3d565b6116f160006116ed836116e6620f424088612f72565b0260781c90565b1190565b610e585760405162461bcd60e51b815260206004820152605d60248201527f52616e676520696e63726561736520707269636520746f6f206c6f772c20726160448201527f6e676520696e637265617365206f662031652d36206f6620626173652072616e60648201527f67652073686f756c6420636f7374206174206c65617374203120776569000000608482015260a401610a3d565b61179281612320565b6117de5760405162461bcd60e51b815260206004820152601e60248201527f52616e676520696e63726561736520707269636520746f6f206c6172676500006044820152606401610a3d565b601755565b6117eb611b7e565b60075460408051636221a54b60e01b815290518435926000926001600160a01b0390911691636221a54b916004808201926020929091908290030181865afa15801561183b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185f9190612f86565b9050600061186d8242612e5e565b9050604051806040016040528082815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250506001600160e01b031986168152600960209081526040909120835181559083015190915060018201906118eb9082612fed565b509050507fed948300a3694aa01d4a6b258bfd664350193d770c0b51f8387277f6d83ea3b68382878760405161192494939291906130ac565b60405180910390a15050505050565b600080803460781c156119995760405162461bcd60e51b815260206004820152602860248201527f496e63656e74697665206f666665722076616c75652063617070656420617420604482015267313230206269747360c01b6064820152608401610a3d565b6119a38435612320565b6119ef5760405162461bcd60e51b815260206004820152601860248201527f52616e676520696e63726561736520746f6f206c6172676500000000000000006044820152606401610a3d565b3492508335915060008215611af6576000611a0f86602001356016541190565b611a1b57601654611a21565b85602001355b9050611a32816116ed600554870190565b15611a71576000611a44826005541190565b611a52576005548203611a55565b60005b9050611a6c611a64828761232f565b870260801c90565b955093505b601754840260781c915084821115611ae75760405162461bcd60e51b815260206004820152603360248201527f496e73756666696369656e7420636f6e747269627574696f6e20746f2070617960448201527220666f722072616e676520696e63726561736560681b6064820152608401610a3d565b611af084612352565b50611b21565b602085013515158015611b135750611b1385602001356005541190565b15611b215760009350600092505b808403848214611b5857611b34816123f6565b611b4d611b438260065461232f565b6015540260801c90565b9250611b5883612488565b50509193909250565b3d604051818101604052816000823e8215611b7a578181f35b8181fd5b611b86610a53565b6001600160a01b0316336001600160a01b0316146107f45760405162461bcd60e51b815260206004820152600f60248201526e6f6e6c7920676f7665726e616e636560881b6044820152606401610a3d565b8181116108545760405162461bcd60e51b815260206004820152604260248201527f506172616d65746572732073686f756c64206e6f7420616c6c6f77206d616b6960448201527f6e672074686520707265636973696f6e2067726561746572207468616e203130606482015261302560f01b608482015260a401610a3d565b611c6184612512565b611c6a83612564565b828411611cc55760405162461bcd60e51b815260206004820152602360248201527f52616e6765206d757374206265206c657373207468616e2073616d706c652073604482015262697a6560e81b6064820152608401610a3d565b60006066611cd385876125b0565b901c11611d485760405162461bcd60e51b815260206004820152603760248201527f507265636973696f6e2076616c7565206f662075706461746573206e6565647360448201527f20746f206265206174206c6561737420325e282d3235290000000000000000006064820152608401610a3d565b611d51826125c8565b611d5a81612622565b610d7661269d565b611d6d611148611fd6565b601855565b6000805b825481101561165c57611d958284838154811061164357611643612f46565b9150600101611d76565b611da881612320565b611df45760405162461bcd60e51b815260206004820152601e60248201527f52616e676520696e637265617365206c696d697420746f6f206c6172676500006044820152606401610a3d565b601655565b6000611e068260026130f2565b611e10908461311d565b6001600160401b031690506000611e4962015180600d54611e319190612e5e565b611e3b858761311d565b6001600160401b03166127cb565b90506000611e7b6001600160401b038516611e648585612e8e565b601454600b54611e749190612e8e565b91906127e1565b90506000611e8a876001613144565b90506000601360009054906101000a90046001600160a01b03166001600160a01b03166331038aad6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611ee1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f099190810190613160565b90508162ffffff167f58575ff9908663af0451165c3cefcb802da242d63261f6d9df3be0e05366e4da8285604051611f42929190613254565b60405180910390a28260146000828254611f5c9190612e5e565b909155505060125460405163a02e86e560e01b815262ffffff84166004820152600160248201526001600160a01b039091169063a02e86e59085906044016000604051808303818588803b158015611fb357600080fd5b505af1158015611fc7573d6000803e3d6000fd5b50505050505050505050505050565b6000610aee6005546004546125b0565b6000601454600b54610aee9190612e8e565b6000808260405160200161200c9190612e35565b6040516020818303038152906040528051906020012090506000805b86518110156120845786818151811061204357612043612f46565b602002602001015183036120725785818151811061206357612063612f46565b60200260200101519150612084565b8061207c816132cd565b915050612028565b506001600160a01b0381166120ca5760405162461bcd60e51b815260206004820152600c60248201526b61646472657373207a65726f60a01b6044820152606401610a3d565b9150505b9392505050565b6120df8282612907565b61210d82826040518060400160405280600b81526020016a2330b9ba2ab83230ba32b960a91b815250611ff8565b601160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061216382826040518060400160405280600d81526020016c2932bbb0b93226b0b730b3b2b960991b815250611ff8565b601260006101000a8154816001600160a01b0302191690836001600160a01b031602179055506121c982826040518060400160405280601881526020017f4661737455706461746573436f6e66696775726174696f6e0000000000000000815250611ff8565b601380546001600160a01b0319166001600160a01b03929092169190911790555050565b61221d60065460036121fd61296b565b8154811061220d5761220d612f46565b9060005260206000200154900390565b6006556005546122319060026121fd61296b565b6005556004546122459060016121fd61296b565b6004556000600161225461296b565b8154811061226457612264612f46565b90600052602060002001819055506000600261227e61296b565b8154811061228e5761228e612f46565b9060005260206000200181905550600060036122a861296b565b815481106122b8576122b8612f46565b600091825260209091200155565b6122cf81612320565b61231b5760405162461bcd60e51b815260206004820152601f60248201527f53616d706c6520696e637265617365206c696d697420746f6f206c61726765006044820152606401610a3d565b601555565b60006111d682600160801b1190565b6000608083901b828281838161234757612347612f5c565b049695505050505050565b61237f600261235f612977565b8154811061236f5761236f612f46565b9060005260206000200154820190565b6002612389612977565b8154811061239957612399612f46565b600091825260209091200155600554810160058190556123b890612320565b6108635760405162461bcd60e51b815260206004820152600f60248201526e52616e676520746f6f206c6172676560881b6044820152606401610a3d565b612403600361235f612977565b600361240d612977565b8154811061241d5761241d612f46565b6000918252602090912001556006548101600681905561243c90612320565b6108635760405162461bcd60e51b815260206004820152601c60248201527f457863657373206f666665722076616c756520746f6f206c61726765000000006044820152606401610a3d565b612495600161235f612977565b600161249f612977565b815481106124af576124af612f46565b600091825260209091200155600454810160048190556124ce90612320565b6108635760405162461bcd60e51b815260206004820152601560248201527453616d706c652073697a6520746f6f206c6172676560581b6044820152606401610a3d565b61251b81612320565b61255f5760405162461bcd60e51b815260206004820152601560248201527453616d706c652073697a6520746f6f206c6172676560581b6044820152606401610a3d565b600455565b61256d81612320565b6125ab5760405162461bcd60e51b815260206004820152600f60248201526e52616e676520746f6f206c6172676560881b6044820152606401610a3d565b600555565b6000607f83901b828281838161234757612347612f5c565b6125d181612320565b61261d5760405162461bcd60e51b815260206004820152601c60248201527f457863657373206f666665722076616c756520746f6f206c61726765000000006044820152606401610a3d565b600655565b600081116126985760405162461bcd60e51b815260206004820152603b60248201527f43697263756c61724c6973744d616e616765723a2063697263756c6172206c6560448201527f6e677468206d7573742062652067726561746572207468616e203000000000006064820152608401610a3d565b600055565b6126a960016000612a25565b6126b560026000612a25565b6126c160036000612a25565b6000546001600160401b038111156126db576126db612c0d565b604051908082528060200260200182016040528015612704578160200160208202803683370190505b50805161271991600191602090910190612a43565b506000546001600160401b0381111561273457612734612c0d565b60405190808252806020026020018201604052801561275d578160200160208202803683370190505b50805161277291600291602090910190612a43565b506000546001600160401b0381111561278d5761278d612c0d565b6040519080825280602002602001820160405280156127b6578160200160208202803683370190505b50805161086391600391602090910190612a43565b60008183116127da57816120ce565b5090919050565b60008082116128255760405162461bcd60e51b815260206004820152601060248201526f4469766973696f6e206279207a65726f60801b6044820152606401610a3d565b83600003612835575060006120ce565b8383028385828161284857612848612f5c565b04036128665782818161285d5761285d612f5c565b049150506120ce565b5060006128738386612f72565b9050600061288184876132e6565b9050600061288f8587612f72565b9050600061289d86886132e6565b9050856128aa82856132fa565b6128b49190612f72565b6128be83856132fa565b6128c883876132fa565b886128d386896132fa565b6128dd91906132fa565b6128e79190612e5e565b6128f19190612e5e565b6128fb9190612e5e565b98975050505050505050565b6129118282612983565b612947828260405180604001604052806013815260200172233630b932a9bcb9ba32b6b9a6b0b730b3b2b960691b815250611ff8565b601080546001600160a01b0319166001600160a01b03929092169190911790555050565b6000610aee60016129d3565b6000610aee60006129d3565b6129af82826040518060400160405280600981526020016824b7333630ba34b7b760b91b815250611ff8565b600f80546001600160a01b0319166001600160a01b03929092169190911790555050565b600080546129e14384612e5e565b6111d691906132e6565b5080546129f790612ebe565b6000825580601f10612a07575050565b601f0160209004906000526020600020908101906108639190612a8e565b50805460008255906000526020600020908101906108639190612a8e565b828054828255906000526020600020908101928215612a7e579160200282015b82811115612a7e578251825591602001919060010190612a63565b50612a8a929150612a8e565b5090565b5b80821115612a8a5760008155600101612a8f565b600060208284031215612ab557600080fd5b5035919050565b60006040828403121561165c57600080fd5b600060208284031215612ae057600080fd5b81356001600160e01b0319811681146120ce57600080fd5b60005b83811015612b13578181015183820152602001612afb565b50506000910152565b60008151808452612b34816020860160208601612af8565b601f01601f19169290920160200192915050565b828152604060208201526000612b616040830184612b1c565b949350505050565b60008060008060808587031215612b7f57600080fd5b5050823594602084013594506040840135936060013592509050565b62ffffff8116811461086357600080fd5b80356001600160401b0381168114612bc357600080fd5b919050565b600080600060608486031215612bdd57600080fd5b8335612be881612b9b565b9250612bf660208501612bac565b9150612c0460408501612bac565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715612c4557612c45612c0d565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612c7357612c73612c0d565b604052919050565b60006001600160401b03821115612c9457612c94612c0d565b5060051b60200190565b6001600160a01b038116811461086357600080fd5b600082601f830112612cc457600080fd5b81356020612cd9612cd483612c7b565b612c4b565b82815260059290921b84018101918181019086841115612cf857600080fd5b8286015b84811015612d1c578035612d0f81612c9e565b8352918301918301612cfc565b509695505050505050565b60008060408385031215612d3a57600080fd5b82356001600160401b0380821115612d5157600080fd5b818501915085601f830112612d6557600080fd5b81356020612d75612cd483612c7b565b82815260059290921b84018101918181019089841115612d9457600080fd5b948201945b83861015612db257853582529482019490820190612d99565b96505086013592505080821115612dc857600080fd5b50612dd585828601612cb3565b9150509250929050565b600060208284031215612df157600080fd5b81356120ce81612c9e565b60008060408385031215612e0f57600080fd5b8235612e1a81612c9e565b91506020830135612e2a81612c9e565b809150509250929050565b6020815260006120ce6020830184612b1c565b634e487b7160e01b600052601160045260246000fd5b808201808211156111d6576111d6612e48565b600060208284031215612e8357600080fd5b81516120ce81612b9b565b818103818111156111d6576111d6612e48565b600060208284031215612eb357600080fd5b81516120ce81612c9e565b600181811c90821680612ed257607f821691505b60208210810361165c57634e487b7160e01b600052602260045260246000fd5b60008251612f04818460208701612af8565b9190910192915050565b600060208284031215612f2057600080fd5b815180151581146120ce57600080fd5b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600082612f8157612f81612f5c565b500490565b600060208284031215612f9857600080fd5b5051919050565b601f821115610e5857600081815260208120601f850160051c81016020861015612fc65750805b601f850160051c820191505b81811015612fe557828155600101612fd2565b505050505050565b81516001600160401b0381111561300657613006612c0d565b61301a816130148454612ebe565b84612f9f565b602080601f83116001811461304f57600084156130375750858301515b600019600386901b1c1916600185901b178555612fe5565b600085815260208120601f198616915b8281101561307e5788860151825594840194600190910190840161305f565b508582101561309c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b63ffffffff60e01b8516815283602082015260606040820152816060820152818360808301376000818301608090810191909152601f909201601f191601019392505050565b6001600160401b0381811683821602808216919082811461311557613115612e48565b505092915050565b6001600160401b0382811682821603908082111561313d5761313d612e48565b5092915050565b62ffffff81811683821601908082111561313d5761313d612e48565b6000602080838503121561317357600080fd5b82516001600160401b0381111561318957600080fd5b8301601f8101851361319a57600080fd5b80516131a8612cd482612c7b565b818152606091820283018401918482019190888411156131c757600080fd5b938501935b838510156132485780858a0312156131e45760008081fd5b6131ec612c23565b85516affffffffffffffffffffff19811681146132095760008081fd5b81528587015163ffffffff811681146132225760008081fd5b8188015260408681015161323581612b9b565b90820152835293840193918501916131cc565b50979650505050505050565b6040808252835182820181905260009190606090818501906020808901865b838110156132b957815180516affffffffffffffffffffff191686528381015163ffffffff168487015287015162ffffff16878601529385019390820190600101613273565b505095909501959095525092949350505050565b6000600182016132df576132df612e48565b5060010190565b6000826132f5576132f5612f5c565b500690565b80820281158282048414176111d6576111d6612e4856fea2646970667358221220fc62e8762d7951640df9720d5f6dd36f12b1f39d6d6ee888efe9b011e5ae98ec64736f6c63430008140033",
}

// IncentiveABI is the input ABI used to generate the binding from.
// Deprecated: Use IncentiveMetaData.ABI instead.
var IncentiveABI = IncentiveMetaData.ABI

// IncentiveBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use IncentiveMetaData.Bin instead.
var IncentiveBin = IncentiveMetaData.Bin

// DeployIncentive deploys a new Ethereum contract, binding an instance of Incentive to it.
func DeployIncentive(auth *bind.TransactOpts, backend bind.ContractBackend, _governanceSettings common.Address, _initialGovernance common.Address, _addressUpdater common.Address, _ss *big.Int, _r *big.Int, _sil *big.Int, _ril *big.Int, _x *big.Int, _rip *big.Int, _dur *big.Int) (common.Address, *types.Transaction, *Incentive, error) {
	parsed, err := IncentiveMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(IncentiveBin), backend, _governanceSettings, _initialGovernance, _addressUpdater, _ss, _r, _sil, _ril, _x, _rip, _dur)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Incentive{IncentiveCaller: IncentiveCaller{contract: contract}, IncentiveTransactor: IncentiveTransactor{contract: contract}, IncentiveFilterer: IncentiveFilterer{contract: contract}}, nil
}

// Incentive is an auto generated Go binding around an Ethereum contract.
type Incentive struct {
	IncentiveCaller     // Read-only binding to the contract
	IncentiveTransactor // Write-only binding to the contract
	IncentiveFilterer   // Log filterer for contract events
}

// IncentiveCaller is an auto generated read-only Go binding around an Ethereum contract.
type IncentiveCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncentiveTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IncentiveTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncentiveFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IncentiveFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncentiveSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IncentiveSession struct {
	Contract     *Incentive        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IncentiveCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IncentiveCallerSession struct {
	Contract *IncentiveCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// IncentiveTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IncentiveTransactorSession struct {
	Contract     *IncentiveTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// IncentiveRaw is an auto generated low-level Go binding around an Ethereum contract.
type IncentiveRaw struct {
	Contract *Incentive // Generic contract binding to access the raw methods on
}

// IncentiveCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IncentiveCallerRaw struct {
	Contract *IncentiveCaller // Generic read-only contract binding to access the raw methods on
}

// IncentiveTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IncentiveTransactorRaw struct {
	Contract *IncentiveTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIncentive creates a new instance of Incentive, bound to a specific deployed contract.
func NewIncentive(address common.Address, backend bind.ContractBackend) (*Incentive, error) {
	contract, err := bindIncentive(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Incentive{IncentiveCaller: IncentiveCaller{contract: contract}, IncentiveTransactor: IncentiveTransactor{contract: contract}, IncentiveFilterer: IncentiveFilterer{contract: contract}}, nil
}

// NewIncentiveCaller creates a new read-only instance of Incentive, bound to a specific deployed contract.
func NewIncentiveCaller(address common.Address, caller bind.ContractCaller) (*IncentiveCaller, error) {
	contract, err := bindIncentive(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IncentiveCaller{contract: contract}, nil
}

// NewIncentiveTransactor creates a new write-only instance of Incentive, bound to a specific deployed contract.
func NewIncentiveTransactor(address common.Address, transactor bind.ContractTransactor) (*IncentiveTransactor, error) {
	contract, err := bindIncentive(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IncentiveTransactor{contract: contract}, nil
}

// NewIncentiveFilterer creates a new log filterer instance of Incentive, bound to a specific deployed contract.
func NewIncentiveFilterer(address common.Address, filterer bind.ContractFilterer) (*IncentiveFilterer, error) {
	contract, err := bindIncentive(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IncentiveFilterer{contract: contract}, nil
}

// bindIncentive binds a generic wrapper to an already deployed contract.
func bindIncentive(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IncentiveMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Incentive *IncentiveRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Incentive.Contract.IncentiveCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Incentive *IncentiveRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incentive.Contract.IncentiveTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Incentive *IncentiveRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Incentive.Contract.IncentiveTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Incentive *IncentiveCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Incentive.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Incentive *IncentiveTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incentive.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Incentive *IncentiveTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Incentive.Contract.contract.Transact(opts, method, params...)
}

// DailyAuthorizedInflation is a free data retrieval call binding the contract method 0x708e34ce.
//
// Solidity: function dailyAuthorizedInflation() view returns(uint256)
func (_Incentive *IncentiveCaller) DailyAuthorizedInflation(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "dailyAuthorizedInflation")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DailyAuthorizedInflation is a free data retrieval call binding the contract method 0x708e34ce.
//
// Solidity: function dailyAuthorizedInflation() view returns(uint256)
func (_Incentive *IncentiveSession) DailyAuthorizedInflation() (*big.Int, error) {
	return _Incentive.Contract.DailyAuthorizedInflation(&_Incentive.CallOpts)
}

// DailyAuthorizedInflation is a free data retrieval call binding the contract method 0x708e34ce.
//
// Solidity: function dailyAuthorizedInflation() view returns(uint256)
func (_Incentive *IncentiveCallerSession) DailyAuthorizedInflation() (*big.Int, error) {
	return _Incentive.Contract.DailyAuthorizedInflation(&_Incentive.CallOpts)
}

// FastUpdater is a free data retrieval call binding the contract method 0xd29a4fa9.
//
// Solidity: function fastUpdater() view returns(address)
func (_Incentive *IncentiveCaller) FastUpdater(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "fastUpdater")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FastUpdater is a free data retrieval call binding the contract method 0xd29a4fa9.
//
// Solidity: function fastUpdater() view returns(address)
func (_Incentive *IncentiveSession) FastUpdater() (common.Address, error) {
	return _Incentive.Contract.FastUpdater(&_Incentive.CallOpts)
}

// FastUpdater is a free data retrieval call binding the contract method 0xd29a4fa9.
//
// Solidity: function fastUpdater() view returns(address)
func (_Incentive *IncentiveCallerSession) FastUpdater() (common.Address, error) {
	return _Incentive.Contract.FastUpdater(&_Incentive.CallOpts)
}

// FastUpdatesConfiguration is a free data retrieval call binding the contract method 0xc10f489a.
//
// Solidity: function fastUpdatesConfiguration() view returns(address)
func (_Incentive *IncentiveCaller) FastUpdatesConfiguration(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "fastUpdatesConfiguration")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FastUpdatesConfiguration is a free data retrieval call binding the contract method 0xc10f489a.
//
// Solidity: function fastUpdatesConfiguration() view returns(address)
func (_Incentive *IncentiveSession) FastUpdatesConfiguration() (common.Address, error) {
	return _Incentive.Contract.FastUpdatesConfiguration(&_Incentive.CallOpts)
}

// FastUpdatesConfiguration is a free data retrieval call binding the contract method 0xc10f489a.
//
// Solidity: function fastUpdatesConfiguration() view returns(address)
func (_Incentive *IncentiveCallerSession) FastUpdatesConfiguration() (common.Address, error) {
	return _Incentive.Contract.FastUpdatesConfiguration(&_Incentive.CallOpts)
}

// FlareSystemsManager is a free data retrieval call binding the contract method 0xfaae7fc9.
//
// Solidity: function flareSystemsManager() view returns(address)
func (_Incentive *IncentiveCaller) FlareSystemsManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "flareSystemsManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FlareSystemsManager is a free data retrieval call binding the contract method 0xfaae7fc9.
//
// Solidity: function flareSystemsManager() view returns(address)
func (_Incentive *IncentiveSession) FlareSystemsManager() (common.Address, error) {
	return _Incentive.Contract.FlareSystemsManager(&_Incentive.CallOpts)
}

// FlareSystemsManager is a free data retrieval call binding the contract method 0xfaae7fc9.
//
// Solidity: function flareSystemsManager() view returns(address)
func (_Incentive *IncentiveCallerSession) FlareSystemsManager() (common.Address, error) {
	return _Incentive.Contract.FlareSystemsManager(&_Incentive.CallOpts)
}

// GetAddressUpdater is a free data retrieval call binding the contract method 0x5267a15d.
//
// Solidity: function getAddressUpdater() view returns(address _addressUpdater)
func (_Incentive *IncentiveCaller) GetAddressUpdater(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "getAddressUpdater")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAddressUpdater is a free data retrieval call binding the contract method 0x5267a15d.
//
// Solidity: function getAddressUpdater() view returns(address _addressUpdater)
func (_Incentive *IncentiveSession) GetAddressUpdater() (common.Address, error) {
	return _Incentive.Contract.GetAddressUpdater(&_Incentive.CallOpts)
}

// GetAddressUpdater is a free data retrieval call binding the contract method 0x5267a15d.
//
// Solidity: function getAddressUpdater() view returns(address _addressUpdater)
func (_Incentive *IncentiveCallerSession) GetAddressUpdater() (common.Address, error) {
	return _Incentive.Contract.GetAddressUpdater(&_Incentive.CallOpts)
}

// GetBaseScale is a free data retrieval call binding the contract method 0x7a68533f.
//
// Solidity: function getBaseScale() view returns(uint256)
func (_Incentive *IncentiveCaller) GetBaseScale(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "getBaseScale")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBaseScale is a free data retrieval call binding the contract method 0x7a68533f.
//
// Solidity: function getBaseScale() view returns(uint256)
func (_Incentive *IncentiveSession) GetBaseScale() (*big.Int, error) {
	return _Incentive.Contract.GetBaseScale(&_Incentive.CallOpts)
}

// GetBaseScale is a free data retrieval call binding the contract method 0x7a68533f.
//
// Solidity: function getBaseScale() view returns(uint256)
func (_Incentive *IncentiveCallerSession) GetBaseScale() (*big.Int, error) {
	return _Incentive.Contract.GetBaseScale(&_Incentive.CallOpts)
}

// GetContractName is a free data retrieval call binding the contract method 0xf5f5ba72.
//
// Solidity: function getContractName() pure returns(string)
func (_Incentive *IncentiveCaller) GetContractName(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "getContractName")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetContractName is a free data retrieval call binding the contract method 0xf5f5ba72.
//
// Solidity: function getContractName() pure returns(string)
func (_Incentive *IncentiveSession) GetContractName() (string, error) {
	return _Incentive.Contract.GetContractName(&_Incentive.CallOpts)
}

// GetContractName is a free data retrieval call binding the contract method 0xf5f5ba72.
//
// Solidity: function getContractName() pure returns(string)
func (_Incentive *IncentiveCallerSession) GetContractName() (string, error) {
	return _Incentive.Contract.GetContractName(&_Incentive.CallOpts)
}

// GetCurrentSampleSizeIncreasePrice is a free data retrieval call binding the contract method 0x2de490c3.
//
// Solidity: function getCurrentSampleSizeIncreasePrice() view returns(uint256)
func (_Incentive *IncentiveCaller) GetCurrentSampleSizeIncreasePrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "getCurrentSampleSizeIncreasePrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentSampleSizeIncreasePrice is a free data retrieval call binding the contract method 0x2de490c3.
//
// Solidity: function getCurrentSampleSizeIncreasePrice() view returns(uint256)
func (_Incentive *IncentiveSession) GetCurrentSampleSizeIncreasePrice() (*big.Int, error) {
	return _Incentive.Contract.GetCurrentSampleSizeIncreasePrice(&_Incentive.CallOpts)
}

// GetCurrentSampleSizeIncreasePrice is a free data retrieval call binding the contract method 0x2de490c3.
//
// Solidity: function getCurrentSampleSizeIncreasePrice() view returns(uint256)
func (_Incentive *IncentiveCallerSession) GetCurrentSampleSizeIncreasePrice() (*big.Int, error) {
	return _Incentive.Contract.GetCurrentSampleSizeIncreasePrice(&_Incentive.CallOpts)
}

// GetExpectedBalance is a free data retrieval call binding the contract method 0xaf04cd3b.
//
// Solidity: function getExpectedBalance() view returns(uint256)
func (_Incentive *IncentiveCaller) GetExpectedBalance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "getExpectedBalance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetExpectedBalance is a free data retrieval call binding the contract method 0xaf04cd3b.
//
// Solidity: function getExpectedBalance() view returns(uint256)
func (_Incentive *IncentiveSession) GetExpectedBalance() (*big.Int, error) {
	return _Incentive.Contract.GetExpectedBalance(&_Incentive.CallOpts)
}

// GetExpectedBalance is a free data retrieval call binding the contract method 0xaf04cd3b.
//
// Solidity: function getExpectedBalance() view returns(uint256)
func (_Incentive *IncentiveCallerSession) GetExpectedBalance() (*big.Int, error) {
	return _Incentive.Contract.GetExpectedBalance(&_Incentive.CallOpts)
}

// GetExpectedSampleSize is a free data retrieval call binding the contract method 0x6d62b413.
//
// Solidity: function getExpectedSampleSize() view returns(uint256)
func (_Incentive *IncentiveCaller) GetExpectedSampleSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "getExpectedSampleSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetExpectedSampleSize is a free data retrieval call binding the contract method 0x6d62b413.
//
// Solidity: function getExpectedSampleSize() view returns(uint256)
func (_Incentive *IncentiveSession) GetExpectedSampleSize() (*big.Int, error) {
	return _Incentive.Contract.GetExpectedSampleSize(&_Incentive.CallOpts)
}

// GetExpectedSampleSize is a free data retrieval call binding the contract method 0x6d62b413.
//
// Solidity: function getExpectedSampleSize() view returns(uint256)
func (_Incentive *IncentiveCallerSession) GetExpectedSampleSize() (*big.Int, error) {
	return _Incentive.Contract.GetExpectedSampleSize(&_Incentive.CallOpts)
}

// GetIncentiveDuration is a free data retrieval call binding the contract method 0xdd8dca9f.
//
// Solidity: function getIncentiveDuration() view returns(uint256)
func (_Incentive *IncentiveCaller) GetIncentiveDuration(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "getIncentiveDuration")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetIncentiveDuration is a free data retrieval call binding the contract method 0xdd8dca9f.
//
// Solidity: function getIncentiveDuration() view returns(uint256)
func (_Incentive *IncentiveSession) GetIncentiveDuration() (*big.Int, error) {
	return _Incentive.Contract.GetIncentiveDuration(&_Incentive.CallOpts)
}

// GetIncentiveDuration is a free data retrieval call binding the contract method 0xdd8dca9f.
//
// Solidity: function getIncentiveDuration() view returns(uint256)
func (_Incentive *IncentiveCallerSession) GetIncentiveDuration() (*big.Int, error) {
	return _Incentive.Contract.GetIncentiveDuration(&_Incentive.CallOpts)
}

// GetInflationAddress is a free data retrieval call binding the contract method 0xed39d3f8.
//
// Solidity: function getInflationAddress() view returns(address)
func (_Incentive *IncentiveCaller) GetInflationAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "getInflationAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetInflationAddress is a free data retrieval call binding the contract method 0xed39d3f8.
//
// Solidity: function getInflationAddress() view returns(address)
func (_Incentive *IncentiveSession) GetInflationAddress() (common.Address, error) {
	return _Incentive.Contract.GetInflationAddress(&_Incentive.CallOpts)
}

// GetInflationAddress is a free data retrieval call binding the contract method 0xed39d3f8.
//
// Solidity: function getInflationAddress() view returns(address)
func (_Incentive *IncentiveCallerSession) GetInflationAddress() (common.Address, error) {
	return _Incentive.Contract.GetInflationAddress(&_Incentive.CallOpts)
}

// GetPrecision is a free data retrieval call binding the contract method 0x9670c0bc.
//
// Solidity: function getPrecision() view returns(uint256)
func (_Incentive *IncentiveCaller) GetPrecision(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "getPrecision")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPrecision is a free data retrieval call binding the contract method 0x9670c0bc.
//
// Solidity: function getPrecision() view returns(uint256)
func (_Incentive *IncentiveSession) GetPrecision() (*big.Int, error) {
	return _Incentive.Contract.GetPrecision(&_Incentive.CallOpts)
}

// GetPrecision is a free data retrieval call binding the contract method 0x9670c0bc.
//
// Solidity: function getPrecision() view returns(uint256)
func (_Incentive *IncentiveCallerSession) GetPrecision() (*big.Int, error) {
	return _Incentive.Contract.GetPrecision(&_Incentive.CallOpts)
}

// GetRange is a free data retrieval call binding the contract method 0x9b85961f.
//
// Solidity: function getRange() view returns(uint256)
func (_Incentive *IncentiveCaller) GetRange(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "getRange")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRange is a free data retrieval call binding the contract method 0x9b85961f.
//
// Solidity: function getRange() view returns(uint256)
func (_Incentive *IncentiveSession) GetRange() (*big.Int, error) {
	return _Incentive.Contract.GetRange(&_Incentive.CallOpts)
}

// GetRange is a free data retrieval call binding the contract method 0x9b85961f.
//
// Solidity: function getRange() view returns(uint256)
func (_Incentive *IncentiveCallerSession) GetRange() (*big.Int, error) {
	return _Incentive.Contract.GetRange(&_Incentive.CallOpts)
}

// GetScale is a free data retrieval call binding the contract method 0xb5cddab8.
//
// Solidity: function getScale() view returns(uint256)
func (_Incentive *IncentiveCaller) GetScale(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "getScale")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetScale is a free data retrieval call binding the contract method 0xb5cddab8.
//
// Solidity: function getScale() view returns(uint256)
func (_Incentive *IncentiveSession) GetScale() (*big.Int, error) {
	return _Incentive.Contract.GetScale(&_Incentive.CallOpts)
}

// GetScale is a free data retrieval call binding the contract method 0xb5cddab8.
//
// Solidity: function getScale() view returns(uint256)
func (_Incentive *IncentiveCallerSession) GetScale() (*big.Int, error) {
	return _Incentive.Contract.GetScale(&_Incentive.CallOpts)
}

// GetTokenPoolSupplyData is a free data retrieval call binding the contract method 0x2dafdbbf.
//
// Solidity: function getTokenPoolSupplyData() view returns(uint256 _lockedFundsWei, uint256 _totalInflationAuthorizedWei, uint256 _totalClaimedWei)
func (_Incentive *IncentiveCaller) GetTokenPoolSupplyData(opts *bind.CallOpts) (struct {
	LockedFundsWei              *big.Int
	TotalInflationAuthorizedWei *big.Int
	TotalClaimedWei             *big.Int
}, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "getTokenPoolSupplyData")

	outstruct := new(struct {
		LockedFundsWei              *big.Int
		TotalInflationAuthorizedWei *big.Int
		TotalClaimedWei             *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.LockedFundsWei = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.TotalInflationAuthorizedWei = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.TotalClaimedWei = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetTokenPoolSupplyData is a free data retrieval call binding the contract method 0x2dafdbbf.
//
// Solidity: function getTokenPoolSupplyData() view returns(uint256 _lockedFundsWei, uint256 _totalInflationAuthorizedWei, uint256 _totalClaimedWei)
func (_Incentive *IncentiveSession) GetTokenPoolSupplyData() (struct {
	LockedFundsWei              *big.Int
	TotalInflationAuthorizedWei *big.Int
	TotalClaimedWei             *big.Int
}, error) {
	return _Incentive.Contract.GetTokenPoolSupplyData(&_Incentive.CallOpts)
}

// GetTokenPoolSupplyData is a free data retrieval call binding the contract method 0x2dafdbbf.
//
// Solidity: function getTokenPoolSupplyData() view returns(uint256 _lockedFundsWei, uint256 _totalInflationAuthorizedWei, uint256 _totalClaimedWei)
func (_Incentive *IncentiveCallerSession) GetTokenPoolSupplyData() (struct {
	LockedFundsWei              *big.Int
	TotalInflationAuthorizedWei *big.Int
	TotalClaimedWei             *big.Int
}, error) {
	return _Incentive.Contract.GetTokenPoolSupplyData(&_Incentive.CallOpts)
}

// Governance is a free data retrieval call binding the contract method 0x5aa6e675.
//
// Solidity: function governance() view returns(address)
func (_Incentive *IncentiveCaller) Governance(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "governance")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Governance is a free data retrieval call binding the contract method 0x5aa6e675.
//
// Solidity: function governance() view returns(address)
func (_Incentive *IncentiveSession) Governance() (common.Address, error) {
	return _Incentive.Contract.Governance(&_Incentive.CallOpts)
}

// Governance is a free data retrieval call binding the contract method 0x5aa6e675.
//
// Solidity: function governance() view returns(address)
func (_Incentive *IncentiveCallerSession) Governance() (common.Address, error) {
	return _Incentive.Contract.Governance(&_Incentive.CallOpts)
}

// GovernanceSettings is a free data retrieval call binding the contract method 0x62354e03.
//
// Solidity: function governanceSettings() view returns(address)
func (_Incentive *IncentiveCaller) GovernanceSettings(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "governanceSettings")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GovernanceSettings is a free data retrieval call binding the contract method 0x62354e03.
//
// Solidity: function governanceSettings() view returns(address)
func (_Incentive *IncentiveSession) GovernanceSettings() (common.Address, error) {
	return _Incentive.Contract.GovernanceSettings(&_Incentive.CallOpts)
}

// GovernanceSettings is a free data retrieval call binding the contract method 0x62354e03.
//
// Solidity: function governanceSettings() view returns(address)
func (_Incentive *IncentiveCallerSession) GovernanceSettings() (common.Address, error) {
	return _Incentive.Contract.GovernanceSettings(&_Incentive.CallOpts)
}

// IsExecutor is a free data retrieval call binding the contract method 0xdebfda30.
//
// Solidity: function isExecutor(address _address) view returns(bool)
func (_Incentive *IncentiveCaller) IsExecutor(opts *bind.CallOpts, _address common.Address) (bool, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "isExecutor", _address)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsExecutor is a free data retrieval call binding the contract method 0xdebfda30.
//
// Solidity: function isExecutor(address _address) view returns(bool)
func (_Incentive *IncentiveSession) IsExecutor(_address common.Address) (bool, error) {
	return _Incentive.Contract.IsExecutor(&_Incentive.CallOpts, _address)
}

// IsExecutor is a free data retrieval call binding the contract method 0xdebfda30.
//
// Solidity: function isExecutor(address _address) view returns(bool)
func (_Incentive *IncentiveCallerSession) IsExecutor(_address common.Address) (bool, error) {
	return _Incentive.Contract.IsExecutor(&_Incentive.CallOpts, _address)
}

// LastInflationAuthorizationReceivedTs is a free data retrieval call binding the contract method 0x473252c4.
//
// Solidity: function lastInflationAuthorizationReceivedTs() view returns(uint256)
func (_Incentive *IncentiveCaller) LastInflationAuthorizationReceivedTs(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "lastInflationAuthorizationReceivedTs")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastInflationAuthorizationReceivedTs is a free data retrieval call binding the contract method 0x473252c4.
//
// Solidity: function lastInflationAuthorizationReceivedTs() view returns(uint256)
func (_Incentive *IncentiveSession) LastInflationAuthorizationReceivedTs() (*big.Int, error) {
	return _Incentive.Contract.LastInflationAuthorizationReceivedTs(&_Incentive.CallOpts)
}

// LastInflationAuthorizationReceivedTs is a free data retrieval call binding the contract method 0x473252c4.
//
// Solidity: function lastInflationAuthorizationReceivedTs() view returns(uint256)
func (_Incentive *IncentiveCallerSession) LastInflationAuthorizationReceivedTs() (*big.Int, error) {
	return _Incentive.Contract.LastInflationAuthorizationReceivedTs(&_Incentive.CallOpts)
}

// LastInflationReceivedTs is a free data retrieval call binding the contract method 0x12afcf0b.
//
// Solidity: function lastInflationReceivedTs() view returns(uint256)
func (_Incentive *IncentiveCaller) LastInflationReceivedTs(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "lastInflationReceivedTs")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastInflationReceivedTs is a free data retrieval call binding the contract method 0x12afcf0b.
//
// Solidity: function lastInflationReceivedTs() view returns(uint256)
func (_Incentive *IncentiveSession) LastInflationReceivedTs() (*big.Int, error) {
	return _Incentive.Contract.LastInflationReceivedTs(&_Incentive.CallOpts)
}

// LastInflationReceivedTs is a free data retrieval call binding the contract method 0x12afcf0b.
//
// Solidity: function lastInflationReceivedTs() view returns(uint256)
func (_Incentive *IncentiveCallerSession) LastInflationReceivedTs() (*big.Int, error) {
	return _Incentive.Contract.LastInflationReceivedTs(&_Incentive.CallOpts)
}

// ProductionMode is a free data retrieval call binding the contract method 0xe17f212e.
//
// Solidity: function productionMode() view returns(bool)
func (_Incentive *IncentiveCaller) ProductionMode(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "productionMode")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ProductionMode is a free data retrieval call binding the contract method 0xe17f212e.
//
// Solidity: function productionMode() view returns(bool)
func (_Incentive *IncentiveSession) ProductionMode() (bool, error) {
	return _Incentive.Contract.ProductionMode(&_Incentive.CallOpts)
}

// ProductionMode is a free data retrieval call binding the contract method 0xe17f212e.
//
// Solidity: function productionMode() view returns(bool)
func (_Incentive *IncentiveCallerSession) ProductionMode() (bool, error) {
	return _Incentive.Contract.ProductionMode(&_Incentive.CallOpts)
}

// RangeIncreaseLimit is a free data retrieval call binding the contract method 0x74f3eff9.
//
// Solidity: function rangeIncreaseLimit() view returns(uint256)
func (_Incentive *IncentiveCaller) RangeIncreaseLimit(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "rangeIncreaseLimit")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RangeIncreaseLimit is a free data retrieval call binding the contract method 0x74f3eff9.
//
// Solidity: function rangeIncreaseLimit() view returns(uint256)
func (_Incentive *IncentiveSession) RangeIncreaseLimit() (*big.Int, error) {
	return _Incentive.Contract.RangeIncreaseLimit(&_Incentive.CallOpts)
}

// RangeIncreaseLimit is a free data retrieval call binding the contract method 0x74f3eff9.
//
// Solidity: function rangeIncreaseLimit() view returns(uint256)
func (_Incentive *IncentiveCallerSession) RangeIncreaseLimit() (*big.Int, error) {
	return _Incentive.Contract.RangeIncreaseLimit(&_Incentive.CallOpts)
}

// RangeIncreasePrice is a free data retrieval call binding the contract method 0x52545a7c.
//
// Solidity: function rangeIncreasePrice() view returns(uint256)
func (_Incentive *IncentiveCaller) RangeIncreasePrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "rangeIncreasePrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RangeIncreasePrice is a free data retrieval call binding the contract method 0x52545a7c.
//
// Solidity: function rangeIncreasePrice() view returns(uint256)
func (_Incentive *IncentiveSession) RangeIncreasePrice() (*big.Int, error) {
	return _Incentive.Contract.RangeIncreasePrice(&_Incentive.CallOpts)
}

// RangeIncreasePrice is a free data retrieval call binding the contract method 0x52545a7c.
//
// Solidity: function rangeIncreasePrice() view returns(uint256)
func (_Incentive *IncentiveCallerSession) RangeIncreasePrice() (*big.Int, error) {
	return _Incentive.Contract.RangeIncreasePrice(&_Incentive.CallOpts)
}

// RewardManager is a free data retrieval call binding the contract method 0x0f4ef8a6.
//
// Solidity: function rewardManager() view returns(address)
func (_Incentive *IncentiveCaller) RewardManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "rewardManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RewardManager is a free data retrieval call binding the contract method 0x0f4ef8a6.
//
// Solidity: function rewardManager() view returns(address)
func (_Incentive *IncentiveSession) RewardManager() (common.Address, error) {
	return _Incentive.Contract.RewardManager(&_Incentive.CallOpts)
}

// RewardManager is a free data retrieval call binding the contract method 0x0f4ef8a6.
//
// Solidity: function rewardManager() view returns(address)
func (_Incentive *IncentiveCallerSession) RewardManager() (common.Address, error) {
	return _Incentive.Contract.RewardManager(&_Incentive.CallOpts)
}

// SampleIncreaseLimit is a free data retrieval call binding the contract method 0xd4ab8f94.
//
// Solidity: function sampleIncreaseLimit() view returns(uint256)
func (_Incentive *IncentiveCaller) SampleIncreaseLimit(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "sampleIncreaseLimit")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SampleIncreaseLimit is a free data retrieval call binding the contract method 0xd4ab8f94.
//
// Solidity: function sampleIncreaseLimit() view returns(uint256)
func (_Incentive *IncentiveSession) SampleIncreaseLimit() (*big.Int, error) {
	return _Incentive.Contract.SampleIncreaseLimit(&_Incentive.CallOpts)
}

// SampleIncreaseLimit is a free data retrieval call binding the contract method 0xd4ab8f94.
//
// Solidity: function sampleIncreaseLimit() view returns(uint256)
func (_Incentive *IncentiveCallerSession) SampleIncreaseLimit() (*big.Int, error) {
	return _Incentive.Contract.SampleIncreaseLimit(&_Incentive.CallOpts)
}

// TimelockedCalls is a free data retrieval call binding the contract method 0x74e6310e.
//
// Solidity: function timelockedCalls(bytes4 selector) view returns(uint256 allowedAfterTimestamp, bytes encodedCall)
func (_Incentive *IncentiveCaller) TimelockedCalls(opts *bind.CallOpts, selector [4]byte) (struct {
	AllowedAfterTimestamp *big.Int
	EncodedCall           []byte
}, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "timelockedCalls", selector)

	outstruct := new(struct {
		AllowedAfterTimestamp *big.Int
		EncodedCall           []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AllowedAfterTimestamp = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.EncodedCall = *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return *outstruct, err

}

// TimelockedCalls is a free data retrieval call binding the contract method 0x74e6310e.
//
// Solidity: function timelockedCalls(bytes4 selector) view returns(uint256 allowedAfterTimestamp, bytes encodedCall)
func (_Incentive *IncentiveSession) TimelockedCalls(selector [4]byte) (struct {
	AllowedAfterTimestamp *big.Int
	EncodedCall           []byte
}, error) {
	return _Incentive.Contract.TimelockedCalls(&_Incentive.CallOpts, selector)
}

// TimelockedCalls is a free data retrieval call binding the contract method 0x74e6310e.
//
// Solidity: function timelockedCalls(bytes4 selector) view returns(uint256 allowedAfterTimestamp, bytes encodedCall)
func (_Incentive *IncentiveCallerSession) TimelockedCalls(selector [4]byte) (struct {
	AllowedAfterTimestamp *big.Int
	EncodedCall           []byte
}, error) {
	return _Incentive.Contract.TimelockedCalls(&_Incentive.CallOpts, selector)
}

// TotalInflationAuthorizedWei is a free data retrieval call binding the contract method 0xd0c1c393.
//
// Solidity: function totalInflationAuthorizedWei() view returns(uint256)
func (_Incentive *IncentiveCaller) TotalInflationAuthorizedWei(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "totalInflationAuthorizedWei")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalInflationAuthorizedWei is a free data retrieval call binding the contract method 0xd0c1c393.
//
// Solidity: function totalInflationAuthorizedWei() view returns(uint256)
func (_Incentive *IncentiveSession) TotalInflationAuthorizedWei() (*big.Int, error) {
	return _Incentive.Contract.TotalInflationAuthorizedWei(&_Incentive.CallOpts)
}

// TotalInflationAuthorizedWei is a free data retrieval call binding the contract method 0xd0c1c393.
//
// Solidity: function totalInflationAuthorizedWei() view returns(uint256)
func (_Incentive *IncentiveCallerSession) TotalInflationAuthorizedWei() (*big.Int, error) {
	return _Incentive.Contract.TotalInflationAuthorizedWei(&_Incentive.CallOpts)
}

// TotalInflationReceivedWei is a free data retrieval call binding the contract method 0xa5555aea.
//
// Solidity: function totalInflationReceivedWei() view returns(uint256)
func (_Incentive *IncentiveCaller) TotalInflationReceivedWei(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "totalInflationReceivedWei")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalInflationReceivedWei is a free data retrieval call binding the contract method 0xa5555aea.
//
// Solidity: function totalInflationReceivedWei() view returns(uint256)
func (_Incentive *IncentiveSession) TotalInflationReceivedWei() (*big.Int, error) {
	return _Incentive.Contract.TotalInflationReceivedWei(&_Incentive.CallOpts)
}

// TotalInflationReceivedWei is a free data retrieval call binding the contract method 0xa5555aea.
//
// Solidity: function totalInflationReceivedWei() view returns(uint256)
func (_Incentive *IncentiveCallerSession) TotalInflationReceivedWei() (*big.Int, error) {
	return _Incentive.Contract.TotalInflationReceivedWei(&_Incentive.CallOpts)
}

// TotalInflationRewardsOfferedWei is a free data retrieval call binding the contract method 0xbd76b69c.
//
// Solidity: function totalInflationRewardsOfferedWei() view returns(uint256)
func (_Incentive *IncentiveCaller) TotalInflationRewardsOfferedWei(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "totalInflationRewardsOfferedWei")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalInflationRewardsOfferedWei is a free data retrieval call binding the contract method 0xbd76b69c.
//
// Solidity: function totalInflationRewardsOfferedWei() view returns(uint256)
func (_Incentive *IncentiveSession) TotalInflationRewardsOfferedWei() (*big.Int, error) {
	return _Incentive.Contract.TotalInflationRewardsOfferedWei(&_Incentive.CallOpts)
}

// TotalInflationRewardsOfferedWei is a free data retrieval call binding the contract method 0xbd76b69c.
//
// Solidity: function totalInflationRewardsOfferedWei() view returns(uint256)
func (_Incentive *IncentiveCallerSession) TotalInflationRewardsOfferedWei() (*big.Int, error) {
	return _Incentive.Contract.TotalInflationRewardsOfferedWei(&_Incentive.CallOpts)
}

// Advance is a paid mutator transaction binding the contract method 0xea105ac7.
//
// Solidity: function advance() returns()
func (_Incentive *IncentiveTransactor) Advance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "advance")
}

// Advance is a paid mutator transaction binding the contract method 0xea105ac7.
//
// Solidity: function advance() returns()
func (_Incentive *IncentiveSession) Advance() (*types.Transaction, error) {
	return _Incentive.Contract.Advance(&_Incentive.TransactOpts)
}

// Advance is a paid mutator transaction binding the contract method 0xea105ac7.
//
// Solidity: function advance() returns()
func (_Incentive *IncentiveTransactorSession) Advance() (*types.Transaction, error) {
	return _Incentive.Contract.Advance(&_Incentive.TransactOpts)
}

// CancelGovernanceCall is a paid mutator transaction binding the contract method 0x67fc4029.
//
// Solidity: function cancelGovernanceCall(bytes4 _selector) returns()
func (_Incentive *IncentiveTransactor) CancelGovernanceCall(opts *bind.TransactOpts, _selector [4]byte) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "cancelGovernanceCall", _selector)
}

// CancelGovernanceCall is a paid mutator transaction binding the contract method 0x67fc4029.
//
// Solidity: function cancelGovernanceCall(bytes4 _selector) returns()
func (_Incentive *IncentiveSession) CancelGovernanceCall(_selector [4]byte) (*types.Transaction, error) {
	return _Incentive.Contract.CancelGovernanceCall(&_Incentive.TransactOpts, _selector)
}

// CancelGovernanceCall is a paid mutator transaction binding the contract method 0x67fc4029.
//
// Solidity: function cancelGovernanceCall(bytes4 _selector) returns()
func (_Incentive *IncentiveTransactorSession) CancelGovernanceCall(_selector [4]byte) (*types.Transaction, error) {
	return _Incentive.Contract.CancelGovernanceCall(&_Incentive.TransactOpts, _selector)
}

// ExecuteGovernanceCall is a paid mutator transaction binding the contract method 0x5ff27079.
//
// Solidity: function executeGovernanceCall(bytes4 _selector) returns()
func (_Incentive *IncentiveTransactor) ExecuteGovernanceCall(opts *bind.TransactOpts, _selector [4]byte) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "executeGovernanceCall", _selector)
}

// ExecuteGovernanceCall is a paid mutator transaction binding the contract method 0x5ff27079.
//
// Solidity: function executeGovernanceCall(bytes4 _selector) returns()
func (_Incentive *IncentiveSession) ExecuteGovernanceCall(_selector [4]byte) (*types.Transaction, error) {
	return _Incentive.Contract.ExecuteGovernanceCall(&_Incentive.TransactOpts, _selector)
}

// ExecuteGovernanceCall is a paid mutator transaction binding the contract method 0x5ff27079.
//
// Solidity: function executeGovernanceCall(bytes4 _selector) returns()
func (_Incentive *IncentiveTransactorSession) ExecuteGovernanceCall(_selector [4]byte) (*types.Transaction, error) {
	return _Incentive.Contract.ExecuteGovernanceCall(&_Incentive.TransactOpts, _selector)
}

// Initialise is a paid mutator transaction binding the contract method 0xef88bf13.
//
// Solidity: function initialise(address _governanceSettings, address _initialGovernance) returns()
func (_Incentive *IncentiveTransactor) Initialise(opts *bind.TransactOpts, _governanceSettings common.Address, _initialGovernance common.Address) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "initialise", _governanceSettings, _initialGovernance)
}

// Initialise is a paid mutator transaction binding the contract method 0xef88bf13.
//
// Solidity: function initialise(address _governanceSettings, address _initialGovernance) returns()
func (_Incentive *IncentiveSession) Initialise(_governanceSettings common.Address, _initialGovernance common.Address) (*types.Transaction, error) {
	return _Incentive.Contract.Initialise(&_Incentive.TransactOpts, _governanceSettings, _initialGovernance)
}

// Initialise is a paid mutator transaction binding the contract method 0xef88bf13.
//
// Solidity: function initialise(address _governanceSettings, address _initialGovernance) returns()
func (_Incentive *IncentiveTransactorSession) Initialise(_governanceSettings common.Address, _initialGovernance common.Address) (*types.Transaction, error) {
	return _Incentive.Contract.Initialise(&_Incentive.TransactOpts, _governanceSettings, _initialGovernance)
}

// OfferIncentive is a paid mutator transaction binding the contract method 0x36247180.
//
// Solidity: function offerIncentive((uint256,uint256) _offer) payable returns()
func (_Incentive *IncentiveTransactor) OfferIncentive(opts *bind.TransactOpts, _offer IFastUpdateIncentiveManagerIncentiveOffer) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "offerIncentive", _offer)
}

// OfferIncentive is a paid mutator transaction binding the contract method 0x36247180.
//
// Solidity: function offerIncentive((uint256,uint256) _offer) payable returns()
func (_Incentive *IncentiveSession) OfferIncentive(_offer IFastUpdateIncentiveManagerIncentiveOffer) (*types.Transaction, error) {
	return _Incentive.Contract.OfferIncentive(&_Incentive.TransactOpts, _offer)
}

// OfferIncentive is a paid mutator transaction binding the contract method 0x36247180.
//
// Solidity: function offerIncentive((uint256,uint256) _offer) payable returns()
func (_Incentive *IncentiveTransactorSession) OfferIncentive(_offer IFastUpdateIncentiveManagerIncentiveOffer) (*types.Transaction, error) {
	return _Incentive.Contract.OfferIncentive(&_Incentive.TransactOpts, _offer)
}

// ReceiveInflation is a paid mutator transaction binding the contract method 0x06201f1d.
//
// Solidity: function receiveInflation() payable returns()
func (_Incentive *IncentiveTransactor) ReceiveInflation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "receiveInflation")
}

// ReceiveInflation is a paid mutator transaction binding the contract method 0x06201f1d.
//
// Solidity: function receiveInflation() payable returns()
func (_Incentive *IncentiveSession) ReceiveInflation() (*types.Transaction, error) {
	return _Incentive.Contract.ReceiveInflation(&_Incentive.TransactOpts)
}

// ReceiveInflation is a paid mutator transaction binding the contract method 0x06201f1d.
//
// Solidity: function receiveInflation() payable returns()
func (_Incentive *IncentiveTransactorSession) ReceiveInflation() (*types.Transaction, error) {
	return _Incentive.Contract.ReceiveInflation(&_Incentive.TransactOpts)
}

// SetDailyAuthorizedInflation is a paid mutator transaction binding the contract method 0xe2739563.
//
// Solidity: function setDailyAuthorizedInflation(uint256 _toAuthorizeWei) returns()
func (_Incentive *IncentiveTransactor) SetDailyAuthorizedInflation(opts *bind.TransactOpts, _toAuthorizeWei *big.Int) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "setDailyAuthorizedInflation", _toAuthorizeWei)
}

// SetDailyAuthorizedInflation is a paid mutator transaction binding the contract method 0xe2739563.
//
// Solidity: function setDailyAuthorizedInflation(uint256 _toAuthorizeWei) returns()
func (_Incentive *IncentiveSession) SetDailyAuthorizedInflation(_toAuthorizeWei *big.Int) (*types.Transaction, error) {
	return _Incentive.Contract.SetDailyAuthorizedInflation(&_Incentive.TransactOpts, _toAuthorizeWei)
}

// SetDailyAuthorizedInflation is a paid mutator transaction binding the contract method 0xe2739563.
//
// Solidity: function setDailyAuthorizedInflation(uint256 _toAuthorizeWei) returns()
func (_Incentive *IncentiveTransactorSession) SetDailyAuthorizedInflation(_toAuthorizeWei *big.Int) (*types.Transaction, error) {
	return _Incentive.Contract.SetDailyAuthorizedInflation(&_Incentive.TransactOpts, _toAuthorizeWei)
}

// SetIncentiveParameters is a paid mutator transaction binding the contract method 0x75d71307.
//
// Solidity: function setIncentiveParameters(uint256 _ss, uint256 _r, uint256 _x, uint256 _dur) returns()
func (_Incentive *IncentiveTransactor) SetIncentiveParameters(opts *bind.TransactOpts, _ss *big.Int, _r *big.Int, _x *big.Int, _dur *big.Int) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "setIncentiveParameters", _ss, _r, _x, _dur)
}

// SetIncentiveParameters is a paid mutator transaction binding the contract method 0x75d71307.
//
// Solidity: function setIncentiveParameters(uint256 _ss, uint256 _r, uint256 _x, uint256 _dur) returns()
func (_Incentive *IncentiveSession) SetIncentiveParameters(_ss *big.Int, _r *big.Int, _x *big.Int, _dur *big.Int) (*types.Transaction, error) {
	return _Incentive.Contract.SetIncentiveParameters(&_Incentive.TransactOpts, _ss, _r, _x, _dur)
}

// SetIncentiveParameters is a paid mutator transaction binding the contract method 0x75d71307.
//
// Solidity: function setIncentiveParameters(uint256 _ss, uint256 _r, uint256 _x, uint256 _dur) returns()
func (_Incentive *IncentiveTransactorSession) SetIncentiveParameters(_ss *big.Int, _r *big.Int, _x *big.Int, _dur *big.Int) (*types.Transaction, error) {
	return _Incentive.Contract.SetIncentiveParameters(&_Incentive.TransactOpts, _ss, _r, _x, _dur)
}

// SetRangeIncreaseLimit is a paid mutator transaction binding the contract method 0x864578e8.
//
// Solidity: function setRangeIncreaseLimit(uint256 _lim) returns()
func (_Incentive *IncentiveTransactor) SetRangeIncreaseLimit(opts *bind.TransactOpts, _lim *big.Int) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "setRangeIncreaseLimit", _lim)
}

// SetRangeIncreaseLimit is a paid mutator transaction binding the contract method 0x864578e8.
//
// Solidity: function setRangeIncreaseLimit(uint256 _lim) returns()
func (_Incentive *IncentiveSession) SetRangeIncreaseLimit(_lim *big.Int) (*types.Transaction, error) {
	return _Incentive.Contract.SetRangeIncreaseLimit(&_Incentive.TransactOpts, _lim)
}

// SetRangeIncreaseLimit is a paid mutator transaction binding the contract method 0x864578e8.
//
// Solidity: function setRangeIncreaseLimit(uint256 _lim) returns()
func (_Incentive *IncentiveTransactorSession) SetRangeIncreaseLimit(_lim *big.Int) (*types.Transaction, error) {
	return _Incentive.Contract.SetRangeIncreaseLimit(&_Incentive.TransactOpts, _lim)
}

// SetRangeIncreasePrice is a paid mutator transaction binding the contract method 0x0d6e9537.
//
// Solidity: function setRangeIncreasePrice(uint256 _price) returns()
func (_Incentive *IncentiveTransactor) SetRangeIncreasePrice(opts *bind.TransactOpts, _price *big.Int) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "setRangeIncreasePrice", _price)
}

// SetRangeIncreasePrice is a paid mutator transaction binding the contract method 0x0d6e9537.
//
// Solidity: function setRangeIncreasePrice(uint256 _price) returns()
func (_Incentive *IncentiveSession) SetRangeIncreasePrice(_price *big.Int) (*types.Transaction, error) {
	return _Incentive.Contract.SetRangeIncreasePrice(&_Incentive.TransactOpts, _price)
}

// SetRangeIncreasePrice is a paid mutator transaction binding the contract method 0x0d6e9537.
//
// Solidity: function setRangeIncreasePrice(uint256 _price) returns()
func (_Incentive *IncentiveTransactorSession) SetRangeIncreasePrice(_price *big.Int) (*types.Transaction, error) {
	return _Incentive.Contract.SetRangeIncreasePrice(&_Incentive.TransactOpts, _price)
}

// SetSampleIncreaseLimit is a paid mutator transaction binding the contract method 0xf7690bfe.
//
// Solidity: function setSampleIncreaseLimit(uint256 _lim) returns()
func (_Incentive *IncentiveTransactor) SetSampleIncreaseLimit(opts *bind.TransactOpts, _lim *big.Int) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "setSampleIncreaseLimit", _lim)
}

// SetSampleIncreaseLimit is a paid mutator transaction binding the contract method 0xf7690bfe.
//
// Solidity: function setSampleIncreaseLimit(uint256 _lim) returns()
func (_Incentive *IncentiveSession) SetSampleIncreaseLimit(_lim *big.Int) (*types.Transaction, error) {
	return _Incentive.Contract.SetSampleIncreaseLimit(&_Incentive.TransactOpts, _lim)
}

// SetSampleIncreaseLimit is a paid mutator transaction binding the contract method 0xf7690bfe.
//
// Solidity: function setSampleIncreaseLimit(uint256 _lim) returns()
func (_Incentive *IncentiveTransactorSession) SetSampleIncreaseLimit(_lim *big.Int) (*types.Transaction, error) {
	return _Incentive.Contract.SetSampleIncreaseLimit(&_Incentive.TransactOpts, _lim)
}

// SwitchToProductionMode is a paid mutator transaction binding the contract method 0xf5a98383.
//
// Solidity: function switchToProductionMode() returns()
func (_Incentive *IncentiveTransactor) SwitchToProductionMode(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "switchToProductionMode")
}

// SwitchToProductionMode is a paid mutator transaction binding the contract method 0xf5a98383.
//
// Solidity: function switchToProductionMode() returns()
func (_Incentive *IncentiveSession) SwitchToProductionMode() (*types.Transaction, error) {
	return _Incentive.Contract.SwitchToProductionMode(&_Incentive.TransactOpts)
}

// SwitchToProductionMode is a paid mutator transaction binding the contract method 0xf5a98383.
//
// Solidity: function switchToProductionMode() returns()
func (_Incentive *IncentiveTransactorSession) SwitchToProductionMode() (*types.Transaction, error) {
	return _Incentive.Contract.SwitchToProductionMode(&_Incentive.TransactOpts)
}

// TriggerRewardEpochSwitchover is a paid mutator transaction binding the contract method 0x91f25679.
//
// Solidity: function triggerRewardEpochSwitchover(uint24 _currentRewardEpochId, uint64 _currentRewardEpochExpectedEndTs, uint64 _rewardEpochDurationSeconds) returns()
func (_Incentive *IncentiveTransactor) TriggerRewardEpochSwitchover(opts *bind.TransactOpts, _currentRewardEpochId *big.Int, _currentRewardEpochExpectedEndTs uint64, _rewardEpochDurationSeconds uint64) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "triggerRewardEpochSwitchover", _currentRewardEpochId, _currentRewardEpochExpectedEndTs, _rewardEpochDurationSeconds)
}

// TriggerRewardEpochSwitchover is a paid mutator transaction binding the contract method 0x91f25679.
//
// Solidity: function triggerRewardEpochSwitchover(uint24 _currentRewardEpochId, uint64 _currentRewardEpochExpectedEndTs, uint64 _rewardEpochDurationSeconds) returns()
func (_Incentive *IncentiveSession) TriggerRewardEpochSwitchover(_currentRewardEpochId *big.Int, _currentRewardEpochExpectedEndTs uint64, _rewardEpochDurationSeconds uint64) (*types.Transaction, error) {
	return _Incentive.Contract.TriggerRewardEpochSwitchover(&_Incentive.TransactOpts, _currentRewardEpochId, _currentRewardEpochExpectedEndTs, _rewardEpochDurationSeconds)
}

// TriggerRewardEpochSwitchover is a paid mutator transaction binding the contract method 0x91f25679.
//
// Solidity: function triggerRewardEpochSwitchover(uint24 _currentRewardEpochId, uint64 _currentRewardEpochExpectedEndTs, uint64 _rewardEpochDurationSeconds) returns()
func (_Incentive *IncentiveTransactorSession) TriggerRewardEpochSwitchover(_currentRewardEpochId *big.Int, _currentRewardEpochExpectedEndTs uint64, _rewardEpochDurationSeconds uint64) (*types.Transaction, error) {
	return _Incentive.Contract.TriggerRewardEpochSwitchover(&_Incentive.TransactOpts, _currentRewardEpochId, _currentRewardEpochExpectedEndTs, _rewardEpochDurationSeconds)
}

// UpdateContractAddresses is a paid mutator transaction binding the contract method 0xb00c0b76.
//
// Solidity: function updateContractAddresses(bytes32[] _contractNameHashes, address[] _contractAddresses) returns()
func (_Incentive *IncentiveTransactor) UpdateContractAddresses(opts *bind.TransactOpts, _contractNameHashes [][32]byte, _contractAddresses []common.Address) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "updateContractAddresses", _contractNameHashes, _contractAddresses)
}

// UpdateContractAddresses is a paid mutator transaction binding the contract method 0xb00c0b76.
//
// Solidity: function updateContractAddresses(bytes32[] _contractNameHashes, address[] _contractAddresses) returns()
func (_Incentive *IncentiveSession) UpdateContractAddresses(_contractNameHashes [][32]byte, _contractAddresses []common.Address) (*types.Transaction, error) {
	return _Incentive.Contract.UpdateContractAddresses(&_Incentive.TransactOpts, _contractNameHashes, _contractAddresses)
}

// UpdateContractAddresses is a paid mutator transaction binding the contract method 0xb00c0b76.
//
// Solidity: function updateContractAddresses(bytes32[] _contractNameHashes, address[] _contractAddresses) returns()
func (_Incentive *IncentiveTransactorSession) UpdateContractAddresses(_contractNameHashes [][32]byte, _contractAddresses []common.Address) (*types.Transaction, error) {
	return _Incentive.Contract.UpdateContractAddresses(&_Incentive.TransactOpts, _contractNameHashes, _contractAddresses)
}

// IncentiveDailyAuthorizedInflationSetIterator is returned from FilterDailyAuthorizedInflationSet and is used to iterate over the raw logs and unpacked data for DailyAuthorizedInflationSet events raised by the Incentive contract.
type IncentiveDailyAuthorizedInflationSetIterator struct {
	Event *IncentiveDailyAuthorizedInflationSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncentiveDailyAuthorizedInflationSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncentiveDailyAuthorizedInflationSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncentiveDailyAuthorizedInflationSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncentiveDailyAuthorizedInflationSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncentiveDailyAuthorizedInflationSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncentiveDailyAuthorizedInflationSet represents a DailyAuthorizedInflationSet event raised by the Incentive contract.
type IncentiveDailyAuthorizedInflationSet struct {
	AuthorizedAmountWei *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterDailyAuthorizedInflationSet is a free log retrieval operation binding the contract event 0x187f32a0f765499f15b3bb52ed0aebf6015059f230f2ace7e701e60a47669595.
//
// Solidity: event DailyAuthorizedInflationSet(uint256 authorizedAmountWei)
func (_Incentive *IncentiveFilterer) FilterDailyAuthorizedInflationSet(opts *bind.FilterOpts) (*IncentiveDailyAuthorizedInflationSetIterator, error) {

	logs, sub, err := _Incentive.contract.FilterLogs(opts, "DailyAuthorizedInflationSet")
	if err != nil {
		return nil, err
	}
	return &IncentiveDailyAuthorizedInflationSetIterator{contract: _Incentive.contract, event: "DailyAuthorizedInflationSet", logs: logs, sub: sub}, nil
}

// WatchDailyAuthorizedInflationSet is a free log subscription operation binding the contract event 0x187f32a0f765499f15b3bb52ed0aebf6015059f230f2ace7e701e60a47669595.
//
// Solidity: event DailyAuthorizedInflationSet(uint256 authorizedAmountWei)
func (_Incentive *IncentiveFilterer) WatchDailyAuthorizedInflationSet(opts *bind.WatchOpts, sink chan<- *IncentiveDailyAuthorizedInflationSet) (event.Subscription, error) {

	logs, sub, err := _Incentive.contract.WatchLogs(opts, "DailyAuthorizedInflationSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncentiveDailyAuthorizedInflationSet)
				if err := _Incentive.contract.UnpackLog(event, "DailyAuthorizedInflationSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDailyAuthorizedInflationSet is a log parse operation binding the contract event 0x187f32a0f765499f15b3bb52ed0aebf6015059f230f2ace7e701e60a47669595.
//
// Solidity: event DailyAuthorizedInflationSet(uint256 authorizedAmountWei)
func (_Incentive *IncentiveFilterer) ParseDailyAuthorizedInflationSet(log types.Log) (*IncentiveDailyAuthorizedInflationSet, error) {
	event := new(IncentiveDailyAuthorizedInflationSet)
	if err := _Incentive.contract.UnpackLog(event, "DailyAuthorizedInflationSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IncentiveGovernanceCallTimelockedIterator is returned from FilterGovernanceCallTimelocked and is used to iterate over the raw logs and unpacked data for GovernanceCallTimelocked events raised by the Incentive contract.
type IncentiveGovernanceCallTimelockedIterator struct {
	Event *IncentiveGovernanceCallTimelocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncentiveGovernanceCallTimelockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncentiveGovernanceCallTimelocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncentiveGovernanceCallTimelocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncentiveGovernanceCallTimelockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncentiveGovernanceCallTimelockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncentiveGovernanceCallTimelocked represents a GovernanceCallTimelocked event raised by the Incentive contract.
type IncentiveGovernanceCallTimelocked struct {
	Selector              [4]byte
	AllowedAfterTimestamp *big.Int
	EncodedCall           []byte
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterGovernanceCallTimelocked is a free log retrieval operation binding the contract event 0xed948300a3694aa01d4a6b258bfd664350193d770c0b51f8387277f6d83ea3b6.
//
// Solidity: event GovernanceCallTimelocked(bytes4 selector, uint256 allowedAfterTimestamp, bytes encodedCall)
func (_Incentive *IncentiveFilterer) FilterGovernanceCallTimelocked(opts *bind.FilterOpts) (*IncentiveGovernanceCallTimelockedIterator, error) {

	logs, sub, err := _Incentive.contract.FilterLogs(opts, "GovernanceCallTimelocked")
	if err != nil {
		return nil, err
	}
	return &IncentiveGovernanceCallTimelockedIterator{contract: _Incentive.contract, event: "GovernanceCallTimelocked", logs: logs, sub: sub}, nil
}

// WatchGovernanceCallTimelocked is a free log subscription operation binding the contract event 0xed948300a3694aa01d4a6b258bfd664350193d770c0b51f8387277f6d83ea3b6.
//
// Solidity: event GovernanceCallTimelocked(bytes4 selector, uint256 allowedAfterTimestamp, bytes encodedCall)
func (_Incentive *IncentiveFilterer) WatchGovernanceCallTimelocked(opts *bind.WatchOpts, sink chan<- *IncentiveGovernanceCallTimelocked) (event.Subscription, error) {

	logs, sub, err := _Incentive.contract.WatchLogs(opts, "GovernanceCallTimelocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncentiveGovernanceCallTimelocked)
				if err := _Incentive.contract.UnpackLog(event, "GovernanceCallTimelocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGovernanceCallTimelocked is a log parse operation binding the contract event 0xed948300a3694aa01d4a6b258bfd664350193d770c0b51f8387277f6d83ea3b6.
//
// Solidity: event GovernanceCallTimelocked(bytes4 selector, uint256 allowedAfterTimestamp, bytes encodedCall)
func (_Incentive *IncentiveFilterer) ParseGovernanceCallTimelocked(log types.Log) (*IncentiveGovernanceCallTimelocked, error) {
	event := new(IncentiveGovernanceCallTimelocked)
	if err := _Incentive.contract.UnpackLog(event, "GovernanceCallTimelocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IncentiveGovernanceInitialisedIterator is returned from FilterGovernanceInitialised and is used to iterate over the raw logs and unpacked data for GovernanceInitialised events raised by the Incentive contract.
type IncentiveGovernanceInitialisedIterator struct {
	Event *IncentiveGovernanceInitialised // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncentiveGovernanceInitialisedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncentiveGovernanceInitialised)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncentiveGovernanceInitialised)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncentiveGovernanceInitialisedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncentiveGovernanceInitialisedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncentiveGovernanceInitialised represents a GovernanceInitialised event raised by the Incentive contract.
type IncentiveGovernanceInitialised struct {
	InitialGovernance common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterGovernanceInitialised is a free log retrieval operation binding the contract event 0x9789733827840833afc031fb2ef9ab6894271f77bad2085687cf4ae5c7bee4db.
//
// Solidity: event GovernanceInitialised(address initialGovernance)
func (_Incentive *IncentiveFilterer) FilterGovernanceInitialised(opts *bind.FilterOpts) (*IncentiveGovernanceInitialisedIterator, error) {

	logs, sub, err := _Incentive.contract.FilterLogs(opts, "GovernanceInitialised")
	if err != nil {
		return nil, err
	}
	return &IncentiveGovernanceInitialisedIterator{contract: _Incentive.contract, event: "GovernanceInitialised", logs: logs, sub: sub}, nil
}

// WatchGovernanceInitialised is a free log subscription operation binding the contract event 0x9789733827840833afc031fb2ef9ab6894271f77bad2085687cf4ae5c7bee4db.
//
// Solidity: event GovernanceInitialised(address initialGovernance)
func (_Incentive *IncentiveFilterer) WatchGovernanceInitialised(opts *bind.WatchOpts, sink chan<- *IncentiveGovernanceInitialised) (event.Subscription, error) {

	logs, sub, err := _Incentive.contract.WatchLogs(opts, "GovernanceInitialised")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncentiveGovernanceInitialised)
				if err := _Incentive.contract.UnpackLog(event, "GovernanceInitialised", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGovernanceInitialised is a log parse operation binding the contract event 0x9789733827840833afc031fb2ef9ab6894271f77bad2085687cf4ae5c7bee4db.
//
// Solidity: event GovernanceInitialised(address initialGovernance)
func (_Incentive *IncentiveFilterer) ParseGovernanceInitialised(log types.Log) (*IncentiveGovernanceInitialised, error) {
	event := new(IncentiveGovernanceInitialised)
	if err := _Incentive.contract.UnpackLog(event, "GovernanceInitialised", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IncentiveGovernedProductionModeEnteredIterator is returned from FilterGovernedProductionModeEntered and is used to iterate over the raw logs and unpacked data for GovernedProductionModeEntered events raised by the Incentive contract.
type IncentiveGovernedProductionModeEnteredIterator struct {
	Event *IncentiveGovernedProductionModeEntered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncentiveGovernedProductionModeEnteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncentiveGovernedProductionModeEntered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncentiveGovernedProductionModeEntered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncentiveGovernedProductionModeEnteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncentiveGovernedProductionModeEnteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncentiveGovernedProductionModeEntered represents a GovernedProductionModeEntered event raised by the Incentive contract.
type IncentiveGovernedProductionModeEntered struct {
	GovernanceSettings common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterGovernedProductionModeEntered is a free log retrieval operation binding the contract event 0x83af113638b5422f9e977cebc0aaf0eaf2188eb9a8baae7f9d46c42b33a1560c.
//
// Solidity: event GovernedProductionModeEntered(address governanceSettings)
func (_Incentive *IncentiveFilterer) FilterGovernedProductionModeEntered(opts *bind.FilterOpts) (*IncentiveGovernedProductionModeEnteredIterator, error) {

	logs, sub, err := _Incentive.contract.FilterLogs(opts, "GovernedProductionModeEntered")
	if err != nil {
		return nil, err
	}
	return &IncentiveGovernedProductionModeEnteredIterator{contract: _Incentive.contract, event: "GovernedProductionModeEntered", logs: logs, sub: sub}, nil
}

// WatchGovernedProductionModeEntered is a free log subscription operation binding the contract event 0x83af113638b5422f9e977cebc0aaf0eaf2188eb9a8baae7f9d46c42b33a1560c.
//
// Solidity: event GovernedProductionModeEntered(address governanceSettings)
func (_Incentive *IncentiveFilterer) WatchGovernedProductionModeEntered(opts *bind.WatchOpts, sink chan<- *IncentiveGovernedProductionModeEntered) (event.Subscription, error) {

	logs, sub, err := _Incentive.contract.WatchLogs(opts, "GovernedProductionModeEntered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncentiveGovernedProductionModeEntered)
				if err := _Incentive.contract.UnpackLog(event, "GovernedProductionModeEntered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGovernedProductionModeEntered is a log parse operation binding the contract event 0x83af113638b5422f9e977cebc0aaf0eaf2188eb9a8baae7f9d46c42b33a1560c.
//
// Solidity: event GovernedProductionModeEntered(address governanceSettings)
func (_Incentive *IncentiveFilterer) ParseGovernedProductionModeEntered(log types.Log) (*IncentiveGovernedProductionModeEntered, error) {
	event := new(IncentiveGovernedProductionModeEntered)
	if err := _Incentive.contract.UnpackLog(event, "GovernedProductionModeEntered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IncentiveIncentiveOfferedIterator is returned from FilterIncentiveOffered and is used to iterate over the raw logs and unpacked data for IncentiveOffered events raised by the Incentive contract.
type IncentiveIncentiveOfferedIterator struct {
	Event *IncentiveIncentiveOffered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncentiveIncentiveOfferedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncentiveIncentiveOffered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncentiveIncentiveOffered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncentiveIncentiveOfferedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncentiveIncentiveOfferedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncentiveIncentiveOffered represents a IncentiveOffered event raised by the Incentive contract.
type IncentiveIncentiveOffered struct {
	RewardEpochId      *big.Int
	RangeIncrease      *big.Int
	SampleSizeIncrease *big.Int
	OfferAmount        *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterIncentiveOffered is a free log retrieval operation binding the contract event 0x1c5543607841f3a87aa841c3bfa973bf64f4d545b1d9c12af3cd5831ecf82603.
//
// Solidity: event IncentiveOffered(uint24 indexed rewardEpochId, uint256 rangeIncrease, uint256 sampleSizeIncrease, uint256 offerAmount)
func (_Incentive *IncentiveFilterer) FilterIncentiveOffered(opts *bind.FilterOpts, rewardEpochId []*big.Int) (*IncentiveIncentiveOfferedIterator, error) {

	var rewardEpochIdRule []interface{}
	for _, rewardEpochIdItem := range rewardEpochId {
		rewardEpochIdRule = append(rewardEpochIdRule, rewardEpochIdItem)
	}

	logs, sub, err := _Incentive.contract.FilterLogs(opts, "IncentiveOffered", rewardEpochIdRule)
	if err != nil {
		return nil, err
	}
	return &IncentiveIncentiveOfferedIterator{contract: _Incentive.contract, event: "IncentiveOffered", logs: logs, sub: sub}, nil
}

// WatchIncentiveOffered is a free log subscription operation binding the contract event 0x1c5543607841f3a87aa841c3bfa973bf64f4d545b1d9c12af3cd5831ecf82603.
//
// Solidity: event IncentiveOffered(uint24 indexed rewardEpochId, uint256 rangeIncrease, uint256 sampleSizeIncrease, uint256 offerAmount)
func (_Incentive *IncentiveFilterer) WatchIncentiveOffered(opts *bind.WatchOpts, sink chan<- *IncentiveIncentiveOffered, rewardEpochId []*big.Int) (event.Subscription, error) {

	var rewardEpochIdRule []interface{}
	for _, rewardEpochIdItem := range rewardEpochId {
		rewardEpochIdRule = append(rewardEpochIdRule, rewardEpochIdItem)
	}

	logs, sub, err := _Incentive.contract.WatchLogs(opts, "IncentiveOffered", rewardEpochIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncentiveIncentiveOffered)
				if err := _Incentive.contract.UnpackLog(event, "IncentiveOffered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIncentiveOffered is a log parse operation binding the contract event 0x1c5543607841f3a87aa841c3bfa973bf64f4d545b1d9c12af3cd5831ecf82603.
//
// Solidity: event IncentiveOffered(uint24 indexed rewardEpochId, uint256 rangeIncrease, uint256 sampleSizeIncrease, uint256 offerAmount)
func (_Incentive *IncentiveFilterer) ParseIncentiveOffered(log types.Log) (*IncentiveIncentiveOffered, error) {
	event := new(IncentiveIncentiveOffered)
	if err := _Incentive.contract.UnpackLog(event, "IncentiveOffered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IncentiveInflationReceivedIterator is returned from FilterInflationReceived and is used to iterate over the raw logs and unpacked data for InflationReceived events raised by the Incentive contract.
type IncentiveInflationReceivedIterator struct {
	Event *IncentiveInflationReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncentiveInflationReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncentiveInflationReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncentiveInflationReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncentiveInflationReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncentiveInflationReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncentiveInflationReceived represents a InflationReceived event raised by the Incentive contract.
type IncentiveInflationReceived struct {
	AmountReceivedWei *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterInflationReceived is a free log retrieval operation binding the contract event 0x95c4e29cc99bc027cfc3cd719d6fd973d5f0317061885fbb322b9b17d8d35d37.
//
// Solidity: event InflationReceived(uint256 amountReceivedWei)
func (_Incentive *IncentiveFilterer) FilterInflationReceived(opts *bind.FilterOpts) (*IncentiveInflationReceivedIterator, error) {

	logs, sub, err := _Incentive.contract.FilterLogs(opts, "InflationReceived")
	if err != nil {
		return nil, err
	}
	return &IncentiveInflationReceivedIterator{contract: _Incentive.contract, event: "InflationReceived", logs: logs, sub: sub}, nil
}

// WatchInflationReceived is a free log subscription operation binding the contract event 0x95c4e29cc99bc027cfc3cd719d6fd973d5f0317061885fbb322b9b17d8d35d37.
//
// Solidity: event InflationReceived(uint256 amountReceivedWei)
func (_Incentive *IncentiveFilterer) WatchInflationReceived(opts *bind.WatchOpts, sink chan<- *IncentiveInflationReceived) (event.Subscription, error) {

	logs, sub, err := _Incentive.contract.WatchLogs(opts, "InflationReceived")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncentiveInflationReceived)
				if err := _Incentive.contract.UnpackLog(event, "InflationReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInflationReceived is a log parse operation binding the contract event 0x95c4e29cc99bc027cfc3cd719d6fd973d5f0317061885fbb322b9b17d8d35d37.
//
// Solidity: event InflationReceived(uint256 amountReceivedWei)
func (_Incentive *IncentiveFilterer) ParseInflationReceived(log types.Log) (*IncentiveInflationReceived, error) {
	event := new(IncentiveInflationReceived)
	if err := _Incentive.contract.UnpackLog(event, "InflationReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IncentiveInflationRewardsOfferedIterator is returned from FilterInflationRewardsOffered and is used to iterate over the raw logs and unpacked data for InflationRewardsOffered events raised by the Incentive contract.
type IncentiveInflationRewardsOfferedIterator struct {
	Event *IncentiveInflationRewardsOffered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncentiveInflationRewardsOfferedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncentiveInflationRewardsOffered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncentiveInflationRewardsOffered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncentiveInflationRewardsOfferedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncentiveInflationRewardsOfferedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncentiveInflationRewardsOffered represents a InflationRewardsOffered event raised by the Incentive contract.
type IncentiveInflationRewardsOffered struct {
	RewardEpochId      *big.Int
	FeedConfigurations []IFastUpdatesConfigurationFeedConfiguration
	Amount             *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterInflationRewardsOffered is a free log retrieval operation binding the contract event 0x58575ff9908663af0451165c3cefcb802da242d63261f6d9df3be0e05366e4da.
//
// Solidity: event InflationRewardsOffered(uint24 indexed rewardEpochId, (bytes21,uint32,uint24)[] feedConfigurations, uint256 amount)
func (_Incentive *IncentiveFilterer) FilterInflationRewardsOffered(opts *bind.FilterOpts, rewardEpochId []*big.Int) (*IncentiveInflationRewardsOfferedIterator, error) {

	var rewardEpochIdRule []interface{}
	for _, rewardEpochIdItem := range rewardEpochId {
		rewardEpochIdRule = append(rewardEpochIdRule, rewardEpochIdItem)
	}

	logs, sub, err := _Incentive.contract.FilterLogs(opts, "InflationRewardsOffered", rewardEpochIdRule)
	if err != nil {
		return nil, err
	}
	return &IncentiveInflationRewardsOfferedIterator{contract: _Incentive.contract, event: "InflationRewardsOffered", logs: logs, sub: sub}, nil
}

// WatchInflationRewardsOffered is a free log subscription operation binding the contract event 0x58575ff9908663af0451165c3cefcb802da242d63261f6d9df3be0e05366e4da.
//
// Solidity: event InflationRewardsOffered(uint24 indexed rewardEpochId, (bytes21,uint32,uint24)[] feedConfigurations, uint256 amount)
func (_Incentive *IncentiveFilterer) WatchInflationRewardsOffered(opts *bind.WatchOpts, sink chan<- *IncentiveInflationRewardsOffered, rewardEpochId []*big.Int) (event.Subscription, error) {

	var rewardEpochIdRule []interface{}
	for _, rewardEpochIdItem := range rewardEpochId {
		rewardEpochIdRule = append(rewardEpochIdRule, rewardEpochIdItem)
	}

	logs, sub, err := _Incentive.contract.WatchLogs(opts, "InflationRewardsOffered", rewardEpochIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncentiveInflationRewardsOffered)
				if err := _Incentive.contract.UnpackLog(event, "InflationRewardsOffered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInflationRewardsOffered is a log parse operation binding the contract event 0x58575ff9908663af0451165c3cefcb802da242d63261f6d9df3be0e05366e4da.
//
// Solidity: event InflationRewardsOffered(uint24 indexed rewardEpochId, (bytes21,uint32,uint24)[] feedConfigurations, uint256 amount)
func (_Incentive *IncentiveFilterer) ParseInflationRewardsOffered(log types.Log) (*IncentiveInflationRewardsOffered, error) {
	event := new(IncentiveInflationRewardsOffered)
	if err := _Incentive.contract.UnpackLog(event, "InflationRewardsOffered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IncentiveTimelockedGovernanceCallCanceledIterator is returned from FilterTimelockedGovernanceCallCanceled and is used to iterate over the raw logs and unpacked data for TimelockedGovernanceCallCanceled events raised by the Incentive contract.
type IncentiveTimelockedGovernanceCallCanceledIterator struct {
	Event *IncentiveTimelockedGovernanceCallCanceled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncentiveTimelockedGovernanceCallCanceledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncentiveTimelockedGovernanceCallCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncentiveTimelockedGovernanceCallCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncentiveTimelockedGovernanceCallCanceledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncentiveTimelockedGovernanceCallCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncentiveTimelockedGovernanceCallCanceled represents a TimelockedGovernanceCallCanceled event raised by the Incentive contract.
type IncentiveTimelockedGovernanceCallCanceled struct {
	Selector  [4]byte
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterTimelockedGovernanceCallCanceled is a free log retrieval operation binding the contract event 0x7735b2391c38a81419c513e30ca578db7158eadd7101511b23e221c654d19cf8.
//
// Solidity: event TimelockedGovernanceCallCanceled(bytes4 selector, uint256 timestamp)
func (_Incentive *IncentiveFilterer) FilterTimelockedGovernanceCallCanceled(opts *bind.FilterOpts) (*IncentiveTimelockedGovernanceCallCanceledIterator, error) {

	logs, sub, err := _Incentive.contract.FilterLogs(opts, "TimelockedGovernanceCallCanceled")
	if err != nil {
		return nil, err
	}
	return &IncentiveTimelockedGovernanceCallCanceledIterator{contract: _Incentive.contract, event: "TimelockedGovernanceCallCanceled", logs: logs, sub: sub}, nil
}

// WatchTimelockedGovernanceCallCanceled is a free log subscription operation binding the contract event 0x7735b2391c38a81419c513e30ca578db7158eadd7101511b23e221c654d19cf8.
//
// Solidity: event TimelockedGovernanceCallCanceled(bytes4 selector, uint256 timestamp)
func (_Incentive *IncentiveFilterer) WatchTimelockedGovernanceCallCanceled(opts *bind.WatchOpts, sink chan<- *IncentiveTimelockedGovernanceCallCanceled) (event.Subscription, error) {

	logs, sub, err := _Incentive.contract.WatchLogs(opts, "TimelockedGovernanceCallCanceled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncentiveTimelockedGovernanceCallCanceled)
				if err := _Incentive.contract.UnpackLog(event, "TimelockedGovernanceCallCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTimelockedGovernanceCallCanceled is a log parse operation binding the contract event 0x7735b2391c38a81419c513e30ca578db7158eadd7101511b23e221c654d19cf8.
//
// Solidity: event TimelockedGovernanceCallCanceled(bytes4 selector, uint256 timestamp)
func (_Incentive *IncentiveFilterer) ParseTimelockedGovernanceCallCanceled(log types.Log) (*IncentiveTimelockedGovernanceCallCanceled, error) {
	event := new(IncentiveTimelockedGovernanceCallCanceled)
	if err := _Incentive.contract.UnpackLog(event, "TimelockedGovernanceCallCanceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IncentiveTimelockedGovernanceCallExecutedIterator is returned from FilterTimelockedGovernanceCallExecuted and is used to iterate over the raw logs and unpacked data for TimelockedGovernanceCallExecuted events raised by the Incentive contract.
type IncentiveTimelockedGovernanceCallExecutedIterator struct {
	Event *IncentiveTimelockedGovernanceCallExecuted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncentiveTimelockedGovernanceCallExecutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncentiveTimelockedGovernanceCallExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncentiveTimelockedGovernanceCallExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncentiveTimelockedGovernanceCallExecutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncentiveTimelockedGovernanceCallExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncentiveTimelockedGovernanceCallExecuted represents a TimelockedGovernanceCallExecuted event raised by the Incentive contract.
type IncentiveTimelockedGovernanceCallExecuted struct {
	Selector  [4]byte
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterTimelockedGovernanceCallExecuted is a free log retrieval operation binding the contract event 0xa7326b57fc9cfe267aaea5e7f0b01757154d265620a0585819416ee9ddd2c438.
//
// Solidity: event TimelockedGovernanceCallExecuted(bytes4 selector, uint256 timestamp)
func (_Incentive *IncentiveFilterer) FilterTimelockedGovernanceCallExecuted(opts *bind.FilterOpts) (*IncentiveTimelockedGovernanceCallExecutedIterator, error) {

	logs, sub, err := _Incentive.contract.FilterLogs(opts, "TimelockedGovernanceCallExecuted")
	if err != nil {
		return nil, err
	}
	return &IncentiveTimelockedGovernanceCallExecutedIterator{contract: _Incentive.contract, event: "TimelockedGovernanceCallExecuted", logs: logs, sub: sub}, nil
}

// WatchTimelockedGovernanceCallExecuted is a free log subscription operation binding the contract event 0xa7326b57fc9cfe267aaea5e7f0b01757154d265620a0585819416ee9ddd2c438.
//
// Solidity: event TimelockedGovernanceCallExecuted(bytes4 selector, uint256 timestamp)
func (_Incentive *IncentiveFilterer) WatchTimelockedGovernanceCallExecuted(opts *bind.WatchOpts, sink chan<- *IncentiveTimelockedGovernanceCallExecuted) (event.Subscription, error) {

	logs, sub, err := _Incentive.contract.WatchLogs(opts, "TimelockedGovernanceCallExecuted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncentiveTimelockedGovernanceCallExecuted)
				if err := _Incentive.contract.UnpackLog(event, "TimelockedGovernanceCallExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTimelockedGovernanceCallExecuted is a log parse operation binding the contract event 0xa7326b57fc9cfe267aaea5e7f0b01757154d265620a0585819416ee9ddd2c438.
//
// Solidity: event TimelockedGovernanceCallExecuted(bytes4 selector, uint256 timestamp)
func (_Incentive *IncentiveFilterer) ParseTimelockedGovernanceCallExecuted(log types.Log) (*IncentiveTimelockedGovernanceCallExecuted, error) {
	event := new(IncentiveTimelockedGovernanceCallExecuted)
	if err := _Incentive.contract.UnpackLog(event, "TimelockedGovernanceCallExecuted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
